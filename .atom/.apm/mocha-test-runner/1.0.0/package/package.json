{"name":"mocha-test-runner","main":"./lib/mocha-test-runner","version":"1.0.0","description":"Run Mocha tests from within Atom","repository":{"type":"git","url":"git+https://github.com/TabDigital/atom-mocha-test-runner.git"},"license":"MIT","activationCommands":{"atom-workspace":["mocha-test-runner:run","mocha-test-runner:debug","mocha-test-runner:run-previous","mocha-test-runner:debug-previous"],".platform-darwin":["settings-view:open"],".platform-win32":["settings-view:open"]},"engines":{"atom":">0.50.0"},"devDependencies":{"mocha":"~1.20.1","coffee-script":"~1.7.1"},"dependencies":{"ansi-html-stream":"0.0.3","atom-space-pen-views":"^2.0.3","jsesc":"~0.4.3","localeval":"~13.12.11","process-tree":"1.0.2","tree-kill":"0.0.6"},"readme":"# Atom : Mocha test runner\n\n[![License](http://img.shields.io/badge/license-MIT-yellow.svg?style=flat)](https://github.com/TabDigital/atom-mocha-test-runner/blob/master/LICENSE.md)\n\nRuns [Mocha](https://github.com/visionmedia/mocha) unit tests from within Atom.\n\n- `ctrl-alt-m` runs either:\n  - the current test file\n  - or a single `it` / `describe` / `suite` / `test` if the cursor is on that line\n\n- `ctrl-alt-d` is the same as above, but with `Debug Options` added\n\n- `ctrl-alt-shift-m` re-runs the last test selection\n  - even if you switched to another tab\n\n- `ctrl-alt-shift-d` is the same as above, but with `Debug Options` added\n\n![Demo](https://raw.github.com/TabDigital/atom-mocha-test-runner/master/demo.gif)\n\n### Running Mocha\n\nThis plugin looks for the closest `package.json` to the current file,\nand run the corresponding `mocha`. This should automatically pick up the right version,\nas well as your `mocha.opts` settings.\n\nIf you don't have a `package.json` file, or if Mocha isn't installed locally,\nit will try to execute the global `mocha` command instead.\n\n### How does it work?\n\nTo run the selected test, it uses `--grep` on the test name.\nIn the case the name isn't unique enough, it might run a few other tests.\nIn practice we found this is not an issue, and you still get fast TDD feedback loops.\n\n### Settings\n\nIf you go to the settings pane, you can set the following values:\n\n- `Node binary path`: path to the `node` executable (*defaults to `/usr/local/bin/node`*).\n- `Text only`: remove any colors from the Mocha output (*defaults to `false`*).\n- `Show context information`: display extra information for troubleshooting (*defaults to `false`*).\n- `Options`: append given options always to Mocha binary  (*optional*).\n- `Options for Debug`: append given options to Mocha binary to enable debugging.\n- `Env`: environment variables, useful for specifying `NODE_ENV`, etc.\n\nYou can also change the style of the results window. Simply go to `Open Your Stylesheet` in the main menu, and add\n\n```css\n.mocha-test-runner .results {\n  font-size: 1.5em;\n}\n```\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/TabDigital/atom-mocha-test-runner/issues"},"homepage":"https://github.com/TabDigital/atom-mocha-test-runner#readme","_id":"mocha-test-runner@1.0.0","_shasum":"746d28604c8e878ef94e85809987333ad96f94ad","_resolved":"file:../d-117821-37746-1556fec.rb80ejyvi/package.tgz","_from":"../d-117821-37746-1556fec.rb80ejyvi/package.tgz"}