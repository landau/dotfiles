(function() {
  var TextData, dispatch, getView, getVimState, rawKeystroke, ref, settings, withMockPlatform;

  ref = require('./spec-helper'), getVimState = ref.getVimState, dispatch = ref.dispatch, TextData = ref.TextData, getView = ref.getView, withMockPlatform = ref.withMockPlatform, rawKeystroke = ref.rawKeystroke;

  settings = require('../lib/settings');

  describe("min DSL used in vim-mode-plus's spec", function() {
    var editor, editorElement, ensure, keystroke, ref1, set, vimState;
    ref1 = [], set = ref1[0], ensure = ref1[1], keystroke = ref1[2], editor = ref1[3], editorElement = ref1[4], vimState = ref1[5];
    beforeEach(function() {
      getVimState(function(state, vim) {
        vimState = state;
        editor = vimState.editor, editorElement = vimState.editorElement;
        return set = vim.set, ensure = vim.ensure, keystroke = vim.keystroke, vim;
      });
      return runs(function() {
        return jasmine.attachToDOM(editorElement);
      });
    });
    describe("old exisisting spec options", function() {
      beforeEach(function() {
        return set({
          text: "abc",
          cursor: [0, 0]
        });
      });
      return it("toggle and move right", function() {
        return ensure("~", {
          text: "Abc",
          cursor: [0, 1]
        });
      });
    });
    describe("new 'textC' spec options with explanatory ensure", function() {
      describe("| represent cursor", function() {
        beforeEach(function() {
          set({
            textC: "|abc"
          });
          return ensure({
            text: "abc",
            cursor: [0, 0]
          });
        });
        return it("toggle and move right", function() {
          ensure("~", {
            textC: "A|bc"
          });
          return ensure({
            text: "Abc",
            cursor: [0, 1]
          });
        });
      });
      describe("! represent cursor", function() {
        beforeEach(function() {
          set({
            textC: "!abc"
          });
          return ensure({
            text: "abc",
            cursor: [0, 0]
          });
        });
        return it("toggle and move right", function() {
          ensure("~", {
            textC: "A!bc"
          });
          return ensure({
            text: "Abc",
            cursor: [0, 1]
          });
        });
      });
      return describe("| and ! is exchangable", function() {
        return it("both are OK", function() {
          set({
            textC: "|abc"
          });
          ensure("~", {
            textC: "A!bc"
          });
          set({
            textC: "a!bc"
          });
          return ensure("~", {
            textC: "aB!c"
          });
        });
      });
    });
    return describe("multi-low, multi-cursor case", function() {
      describe("without ! cursor", function() {
        return it("last cursor become last one", function() {
          set({
            textC: "|0: line0\n|1: line1"
          });
          ensure({
            cursor: [[0, 0], [1, 0]]
          });
          return expect(editor.getLastCursor().getBufferPosition()).toEqual([1, 0]);
        });
      });
      describe("with ! cursor", function() {
        return it("last cursor become ! one", function() {
          set({
            textC: "|012|345|678"
          });
          ensure({
            textC: "|012|345|678"
          });
          ensure({
            cursor: [[0, 0], [0, 3], [0, 6]]
          });
          expect(editor.getLastCursor().getBufferPosition()).toEqual([0, 6]);
          set({
            textC: "!012|345|678"
          });
          ensure({
            textC: "!012|345|678"
          });
          ensure({
            cursor: [[0, 3], [0, 6], [0, 0]]
          });
          expect(editor.getLastCursor().getBufferPosition()).toEqual([0, 0]);
          set({
            textC: "|012!345|678"
          });
          ensure({
            textC: "|012!345|678"
          });
          ensure({
            cursor: [[0, 0], [0, 6], [0, 3]]
          });
          expect(editor.getLastCursor().getBufferPosition()).toEqual([0, 3]);
          set({
            textC: "|012|345!678"
          });
          ensure({
            textC: "|012|345!678"
          });
          ensure({
            cursor: [[0, 0], [0, 3], [0, 6]]
          });
          return expect(editor.getLastCursor().getBufferPosition()).toEqual([0, 6]);
        });
      });
      return describe("without ! cursor", function() {
        beforeEach(function() {
          set({
            textC: "|ab|cde|fg\nhi|jklmn\nopqrstu\n"
          });
          return ensure({
            text: "abcdefg\nhijklmn\nopqrstu\n",
            cursor: [[0, 0], [0, 2], [0, 5], [1, 2]]
          });
        });
        return it("toggle and move right", function() {
          ensure('~', {
            textC: "A|bC|deF|g\nhiJ|klmn\nopqrstu\n"
          });
          return ensure({
            text: "AbCdeFg\nhiJklmn\nopqrstu\n",
            cursor: [[0, 1], [0, 3], [0, 6], [1, 3]]
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL3RsYW5kYXUvLmF0b20vcGFja2FnZXMvdmltLW1vZGUtcGx1cy9zcGVjL3NwZWMtaGVscGVyLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUE2RSxPQUFBLENBQVEsZUFBUixDQUE3RSxFQUFDLDZCQUFELEVBQWMsdUJBQWQsRUFBd0IsdUJBQXhCLEVBQWtDLHFCQUFsQyxFQUEyQyx1Q0FBM0MsRUFBNkQ7O0VBQzdELFFBQUEsR0FBVyxPQUFBLENBQVEsaUJBQVI7O0VBRVgsUUFBQSxDQUFTLHNDQUFULEVBQWlELFNBQUE7QUFDL0MsUUFBQTtJQUFBLE9BQTRELEVBQTVELEVBQUMsYUFBRCxFQUFNLGdCQUFOLEVBQWMsbUJBQWQsRUFBeUIsZ0JBQXpCLEVBQWlDLHVCQUFqQyxFQUFnRDtJQUVoRCxVQUFBLENBQVcsU0FBQTtNQUNULFdBQUEsQ0FBWSxTQUFDLEtBQUQsRUFBUSxHQUFSO1FBQ1YsUUFBQSxHQUFXO1FBQ1Ysd0JBQUQsRUFBUztlQUNSLGFBQUQsRUFBTSxtQkFBTixFQUFjLHlCQUFkLEVBQTJCO01BSGpCLENBQVo7YUFLQSxJQUFBLENBQUssU0FBQTtlQUNILE9BQU8sQ0FBQyxXQUFSLENBQW9CLGFBQXBCO01BREcsQ0FBTDtJQU5TLENBQVg7SUFTQSxRQUFBLENBQVMsNkJBQVQsRUFBd0MsU0FBQTtNQUN0QyxVQUFBLENBQVcsU0FBQTtlQUNULEdBQUEsQ0FBSTtVQUFBLElBQUEsRUFBTSxLQUFOO1VBQWEsTUFBQSxFQUFRLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBckI7U0FBSjtNQURTLENBQVg7YUFHQSxFQUFBLENBQUcsdUJBQUgsRUFBNEIsU0FBQTtlQUMxQixNQUFBLENBQU8sR0FBUCxFQUFZO1VBQUEsSUFBQSxFQUFNLEtBQU47VUFBYSxNQUFBLEVBQVEsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFyQjtTQUFaO01B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akIsQ0FBUjtXQUFQO2lCQUNBLE1BQUEsQ0FBTyxNQUFNLENBQUMsYUFBUCxDQUFBLENBQXNCLENBQUMsaUJBQXZCLENBQUEsQ0FBUCxDQUFrRCxDQUFDLE9BQW5ELENBQTJELENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBM0Q7UUFuQjZCLENBQS9CO01BRHdCLENBQTFCO2FBc0JBLFFBQUEsQ0FBUyxrQkFBVCxFQUE2QixTQUFBO1FBQzNCLFVBQUEsQ0FBVyxTQUFBO1VBQ1QsR0FBQSxDQUNFO1lBQUEsS0FBQSxFQUFPLGlDQUFQO1dBREY7aUJBT0EsTUFBQSxDQUNFO1lBQUEsSUFBQSxFQUFNLDZCQUFOO1lBS0EsTUFBQSxFQUFRLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFULEVBQWlCLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBakIsRUFBeUIsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUF6QixDQUxSO1dBREY7UUFSUyxDQUFYO2VBZ0JBLEVBQUEsQ0FBRyx1QkFBSCxFQUE0QixTQUFBO1VBQzFCLE1BQUEsQ0FBTyxHQUFQLEVBQ0U7WUFBQSxLQUFBLEVBQU8saUNBQVA7V0FERjtpQkFPQSxNQUFBLENBQ0U7WUFBQSxJQUFBLEVBQU0sNkJBQU47WUFLQSxNQUFBLEVBQVEsQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUQsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQVQsRUFBaUIsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFqQixFQUF5QixDQUFDLENBQUQsRUFBSSxDQUFKLENBQXpCLENBTFI7V0FERjtRQVIwQixDQUE1QjtNQWpCMkIsQ0FBN0I7SUFsQ3VDLENBQXpDO0VBOUMrQyxDQUFqRDtBQUhBIiwic291cmNlc0NvbnRlbnQiOlsie2dldFZpbVN0YXRlLCBkaXNwYXRjaCwgVGV4dERhdGEsIGdldFZpZXcsIHdpdGhNb2NrUGxhdGZvcm0sIHJhd0tleXN0cm9rZX0gPSByZXF1aXJlICcuL3NwZWMtaGVscGVyJ1xuc2V0dGluZ3MgPSByZXF1aXJlICcuLi9saWIvc2V0dGluZ3MnXG5cbmRlc2NyaWJlIFwibWluIERTTCB1c2VkIGluIHZpbS1tb2RlLXBsdXMncyBzcGVjXCIsIC0+XG4gIFtzZXQsIGVuc3VyZSwga2V5c3Ryb2tlLCBlZGl0b3IsIGVkaXRvckVsZW1lbnQsIHZpbVN0YXRlXSA9IFtdXG5cbiAgYmVmb3JlRWFjaCAtPlxuICAgIGdldFZpbVN0YXRlIChzdGF0ZSwgdmltKSAtPlxuICAgICAgdmltU3RhdGUgPSBzdGF0ZVxuICAgICAge2VkaXRvciwgZWRpdG9yRWxlbWVudH0gPSB2aW1TdGF0ZVxuICAgICAge3NldCwgZW5zdXJlLCBrZXlzdHJva2V9ID0gdmltXG5cbiAgICBydW5zIC0+XG4gICAgICBqYXNtaW5lLmF0dGFjaFRvRE9NKGVkaXRvckVsZW1lbnQpXG5cbiAgZGVzY3JpYmUgXCJvbGQgZXhpc2lzdGluZyBzcGVjIG9wdGlvbnNcIiwgLT5cbiAgICBiZWZvcmVFYWNoIC0+XG4gICAgICBzZXQgdGV4dDogXCJhYmNcIiwgY3Vyc29yOiBbMCwgMF1cblxuICAgIGl0IFwidG9nZ2xlIGFuZCBtb3ZlIHJpZ2h0XCIsIC0+XG4gICAgICBlbnN1cmUgXCJ+XCIsIHRleHQ6IFwiQWJjXCIsIGN1cnNvcjogWzAsIDFdXG5cbiAgZGVzY3JpYmUgXCJuZXcgJ3RleHRDJyBzcGVjIG9wdGlvbnMgd2l0aCBleHBsYW5hdG9yeSBlbnN1cmVcIiwgLT5cbiAgICBkZXNjcmliZSBcInwgcmVwcmVzZW50IGN1cnNvclwiLCAtPlxuICAgICAgYmVmb3JlRWFjaCAtPlxuICAgICAgICBzZXQgdGV4dEM6IFwifGFiY1wiXG4gICAgICAgIGVuc3VyZSB0ZXh0OiBcImFiY1wiLCBjdXJzb3I6IFswLCAwXSAjIGV4cGxhbmF0b3J5IHB1cnBvc2VcblxuICAgICAgaXQgXCJ0b2dnbGUgYW5kIG1vdmUgcmlnaHRcIiwgLT5cbiAgICAgICAgZW5zdXJlIFwiflwiLCB0ZXh0QzogXCJBfGJjXCJcbiAgICAgICAgZW5zdXJlIHRleHQ6IFwiQWJjXCIsIGN1cnNvcjogWzAsIDFdICMgZXhwbGFuYXRvcnkgcHVycG9zZVxuXG4gICAgZGVzY3JpYmUgXCIhIHJlcHJlc2VudCBjdXJzb3JcIiwgLT5cbiAgICAgIGJlZm9yZUVhY2ggLT5cbiAgICAgICAgc2V0IHRleHRDOiBcIiFhYmNcIlxuICAgICAgICBlbnN1cmUgdGV4dDogXCJhYmNcIiwgY3Vyc29yOiBbMCwgMF0gIyBleHBsYW5hdG9yeSBwdXJwb3NlXG5cbiAgICAgIGl0IFwidG9nZ2xlIGFuZCBtb3ZlIHJpZ2h0XCIsIC0+XG4gICAgICAgIGVuc3VyZSBcIn5cIiwgdGV4dEM6IFwiQSFiY1wiXG4gICAgICAgIGVuc3VyZSB0ZXh0OiBcIkFiY1wiLCBjdXJzb3I6IFswLCAxXSAjIGV4cGxhbmF0b3J5IHB1cnBvc2VcblxuICAgIGRlc2NyaWJlIFwifCBhbmQgISBpcyBleGNoYW5nYWJsZVwiLCAtPlxuICAgICAgaXQgXCJib3RoIGFyZSBPS1wiLCAtPlxuICAgICAgICBzZXQgdGV4dEM6IFwifGFiY1wiXG4gICAgICAgIGVuc3VyZSBcIn5cIiwgdGV4dEM6IFwiQSFiY1wiXG5cbiAgICAgICAgc2V0IHRleHRDOiBcImEhYmNcIlxuICAgICAgICBlbnN1cmUgXCJ+XCIsIHRleHRDOiBcImFCIWNcIlxuXG4gIGRlc2NyaWJlIFwibXVsdGktbG93LCBtdWx0aS1jdXJzb3IgY2FzZVwiLCAtPlxuICAgIGRlc2NyaWJlIFwid2l0aG91dCAhIGN1cnNvclwiLCAtPlxuICAgICAgaXQgXCJsYXN0IGN1cnNvciBiZWNvbWUgbGFzdCBvbmVcIiwgLT5cbiAgICAgICAgc2V0XG4gICAgICAgICAgdGV4dEM6IFwiXCJcIlxuICAgICAgICAgIHwwOiBsaW5lMFxuICAgICAgICAgIHwxOiBsaW5lMVxuICAgICAgICAgIFwiXCJcIlxuXG4gICAgICAgIGVuc3VyZSBjdXJzb3I6IFtbMCwgMF0sIFsxLCAwXV1cbiAgICAgICAgZXhwZWN0KGVkaXRvci5nZXRMYXN0Q3Vyc29yKCkuZ2V0QnVmZmVyUG9zaXRpb24oKSkudG9FcXVhbChbMSwgMF0pXG5cbiAgICBkZXNjcmliZSBcIndpdGggISBjdXJzb3JcIiwgLT5cbiAgICAgIGl0IFwibGFzdCBjdXJzb3IgYmVjb21lICEgb25lXCIsIC0+XG4gICAgICAgIHNldCB0ZXh0QzogXCJ8MDEyfDM0NXw2NzhcIlxuICAgICAgICBlbnN1cmUgdGV4dEM6IFwifDAxMnwzNDV8Njc4XCJcbiAgICAgICAgZW5zdXJlIGN1cnNvcjogW1swLCAwXSwgWzAsIDNdLCBbMCwgNl1dXG4gICAgICAgIGV4cGVjdChlZGl0b3IuZ2V0TGFzdEN1cnNvcigpLmdldEJ1ZmZlclBvc2l0aW9uKCkpLnRvRXF1YWwoWzAsIDZdKVxuXG4gICAgICAgIHNldCB0ZXh0QzogXCIhMDEyfDM0NXw2NzhcIlxuICAgICAgICBlbnN1cmUgdGV4dEM6IFwiITAxMnwzNDV8Njc4XCJcbiAgICAgICAgZW5zdXJlIGN1cnNvcjogW1swLCAzXSwgWzAsIDZdLCBbMCwgMF1dXG4gICAgICAgIGV4cGVjdChlZGl0b3IuZ2V0TGFzdEN1cnNvcigpLmdldEJ1ZmZlclBvc2l0aW9uKCkpLnRvRXF1YWwoWzAsIDBdKVxuXG4gICAgICAgIHNldCB0ZXh0QzogXCJ8MDEyITM0NXw2NzhcIlxuICAgICAgICBlbnN1cmUgdGV4dEM6IFwifDAxMiEzNDV8Njc4XCJcbiAgICAgICAgZW5zdXJlIGN1cnNvcjogW1swLCAwXSwgWzAsIDZdLCBbMCwgM11dXG4gICAgICAgIGV4cGVjdChlZGl0b3IuZ2V0TGFzdEN1cnNvcigpLmdldEJ1ZmZlclBvc2l0aW9uKCkpLnRvRXF1YWwoWzAsIDNdKVxuXG4gICAgICAgIHNldCB0ZXh0QzogXCJ8MDEyfDM0NSE2NzhcIlxuICAgICAgICBlbnN1cmUgdGV4dEM6IFwifDAxMnwzNDUhNjc4XCJcbiAgICAgICAgZW5zdXJlIGN1cnNvcjogW1swLCAwXSwgWzAsIDNdLCBbMCwgNl1dXG4gICAgICAgIGV4cGVjdChlZGl0b3IuZ2V0TGFzdEN1cnNvcigpLmdldEJ1ZmZlclBvc2l0aW9uKCkpLnRvRXF1YWwoWzAsIDZdKVxuXG4gICAgZGVzY3JpYmUgXCJ3aXRob3V0ICEgY3Vyc29yXCIsIC0+XG4gICAgICBiZWZvcmVFYWNoIC0+XG4gICAgICAgIHNldFxuICAgICAgICAgIHRleHRDOiBcIlwiXCJcbiAgICAgICAgICB8YWJ8Y2RlfGZnXG4gICAgICAgICAgaGl8amtsbW5cbiAgICAgICAgICBvcHFyc3R1XFxuXG4gICAgICAgICAgXCJcIlwiXG5cbiAgICAgICAgZW5zdXJlXG4gICAgICAgICAgdGV4dDogXCJcIlwiXG4gICAgICAgICAgYWJjZGVmZ1xuICAgICAgICAgIGhpamtsbW5cbiAgICAgICAgICBvcHFyc3R1XFxuXG4gICAgICAgICAgXCJcIlwiXG4gICAgICAgICAgY3Vyc29yOiBbWzAsIDBdLCBbMCwgMl0sIFswLCA1XSwgWzEsIDJdXVxuXG4gICAgICBpdCBcInRvZ2dsZSBhbmQgbW92ZSByaWdodFwiLCAtPlxuICAgICAgICBlbnN1cmUgJ34nLFxuICAgICAgICAgIHRleHRDOiBcIlwiXCJcbiAgICAgICAgICBBfGJDfGRlRnxnXG4gICAgICAgICAgaGlKfGtsbW5cbiAgICAgICAgICBvcHFyc3R1XFxuXG4gICAgICAgICAgXCJcIlwiXG5cbiAgICAgICAgZW5zdXJlXG4gICAgICAgICAgdGV4dDogXCJcIlwiXG4gICAgICAgICAgQWJDZGVGZ1xuICAgICAgICAgIGhpSmtsbW5cbiAgICAgICAgICBvcHFyc3R1XFxuXG4gICAgICAgICAgXCJcIlwiXG4gICAgICAgICAgY3Vyc29yOiBbWzAsIDFdLCBbMCwgM10sIFswLCA2XSwgWzEsIDNdXVxuIl19
