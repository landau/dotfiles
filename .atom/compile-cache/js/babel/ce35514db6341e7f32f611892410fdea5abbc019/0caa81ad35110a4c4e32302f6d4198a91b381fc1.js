Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getBufferPositionFromMouseEvent = getBufferPositionFromMouseEvent;
exports.mouseEventNearPosition = mouseEventNearPosition;
exports.hasParent = hasParent;

function getBufferPositionFromMouseEvent(event, editor, editorElement) {
  var pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  var screenPosition = editorElement.component.screenPositionForPixelPosition(pixelPosition);
  var expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  var differenceTop = pixelPosition.top - expectedPixelPosition.top;
  var differenceLeft = pixelPosition.left - expectedPixelPosition.left;
  // Only allow offset of 20px - Fixes steelbrain/linter-ui-default#63
  if ((differenceTop === 0 || differenceTop > 0 && differenceTop < 20 || differenceTop < 0 && differenceTop > -20) && (differenceLeft === 0 || differenceLeft > 0 && differenceLeft < 20 || differenceLeft < 0 && differenceLeft > -20)) {
    return editor.bufferPositionForScreenPosition(screenPosition);
  }
  return null;
}

function mouseEventNearPosition(event, editorElement, screenPosition, elementWidth, elementHeight) {
  var pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  var expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  var differenceTop = pixelPosition.top - expectedPixelPosition.top;
  var differenceLeft = pixelPosition.left - expectedPixelPosition.left;
  if (differenceTop === 0 && differenceLeft === 0) {
    return true;
  }
  if (differenceTop > 0 && differenceTop > elementHeight + 20 || differenceTop < 0 && differenceTop < -5) {
    return false;
  }
  if (differenceLeft > 15 && differenceTop < 17) {
    return false;
  }
  return differenceLeft > 0 && differenceLeft < elementWidth + 20 || differenceLeft < 0 && differenceLeft > -5;
}

function hasParent(element, selector) {
  do {
    if (element.matches(selector)) {
      return true;
    }
    // $FlowIgnore: It's parent is an HTMLElement, not a NODE!
    element = element.parentNode;
  } while (element && element.nodeName !== 'HTML');
  return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90bGFuZGF1L2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci11aS1kZWZhdWx0L2xpYi9lZGl0b3IvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSU8sU0FBUywrQkFBK0IsQ0FBQyxLQUFpQixFQUFFLE1BQWtCLEVBQUUsYUFBcUIsRUFBVTtBQUNwSCxNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQy9FLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDNUYsTUFBTSxxQkFBcUIsR0FBRyxhQUFhLENBQUMsOEJBQThCLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDMUYsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLEdBQUcsR0FBRyxxQkFBcUIsQ0FBQyxHQUFHLENBQUE7QUFDbkUsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDLElBQUksR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUE7O0FBRXRFLE1BQ0UsQ0FBQyxhQUFhLEtBQUssQ0FBQyxJQUFLLGFBQWEsR0FBRyxDQUFDLElBQUksYUFBYSxHQUFHLEVBQUUsQUFBQyxJQUFLLGFBQWEsR0FBRyxDQUFDLElBQUksYUFBYSxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQzlHLGNBQWMsS0FBSyxDQUFDLElBQUssY0FBYyxHQUFHLENBQUMsSUFBSSxjQUFjLEdBQUcsRUFBRSxBQUFDLElBQUssY0FBYyxHQUFHLENBQUMsSUFBSSxjQUFjLEdBQUcsQ0FBQyxFQUFFLENBQUMsQUFBQyxFQUNySDtBQUNBLFdBQU8sTUFBTSxDQUFDLCtCQUErQixDQUFDLGNBQWMsQ0FBQyxDQUFBO0dBQzlEO0FBQ0QsU0FBTyxJQUFJLENBQUE7Q0FDWjs7QUFFTSxTQUFTLHNCQUFzQixDQUFDLEtBQWlCLEVBQUUsYUFBcUIsRUFBRSxjQUFxQixFQUFFLFlBQW9CLEVBQUUsYUFBcUIsRUFBVztBQUM1SixNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQy9FLE1BQU0scUJBQXFCLEdBQUcsYUFBYSxDQUFDLDhCQUE4QixDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQzFGLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxHQUFHLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFBO0FBQ25FLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxJQUFJLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFBO0FBQ3RFLE1BQUksYUFBYSxLQUFLLENBQUMsSUFBSSxjQUFjLEtBQUssQ0FBQyxFQUFFO0FBQy9DLFdBQU8sSUFBSSxDQUFBO0dBQ1o7QUFDRCxNQUFJLEFBQUMsYUFBYSxHQUFHLENBQUMsSUFBSSxhQUFhLEdBQUksYUFBYSxHQUFHLEVBQUUsQUFBQyxJQUFNLGFBQWEsR0FBRyxDQUFDLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQyxBQUFDLEVBQUU7QUFDNUcsV0FBTyxLQUFLLENBQUE7R0FDYjtBQUNELE1BQUksY0FBYyxHQUFHLEVBQUUsSUFBSSxhQUFhLEdBQUcsRUFBRSxFQUFFO0FBQzdDLFdBQU8sS0FBSyxDQUFBO0dBQ2I7QUFDRCxTQUFPLEFBQUMsY0FBYyxHQUFHLENBQUMsSUFBSSxjQUFjLEdBQUksWUFBWSxHQUFHLEVBQUUsQUFBQyxJQUFNLGNBQWMsR0FBRyxDQUFDLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQyxBQUFDLENBQUE7Q0FDbkg7O0FBRU0sU0FBUyxTQUFTLENBQUMsT0FBb0IsRUFBRSxRQUFnQixFQUFXO0FBQ3pFLEtBQUc7QUFDRCxRQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDN0IsYUFBTyxJQUFJLENBQUE7S0FDWjs7QUFFRCxXQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQTtHQUM3QixRQUFRLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBQztBQUNoRCxTQUFPLEtBQUssQ0FBQTtDQUNiIiwiZmlsZSI6Ii9Vc2Vycy90bGFuZGF1L2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci11aS1kZWZhdWx0L2xpYi9lZGl0b3IvaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCB0eXBlIHsgUG9pbnQsIFRleHRFZGl0b3IgfSBmcm9tICdhdG9tJ1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnVmZmVyUG9zaXRpb25Gcm9tTW91c2VFdmVudChldmVudDogTW91c2VFdmVudCwgZWRpdG9yOiBUZXh0RWRpdG9yLCBlZGl0b3JFbGVtZW50OiBPYmplY3QpOiA/UG9pbnQge1xuICBjb25zdCBwaXhlbFBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5jb21wb25lbnQucGl4ZWxQb3NpdGlvbkZvck1vdXNlRXZlbnQoZXZlbnQpXG4gIGNvbnN0IHNjcmVlblBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5jb21wb25lbnQuc2NyZWVuUG9zaXRpb25Gb3JQaXhlbFBvc2l0aW9uKHBpeGVsUG9zaXRpb24pXG4gIGNvbnN0IGV4cGVjdGVkUGl4ZWxQb3NpdGlvbiA9IGVkaXRvckVsZW1lbnQucGl4ZWxQb3NpdGlvbkZvclNjcmVlblBvc2l0aW9uKHNjcmVlblBvc2l0aW9uKVxuICBjb25zdCBkaWZmZXJlbmNlVG9wID0gcGl4ZWxQb3NpdGlvbi50b3AgLSBleHBlY3RlZFBpeGVsUG9zaXRpb24udG9wXG4gIGNvbnN0IGRpZmZlcmVuY2VMZWZ0ID0gcGl4ZWxQb3NpdGlvbi5sZWZ0IC0gZXhwZWN0ZWRQaXhlbFBvc2l0aW9uLmxlZnRcbiAgLy8gT25seSBhbGxvdyBvZmZzZXQgb2YgMjBweCAtIEZpeGVzIHN0ZWVsYnJhaW4vbGludGVyLXVpLWRlZmF1bHQjNjNcbiAgaWYgKFxuICAgIChkaWZmZXJlbmNlVG9wID09PSAwIHx8IChkaWZmZXJlbmNlVG9wID4gMCAmJiBkaWZmZXJlbmNlVG9wIDwgMjApIHx8IChkaWZmZXJlbmNlVG9wIDwgMCAmJiBkaWZmZXJlbmNlVG9wID4gLTIwKSkgJiZcbiAgICAoZGlmZmVyZW5jZUxlZnQgPT09IDAgfHwgKGRpZmZlcmVuY2VMZWZ0ID4gMCAmJiBkaWZmZXJlbmNlTGVmdCA8IDIwKSB8fCAoZGlmZmVyZW5jZUxlZnQgPCAwICYmIGRpZmZlcmVuY2VMZWZ0ID4gLTIwKSlcbiAgKSB7XG4gICAgcmV0dXJuIGVkaXRvci5idWZmZXJQb3NpdGlvbkZvclNjcmVlblBvc2l0aW9uKHNjcmVlblBvc2l0aW9uKVxuICB9XG4gIHJldHVybiBudWxsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3VzZUV2ZW50TmVhclBvc2l0aW9uKGV2ZW50OiBNb3VzZUV2ZW50LCBlZGl0b3JFbGVtZW50OiBPYmplY3QsIHNjcmVlblBvc2l0aW9uOiBQb2ludCwgZWxlbWVudFdpZHRoOiBudW1iZXIsIGVsZW1lbnRIZWlnaHQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICBjb25zdCBwaXhlbFBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5jb21wb25lbnQucGl4ZWxQb3NpdGlvbkZvck1vdXNlRXZlbnQoZXZlbnQpXG4gIGNvbnN0IGV4cGVjdGVkUGl4ZWxQb3NpdGlvbiA9IGVkaXRvckVsZW1lbnQucGl4ZWxQb3NpdGlvbkZvclNjcmVlblBvc2l0aW9uKHNjcmVlblBvc2l0aW9uKVxuICBjb25zdCBkaWZmZXJlbmNlVG9wID0gcGl4ZWxQb3NpdGlvbi50b3AgLSBleHBlY3RlZFBpeGVsUG9zaXRpb24udG9wXG4gIGNvbnN0IGRpZmZlcmVuY2VMZWZ0ID0gcGl4ZWxQb3NpdGlvbi5sZWZ0IC0gZXhwZWN0ZWRQaXhlbFBvc2l0aW9uLmxlZnRcbiAgaWYgKGRpZmZlcmVuY2VUb3AgPT09IDAgJiYgZGlmZmVyZW5jZUxlZnQgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmICgoZGlmZmVyZW5jZVRvcCA+IDAgJiYgZGlmZmVyZW5jZVRvcCA+IChlbGVtZW50SGVpZ2h0ICsgMjApKSB8fCAoZGlmZmVyZW5jZVRvcCA8IDAgJiYgZGlmZmVyZW5jZVRvcCA8IC01KSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChkaWZmZXJlbmNlTGVmdCA+IDE1ICYmIGRpZmZlcmVuY2VUb3AgPCAxNykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiAoZGlmZmVyZW5jZUxlZnQgPiAwICYmIGRpZmZlcmVuY2VMZWZ0IDwgKGVsZW1lbnRXaWR0aCArIDIwKSkgfHwgKGRpZmZlcmVuY2VMZWZ0IDwgMCAmJiBkaWZmZXJlbmNlTGVmdCA+IC01KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzUGFyZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzZWxlY3Rvcjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGRvIHtcbiAgICBpZiAoZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gJEZsb3dJZ25vcmU6IEl0J3MgcGFyZW50IGlzIGFuIEhUTUxFbGVtZW50LCBub3QgYSBOT0RFIVxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGVcbiAgfSB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVOYW1lICE9PSAnSFRNTCcpXG4gIHJldHVybiBmYWxzZVxufVxuIl19