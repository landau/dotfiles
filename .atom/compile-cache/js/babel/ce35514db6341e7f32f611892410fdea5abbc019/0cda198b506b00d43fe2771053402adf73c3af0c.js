Object.defineProperty(exports, '__esModule', {
  value: true
});

var _graphqlLanguageServiceInterface = require('graphql-language-service-interface');

'use babel';

var isInFunctionArgs = function isInFunctionArgs(query, cursor) {
  var line = query.split('\n')[cursor.line];
  var character = line.split('')[cursor.character - 1];
  return character === '(';
};

var isInsideQuery = function isInsideQuery(query, cursor) {
  var lines = query.split('\n');
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];
    var characters = line.split('');
    for (var j = 0; j < characters.length; j++) {
      var character = characters[j];
      if (character === '{') {
        if (i === cursor.line) {
          if (j >= cursor.character) {
            return false;
          }
        }
        return true;
      }
    }
  }
  return false;
};

var hasEndingParenthesis = function hasEndingParenthesis(query, cursor) {
  var line = query.split('\n')[cursor.line];
  var character = line.split('')[cursor.character];
  return character === ')';
};

var getAllParameters = function getAllParameters(schema, query) {
  var lines = query.split('\n');
  var hints = [];
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];
    var characters = line.split('');
    for (var j = 0; j < characters.length; j++) {
      var character = characters[j];
      if (character === '(') {
        var cursor = { line: i, character: j + 1 };
        for (var hint of (0, _graphqlLanguageServiceInterface.getAutocompleteSuggestions)(schema, query, cursor)) {
          if (query.includes('$' + hint.label)) {
            hints.push(hint);
          }
        }
      }
    }
  }
  return hints;
};

exports['default'] = function (hints, schema, query, cursor) {
  var isInside = isInsideQuery(query, cursor);
  var isInFunction = isInFunctionArgs(query, cursor);
  if (isInside && isInFunction) {
    var ending = hasEndingParenthesis(query, cursor) ? '' : ')';
    var text = hints.map(function (_ref) {
      var label = _ref.label;
      return label + ': $' + label;
    }).join(', ') + ending;
    return {
      label: text,
      detail: 'Arguments',
      documentation: 'Include all arguments of the field'
    };
  } else if (isInFunction) {
    var ending = hasEndingParenthesis(query, cursor) ? '' : ')';
    var allHints = getAllParameters(schema, query);
    var text = allHints.map(function (_ref2) {
      var label = _ref2.label;
      var detail = _ref2.detail;
      return '$' + label + ': ' + detail;
    }).join(', ') + ending;
    return {
      label: text,
      detail: 'Arguments',
      documentation: 'Include all arguments of the field'
    };
  }
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90bGFuZGF1L2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2dyYXBocWwtYXV0b2NvbXBsZXRlL2xpYi9TbmlwcGV0cy9nZXRDdXN0b21TbmlwcGV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7K0NBQ3lDLG9DQUFvQzs7QUFEN0UsV0FBVyxDQUFBOztBQUdYLElBQU0sZ0JBQWdCLEdBQUcsU0FBbkIsZ0JBQWdCLENBQVksS0FBSyxFQUFFLE1BQU0sRUFBRTtBQUMvQyxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUMzQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDdEQsU0FBTyxTQUFTLEtBQUssR0FBRyxDQUFBO0NBQ3pCLENBQUE7O0FBRUQsSUFBTSxhQUFhLEdBQUcsU0FBaEIsYUFBYSxDQUFZLEtBQUssRUFBRSxNQUFNLEVBQUU7QUFDNUMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUMvQixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNyQyxRQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDckIsUUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNqQyxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMxQyxVQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0IsVUFBSSxTQUFTLEtBQUssR0FB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LE1BQU0sR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQTtBQUM3RCxRQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDaEQsUUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEtBQWU7VUFBZCxLQUFLLEdBQU4sS0FBZSxDQUFkLEtBQUs7VUFBRSxNQUFNLEdBQWQsS0FBZSxDQUFQLE1BQU07bUJBQVUsS0FBSyxVQUFLLE1BQU07S0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQTtBQUMxRixXQUFPO0FBQ0wsV0FBSyxFQUFFLElBQUk7QUFDWCxZQUFNLEVBQUUsV0FBVztBQUNuQixtQkFBYSxFQUFFLG9DQUFvQztLQUNwRCxDQUFBO0dBQ0Y7Q0FDRiIsImZpbGUiOiIvVXNlcnMvdGxhbmRhdS9kb3RmaWxlcy8uYXRvbS9wYWNrYWdlcy9ncmFwaHFsLWF1dG9jb21wbGV0ZS9saWIvU25pcHBldHMvZ2V0Q3VzdG9tU25pcHBldC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5pbXBvcnQge2dldEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb25zfSBmcm9tICdncmFwaHFsLWxhbmd1YWdlLXNlcnZpY2UtaW50ZXJmYWNlJ1xuXG5jb25zdCBpc0luRnVuY3Rpb25BcmdzID0gZnVuY3Rpb24ocXVlcnksIGN1cnNvcikge1xuICBjb25zdCBsaW5lID0gcXVlcnkuc3BsaXQoJ1xcbicpW2N1cnNvci5saW5lXVxuICBjb25zdCBjaGFyYWN0ZXIgPSBsaW5lLnNwbGl0KCcnKVtjdXJzb3IuY2hhcmFjdGVyIC0gMV1cbiAgcmV0dXJuIGNoYXJhY3RlciA9PT0gJygnXG59XG5cbmNvbnN0IGlzSW5zaWRlUXVlcnkgPSBmdW5jdGlvbihxdWVyeSwgY3Vyc29yKSB7XG4gIGNvbnN0IGxpbmVzID0gcXVlcnkuc3BsaXQoJ1xcbicpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBsaW5lID0gbGluZXNbaV1cbiAgICBjb25zdCBjaGFyYWN0ZXJzID0gbGluZS5zcGxpdCgnJylcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoYXJhY3RlcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IGNoYXJhY3RlciA9IGNoYXJhY3RlcnNbal1cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09ICd7Jykge1xuICAgICAgICBpZiAoaSA9PT0gY3Vyc29yLmxpbmUpIHtcbiAgICAgICAgICBpZiAoaiA+PSBjdXJzb3IuY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmNvbnN0IGhhc0VuZGluZ1BhcmVudGhlc2lzID0gZnVuY3Rpb24ocXVlcnksIGN1cnNvcikge1xuICBjb25zdCBsaW5lID0gcXVlcnkuc3BsaXQoJ1xcbicpW2N1cnNvci5saW5lXVxuICBjb25zdCBjaGFyYWN0ZXIgPSBsaW5lLnNwbGl0KCcnKVtjdXJzb3IuY2hhcmFjdGVyXVxuICByZXR1cm4gY2hhcmFjdGVyID09PSAnKSdcbn1cblxuY29uc3QgZ2V0QWxsUGFyYW1ldGVycyA9IGZ1bmN0aW9uKHNjaGVtYSwgcXVlcnkpIHtcbiAgY29uc3QgbGluZXMgPSBxdWVyeS5zcGxpdCgnXFxuJylcbiAgY29uc3QgaGludHMgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbGluZSA9IGxpbmVzW2ldXG4gICAgY29uc3QgY2hhcmFjdGVycyA9IGxpbmUuc3BsaXQoJycpXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFyYWN0ZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb25zdCBjaGFyYWN0ZXIgPSBjaGFyYWN0ZXJzW2pdXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSAnKCcpIHtcbiAgICAgICAgY29uc3QgY3Vyc29yID0ge2xpbmU6IGksIGNoYXJhY3RlcjogaiArIDF9XG4gICAgICAgIGZvciAoY29uc3QgaGludCBvZiBnZXRBdXRvY29tcGxldGVTdWdnZXN0aW9ucyhzY2hlbWEsIHF1ZXJ5LCBjdXJzb3IpKSB7XG4gICAgICAgICAgaWYgKHF1ZXJ5LmluY2x1ZGVzKCckJyArIGhpbnQubGFiZWwpKSB7XG4gICAgICAgICAgICBoaW50cy5wdXNoKGhpbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBoaW50c1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihoaW50cywgc2NoZW1hLCBxdWVyeSwgY3Vyc29yKSB7XG4gIGNvbnN0IGlzSW5zaWRlID0gaXNJbnNpZGVRdWVyeShxdWVyeSwgY3Vyc29yKVxuICBjb25zdCBpc0luRnVuY3Rpb24gPSBpc0luRnVuY3Rpb25BcmdzKHF1ZXJ5LCBjdXJzb3IpXG4gIGlmIChpc0luc2lkZSAmJiBpc0luRnVuY3Rpb24pIHtcbiAgICBjb25zdCBlbmRpbmcgPSBoYXNFbmRpbmdQYXJlbnRoZXNpcyhxdWVyeSwgY3Vyc29yKSA/ICcnIDogJyknXG4gICAgY29uc3QgdGV4dCA9IGhpbnRzLm1hcCgoe2xhYmVsfSkgPT4gYCR7bGFiZWx9OiAkJHtsYWJlbH1gKS5qb2luKCcsICcpICsgZW5kaW5nXG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiB0ZXh0LFxuICAgICAgZGV0YWlsOiAnQXJndW1lbnRzJyxcbiAgICAgIGRvY3VtZW50YXRpb246ICdJbmNsdWRlIGFsbCBhcmd1bWVudHMgb2YgdGhlIGZpZWxkJ1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0luRnVuY3Rpb24pIHtcbiAgICBjb25zdCBlbmRpbmcgPSBoYXNFbmRpbmdQYXJlbnRoZXNpcyhxdWVyeSwgY3Vyc29yKSA/ICcnIDogJyknXG4gICAgY29uc3QgYWxsSGludHMgPSBnZXRBbGxQYXJhbWV0ZXJzKHNjaGVtYSwgcXVlcnkpXG4gICAgY29uc3QgdGV4dCA9IGFsbEhpbnRzLm1hcCgoe2xhYmVsLCBkZXRhaWx9KSA9PiBgJCR7bGFiZWx9OiAke2RldGFpbH1gKS5qb2luKCcsICcpICsgZW5kaW5nXG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiB0ZXh0LFxuICAgICAgZGV0YWlsOiAnQXJndW1lbnRzJyxcbiAgICAgIGRvY3VtZW50YXRpb246ICdJbmNsdWRlIGFsbCBhcmd1bWVudHMgb2YgdGhlIGZpZWxkJ1xuICAgIH1cbiAgfVxufVxuIl19