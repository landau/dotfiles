Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getChunks = getChunks;
exports.getChunksByProjects = getChunksByProjects;
exports.mergeChange = mergeChange;
exports.calculateDecorations = calculateDecorations;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helpers = require('../helpers');

function getChunks(filePath, projectPath) {
  var toReturn = [];
  var chunks = filePath.split(_path2['default'].sep);
  while (chunks.length) {
    var currentPath = chunks.join(_path2['default'].sep);
    toReturn.push(currentPath);
    if (currentPath === projectPath) {
      break;
    }
    chunks.pop();
  }
  return toReturn;
}

function getChunksByProjects(filePath, projectPaths) {
  if (projectPaths.length < 3) {
    if (filePath.indexOf(projectPaths[0]) === 0) {
      return getChunks(filePath, projectPaths[0]);
    }
    if (filePath.indexOf(projectPaths[1]) === 0) {
      return getChunks(filePath, projectPaths[1]);
    }
    if (filePath.indexOf(projectPaths[2]) === 0) {
      return getChunks(filePath, projectPaths[2]);
    }
    return [filePath];
  }
  for (var i = 0, _length = projectPaths.length; i < _length; i++) {
    var projectPath = projectPaths[i];
    if (filePath.indexOf(projectPath) === 0) {
      return getChunks(filePath, projectPath);
    }
  }
  return [filePath];
}

function mergeChange(change, filePath, severity) {
  if (!change[filePath]) {
    change[filePath] = {
      info: false,
      error: false,
      warning: false
    };
  }
  change[filePath][severity] = true;
}

function calculateDecorations(decorateOnTreeView, messages) {
  var toReturn = {};
  var projectPaths = atom.project.getPaths();
  messages.forEach(function (message) {
    var filePath = (0, _helpers.$file)(message);
    if (filePath) {
      var chunks = decorateOnTreeView === 'Files' ? [filePath] : getChunksByProjects(filePath, projectPaths);
      chunks.forEach(function (chunk) {
        return mergeChange(toReturn, chunk, message.severity);
      });
    }
  });
  return toReturn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90bGFuZGF1L2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci11aS1kZWZhdWx0L2xpYi90cmVlLXZpZXcvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O29CQUVpQixNQUFNOzs7O3VCQUNELFlBQVk7O0FBRzNCLFNBQVMsU0FBUyxDQUFDLFFBQWdCLEVBQUUsV0FBbUIsRUFBaUI7QUFDOUUsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO0FBQ25CLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsa0JBQUssR0FBRyxDQUFDLENBQUE7QUFDdkMsU0FBTyxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQ3BCLFFBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQUssR0FBRyxDQUFDLENBQUE7QUFDekMsWUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUMxQixRQUFJLFdBQVcsS0FBSyxXQUFXLEVBQUU7QUFDL0IsWUFBSztLQUNOO0FBQ0QsVUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFBO0dBQ2I7QUFDRCxTQUFPLFFBQVEsQ0FBQTtDQUNoQjs7QUFFTSxTQUFTLG1CQUFtQixDQUFDLFFBQWdCLEVBQUUsWUFBMkIsRUFBaUI7QUFDaEcsTUFBSSxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUMzQixRQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzNDLGFBQU8sU0FBUyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUM1QztBQUNELFFBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDM0MsYUFBTyxTQUFTLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQzVDO0FBQ0QsUUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMzQyxhQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDNUM7QUFDRCxXQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7R0FDbEI7QUFDRCxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsT0FBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzdELFFBQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNuQyxRQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3ZDLGFBQU8sU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQTtLQUN4QztHQUNGO0FBQ0QsU0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0NBQ2xCOztBQUVNLFNBQVMsV0FBVyxDQUFDLE1BQWMsRUFBRSxRQUFnQixFQUFFLFFBQWdCLEVBQVE7QUFDcEYsTUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUNyQixVQUFNLENBQUMsUUFBUSxDQUFDLEdBQUc7QUFDakIsVUFBSSxFQUFFLEtBQUs7QUFDWCxXQUFLLEVBQUUsS0FBSztBQUNaLGFBQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQTtHQUNGO0FBQ0QsUUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQTtDQUNsQzs7QUFFTSxTQUFTLG9CQUFvQixDQUFDLGtCQUFxRCxFQUFFLFFBQThCLEVBQVU7QUFDbEksTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO0FBQ25CLE1BQU0sWUFBMkIsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFBO0FBQzNELFVBQVEsQ0FBQyxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUU7QUFDakMsUUFBTSxRQUFRLEdBQUcsb0JBQU0sT0FBTyxDQUFDLENBQUE7QUFDL0IsUUFBSSxRQUFRLEVBQUU7QUFDWixVQUFNLE1BQU0sR0FBRyxrQkFBa0IsS0FBSyxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUE7QUFDeEcsWUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7ZUFBSSxXQUFXLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO09BQUEsQ0FBQyxDQUFBO0tBQ3hFO0dBQ0YsQ0FBQyxDQUFBO0FBQ0YsU0FBTyxRQUFRLENBQUE7Q0FDaEIiLCJmaWxlIjoiL1VzZXJzL3RsYW5kYXUvZG90ZmlsZXMvLmF0b20vcGFja2FnZXMvbGludGVyLXVpLWRlZmF1bHQvbGliL3RyZWUtdmlldy9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IFBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB7ICRmaWxlIH0gZnJvbSAnLi4vaGVscGVycydcbmltcG9ydCB0eXBlIHsgTGludGVyTWVzc2FnZSB9IGZyb20gJy4uL3R5cGVzJ1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2h1bmtzKGZpbGVQYXRoOiBzdHJpbmcsIHByb2plY3RQYXRoOiBzdHJpbmcpOiBBcnJheTxzdHJpbmc+IHtcbiAgY29uc3QgdG9SZXR1cm4gPSBbXVxuICBjb25zdCBjaHVua3MgPSBmaWxlUGF0aC5zcGxpdChQYXRoLnNlcClcbiAgd2hpbGUgKGNodW5rcy5sZW5ndGgpIHtcbiAgICBjb25zdCBjdXJyZW50UGF0aCA9IGNodW5rcy5qb2luKFBhdGguc2VwKVxuICAgIHRvUmV0dXJuLnB1c2goY3VycmVudFBhdGgpXG4gICAgaWYgKGN1cnJlbnRQYXRoID09PSBwcm9qZWN0UGF0aCkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgY2h1bmtzLnBvcCgpXG4gIH1cbiAgcmV0dXJuIHRvUmV0dXJuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaHVua3NCeVByb2plY3RzKGZpbGVQYXRoOiBzdHJpbmcsIHByb2plY3RQYXRoczogQXJyYXk8c3RyaW5nPik6IEFycmF5PHN0cmluZz4ge1xuICBpZiAocHJvamVjdFBhdGhzLmxlbmd0aCA8IDMpIHtcbiAgICBpZiAoZmlsZVBhdGguaW5kZXhPZihwcm9qZWN0UGF0aHNbMF0pID09PSAwKSB7XG4gICAgICByZXR1cm4gZ2V0Q2h1bmtzKGZpbGVQYXRoLCBwcm9qZWN0UGF0aHNbMF0pXG4gICAgfVxuICAgIGlmIChmaWxlUGF0aC5pbmRleE9mKHByb2plY3RQYXRoc1sxXSkgPT09IDApIHtcbiAgICAgIHJldHVybiBnZXRDaHVua3MoZmlsZVBhdGgsIHByb2plY3RQYXRoc1sxXSlcbiAgICB9XG4gICAgaWYgKGZpbGVQYXRoLmluZGV4T2YocHJvamVjdFBhdGhzWzJdKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGdldENodW5rcyhmaWxlUGF0aCwgcHJvamVjdFBhdGhzWzJdKVxuICAgIH1cbiAgICByZXR1cm4gW2ZpbGVQYXRoXVxuICB9XG4gIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBwcm9qZWN0UGF0aHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcm9qZWN0UGF0aCA9IHByb2plY3RQYXRoc1tpXVxuICAgIGlmIChmaWxlUGF0aC5pbmRleE9mKHByb2plY3RQYXRoKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGdldENodW5rcyhmaWxlUGF0aCwgcHJvamVjdFBhdGgpXG4gICAgfVxuICB9XG4gIHJldHVybiBbZmlsZVBhdGhdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoYW5nZShjaGFuZ2U6IE9iamVjdCwgZmlsZVBhdGg6IHN0cmluZywgc2V2ZXJpdHk6IHN0cmluZyk6IHZvaWQge1xuICBpZiAoIWNoYW5nZVtmaWxlUGF0aF0pIHtcbiAgICBjaGFuZ2VbZmlsZVBhdGhdID0ge1xuICAgICAgaW5mbzogZmFsc2UsXG4gICAgICBlcnJvcjogZmFsc2UsXG4gICAgICB3YXJuaW5nOiBmYWxzZSxcbiAgICB9XG4gIH1cbiAgY2hhbmdlW2ZpbGVQYXRoXVtzZXZlcml0eV0gPSB0cnVlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVEZWNvcmF0aW9ucyhkZWNvcmF0ZU9uVHJlZVZpZXc6ICdGaWxlcyBhbmQgRGlyZWN0b3JpZXMnIHwgJ0ZpbGVzJywgbWVzc2FnZXM6IEFycmF5PExpbnRlck1lc3NhZ2U+KTogT2JqZWN0IHtcbiAgY29uc3QgdG9SZXR1cm4gPSB7fVxuICBjb25zdCBwcm9qZWN0UGF0aHM6IEFycmF5PHN0cmluZz4gPSBhdG9tLnByb2plY3QuZ2V0UGF0aHMoKVxuICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICBjb25zdCBmaWxlUGF0aCA9ICRmaWxlKG1lc3NhZ2UpXG4gICAgaWYgKGZpbGVQYXRoKSB7XG4gICAgICBjb25zdCBjaHVua3MgPSBkZWNvcmF0ZU9uVHJlZVZpZXcgPT09ICdGaWxlcycgPyBbZmlsZVBhdGhdIDogZ2V0Q2h1bmtzQnlQcm9qZWN0cyhmaWxlUGF0aCwgcHJvamVjdFBhdGhzKVxuICAgICAgY2h1bmtzLmZvckVhY2goY2h1bmsgPT4gbWVyZ2VDaGFuZ2UodG9SZXR1cm4sIGNodW5rLCBtZXNzYWdlLnNldmVyaXR5KSlcbiAgICB9XG4gIH0pXG4gIHJldHVybiB0b1JldHVyblxufVxuIl19