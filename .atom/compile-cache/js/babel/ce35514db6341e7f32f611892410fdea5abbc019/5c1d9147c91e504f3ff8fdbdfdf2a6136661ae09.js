Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.mainMessageOfError = mainMessageOfError;
exports.mainLocOfError = mainLocOfError;
exports.mergedMessagesOfError = mergedMessagesOfError;
exports.prettyPrintError = prettyPrintError;

// Note: the following code is based on
// https://github.com/facebook/flow/blob/v0.47.0/tsrc/flowResult.js
// and adjusted to output nicely formatted markdown.

var _util = require('util');

var regexMarkdownChars = /[*#/()[\]<>_]/g;

function fileUrl(_ref) {
  var source = _ref.source;
  var start = _ref.start;

  // build a link that can be opened by the linter ui.
  // e.g. atom://linter?file=<path>&row=<number>&column=<number>
  var params = ['file=' + encodeURIComponent(source)];
  if (start.line > 0) {
    params.push('row=' + (start.line - 1));
    if (start.column > 0) {
      params.push('column=' + (start.column - 1));
    }
  }
  return 'atom://linter?' + params.join('&');
}
function linterLink(loc, text) {
  return '[' + text + '](' + fileUrl(loc) + ')';
}
function fileLink(loc) {
  return linterLink(loc, atom.project.relativize(loc.source));
}
function lineLink(loc) {
  return linterLink(loc, loc.start.line.toString());
}

function mainMessageOfError(error) {
  return error.operation || error.message[0];
}

function mainLocOfError(error) {
  return mainMessageOfError(error).loc;
}

function getExtraMessages(extra) {
  if (extra) {
    var messages = extra.reduce(function (acc, current) {
      var childrenMessages = getExtraMessages(current.children);
      return acc.concat(current.message, childrenMessages);
    }, []);
    messages.forEach(function (message) {
      var msg = message;
      msg.indent = (msg.indent || 0) + 2;
    });
    return messages;
  }
  return [];
}

function getTraceReasons(trace) {
  if (trace != null && trace.length > 0) {
    return [{ descr: 'Trace:', type: 'Blame' }].concat(trace);
  }
  return [];
}

function mkComment(descr) {
  return { descr: descr, type: 'Comment' };
}

function getOpReason(op) {
  if (op) {
    return [op, mkComment('Error:')];
  }
  return [];
}

function getHeader(mainLoc, kind, level) {
  var line = -1;
  var filename = '';
  if (mainLoc) {
    var source = mainLoc.source;
    var start = mainLoc.start;

    line = start.line;
    if (source) {
      filename = fileLink(mainLoc);
    }
  }
  if (!filename) {
    filename = (0, _util.format)('%s:%d', '[No file]', line);
  }

  var prefix = '';
  if (kind === 'internal' && level === 'error') {
    prefix = 'Internal error (see logs):\n';
  } else if (mainLoc && mainLoc.type === 'LibFile') {
    if (kind === 'parse' && level === 'error') {
      prefix = 'Library parse error:\n';
    } else if (kind === 'infer') {
      prefix = 'Library type error:\n';
    }
  }

  return [mkComment((0, _util.format)('%s%s', prefix, filename))];
}

function prettyPrintMessage(mainFile, _ref2) {
  var context = _ref2.context;
  var descr = _ref2.descr;
  var loc = _ref2.loc;
  var indent = _ref2.indent;

  var indentation = ' '.repeat(indent || 0);
  if (loc) {
    var startCol = loc.start.column - 1;
    var contextStr = indentation;
    if (context !== null && typeof context === 'string') {
      // On Windows this might have \r
      var ctx = context.trimRight();
      // Replace tabs with spaces
      ctx = ctx.replace(/\t/g, ' ');
      // escape certain chars that serve a purpose in markdown
      ctx = ctx.replace(regexMarkdownChars, '\\$&');

      var line = loc.start.line;

      var prefix = line < 100 ? ' '.repeat(3 - line.toString().length) : '';

      var padding = Array((prefix + line + ': ').length + 1).join(' ');
      if (ctx.length > startCol) {
        padding += ctx.substr(0, startCol).replace(/[^\t ]/g, ' ');
      }

      var underlineSize = line === loc.end.line ? Math.max(1, loc.end.column - startCol) : 1;
      var underline = '^'.repeat(underlineSize);

      contextStr = (0, _util.format)('%s%s%s: %s\n%s%s%s ', indentation, prefix, lineLink(loc), ctx, indentation, padding, underline);
    }
    var seeAnotherFile = loc.source === mainFile ? '' : (0, _util.format)('. See%s: %s', loc.type === 'LibFile' ? ' lib' : '', fileLink(loc));
    return (0, _util.format)('%s%s%s', contextStr, descr, seeAnotherFile);
  }
  return indentation + descr;
}

function mergedMessagesOfError(error) {
  var level = error.level;
  var kind = error.kind;
  var message = error.message;
  var operation = error.operation;
  var trace = error.trace;
  var extra = error.extra;

  var mainLoc = mainLocOfError(error);
  var messages = [].concat(getHeader(mainLoc, kind, level), getOpReason(operation), message, getExtraMessages(extra), getTraceReasons(trace));
  // Merge comments into blames
  return messages.reduce(function (acc, msg) {
    var descr = msg.descr;
    var loc = msg.loc;
    var type = msg.type;

    if (loc || acc.length === 0 || type === 'Blame') {
      acc.push(msg);
    } else if (descr !== 'Error:') {
      var prev = acc[acc.length - 1];
      prev.descr = prev.descr === '' ? descr : (0, _util.format)('%s. %s', prev.descr, descr);
    }
    return acc;
  }, []);
}

function prettyPrintError(error) {
  var mainLoc = mainLocOfError(error);
  var mainFile = mainLoc && mainLoc.source || '[No file]';
  var messages = mergedMessagesOfError(error);
  return '<div style="white-space: pre-wrap">' + messages.map(function (msg) {
    return prettyPrintMessage(mainFile, msg);
  }).join('\n') + '</div>';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,