function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _libIndieDelegate = require('../lib/indie-delegate');

var _libIndieDelegate2 = _interopRequireDefault(_libIndieDelegate);

var _common = require('./common');

describe('IndieDelegate', function () {
  var indieDelegate = undefined;
  var indieDelegateLegacy = undefined;

  beforeEach(function () {
    indieDelegate = new _libIndieDelegate2['default']({
      name: 'Indie'
    }, 2);
    indieDelegateLegacy = new _libIndieDelegate2['default']({
      name: 'Indie Legacy'
    }, 1);
  });
  afterEach(function () {
    indieDelegate.dispose();
    indieDelegateLegacy.dispose();
  });

  it('has the basic linter properties', function () {
    expect(typeof indieDelegate.name).toBe('string');
    expect(indieDelegate.name).toBe('Indie');
    expect(typeof indieDelegate.scope).toBe('string');
    expect(indieDelegate.scope).toBe('project');
  });
  describe('::setMessages && ::getMessages && ::clearMessages', function () {
    it('works as expected', function () {
      var message = (0, _common.getMessage)(false);
      expect(indieDelegate.getMessages()).toEqual([]);
      indieDelegate.setMessages(message.location.file, [message]);
      expect(indieDelegate.getMessages()).toEqual([message]);
      indieDelegate.clearMessages();
      expect(indieDelegate.getMessages()).toEqual([]);
    });
  });
  describe('::setMessages', function () {
    it('overwrites previous messages for that file', function () {
      var messageA = (0, _common.getMessage)(false);
      var messageB = (0, _common.getMessage)(false);
      var messageC = (0, _common.getMessage)(false);
      expect(indieDelegate.getMessages()).toEqual([]);
      indieDelegate.setMessages(messageA.location.file, [messageA, messageB]);
      expect(indieDelegate.getMessages()).toEqual([messageA, messageB]);
      indieDelegate.setMessages(messageA.location.file, [messageA, messageC]);
      expect(indieDelegate.getMessages()).toEqual([messageA, messageC]);
      indieDelegate.setMessages(messageA.location.file, [messageB, messageC]);
      expect(indieDelegate.getMessages()).toEqual([messageB, messageC]);
      indieDelegate.setMessages(messageA.location.file, [messageC]);
      expect(indieDelegate.getMessages()).toEqual([messageC]);
      indieDelegate.setMessages(messageA.location.file, []);
      expect(indieDelegate.getMessages()).toEqual([]);
    });
    it('does not update if is disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.dispose();
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(1);
    });
    it('does update if not disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(2);
    });
    it('cries if message has a different filePath', function () {
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      }).not.toThrow();
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename), (0, _common.getMessage)(__filename), (0, _common.getMessage)(__filename)]);
      }).not.toThrow();
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(false)]);
      }).toThrow('message.location.file does not match the given filePath');
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename), (0, _common.getMessage)(false)]);
      }).toThrow('message.location.file does not match the given filePath');
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename), (0, _common.getMessage)(false), (0, _common.getMessage)(__filename)]);
      }).toThrow('message.location.file does not match the given filePath');
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename), (0, _common.getMessage)(__filename), (0, _common.getMessage)(false)]);
      }).toThrow('message.location.file does not match the given filePath');
    });
    it('does not add invalid messages', function () {
      expect(indieDelegate.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(0);
      indieDelegate.setMessages(__filename, [{}]);
      expect(indieDelegate.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(1);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(indieDelegate.getMessages().length).toBe(1);
      expect(atom.notifications.getNotifications().length).toBe(1);
    });
  });
  describe('::clearMessages', function () {
    it('does not update if disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.dispose();
      indieDelegate.clearMessages();
      expect(timesUpdated).toBe(1);
    });
    it('does update if not disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.clearMessages();
      expect(timesUpdated).toBe(2);
    });
  });
  describe('::setAllMessages', function () {
    it('automatically splits messages into filePath groups', function () {
      var messageA = (0, _common.getMessage)(false);
      var messageB = (0, _common.getMessage)(false);
      var messageC = (0, _common.getMessage)(false);
      var messageD = (0, _common.getMessage)(false);

      messageC.location.file = __filename;
      messageD.location.file = __filename;
      expect(indieDelegate.messages.size).toBe(0);
      indieDelegate.setAllMessages([messageA, messageB, messageC, messageD]);
      expect(indieDelegate.messages.size).toBe(2);

      var messagesA = indieDelegate.messages.get(messageA.location.file);
      expect(Array.isArray(messagesA)).toBe(true);
      expect(messagesA).toEqual([messageA, messageB]);

      var messagesB = indieDelegate.messages.get(messageC.location.file);
      expect(Array.isArray(messagesB)).toBe(true);
      expect(messagesB).toEqual([messageC, messageD]);
    });
    it('does not update if disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setAllMessages([(0, _common.getMessage)(false)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.dispose();
      indieDelegate.setAllMessages([]);
      expect(timesUpdated).toBe(1);
    });
    it('does update if not disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setAllMessages([(0, _common.getMessage)(false)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.setAllMessages([]);
      expect(timesUpdated).toBe(2);
    });
    it('does not add invalid messages', function () {
      expect(indieDelegate.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(0);
      indieDelegate.setAllMessages([{}]);
      expect(indieDelegate.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(1);
      indieDelegate.setAllMessages([(0, _common.getMessage)(__filename)]);
      expect(indieDelegate.getMessages().length).toBe(1);
      expect(atom.notifications.getNotifications().length).toBe(1);
    });
  });
  describe('::dispose', function () {
    it('clears messages', function () {
      indieDelegate.setAllMessages([(0, _common.getMessage)(false)]);
      expect(indieDelegate.messages.size).toBe(1);
      indieDelegate.dispose();
      expect(indieDelegate.messages.size).toBe(0);
    });
    it('emits did-destroy event', function () {
      var didDestroy = false;
      indieDelegate.onDidDestroy(function () {
        didDestroy = true;
      });
      expect(didDestroy).toBe(false);
      indieDelegate.dispose();
      expect(didDestroy).toBe(true);
    });
  });
  describe('Legacy features', function () {
    it('has a deleteMessages() has throws on newer version', function () {
      expect(function () {
        indieDelegate.deleteMessages();
      }).toThrow('Call to depreciated method deleteMessages(). Use clearMessages() insead');
    });
    it('has a setMessages() that throws when called with old signature', function () {
      expect(function () {
        indieDelegate.setMessages([]);
      }).toThrow('Invalid Parameters to setMessages()');
    });
    it('sets and clears messages properly on legacy version', function () {
      indieDelegateLegacy.setMessages([(0, _common.getMessageLegacy)(false)]);
      expect(indieDelegateLegacy.getMessages().length).toBe(1);
      indieDelegateLegacy.deleteMessages();
      expect(indieDelegateLegacy.getMessages().length).toBe(0);
    });
    it('does not add invalid messages', function () {
      expect(indieDelegateLegacy.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(0);

      indieDelegateLegacy.setMessages([{}]);
      expect(indieDelegateLegacy.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(1);

      indieDelegateLegacy.setMessages([(0, _common.getMessageLegacy)(false)]);
      expect(indieDelegateLegacy.getMessages().length).toBe(1);
      expect(atom.notifications.getNotifications().length).toBe(1);
    });
  });
  describe('::onDidUpdate', function () {
    it('includes all of the messages', function () {
      var messagesA = [(0, _common.getMessage)('a'), (0, _common.getMessage)('a'), (0, _common.getMessage)('a'), (0, _common.getMessage)('a'), (0, _common.getMessage)('a')];
      var messagesB = [(0, _common.getMessage)('b'), (0, _common.getMessage)('b'), (0, _common.getMessage)('b'), (0, _common.getMessage)('b'), (0, _common.getMessage)('b')];
      var spyCallback = jasmine.createSpy('onDidUpdate');
      indieDelegate.onDidUpdate(spyCallback);
      indieDelegate.setMessages('a', messagesA);
      indieDelegate.setMessages('b', messagesB);
      indieDelegate.clearMessages();
      expect(spyCallback.calls.length).toBe(3);
      expect(spyCallback.calls[0].args[0]).toEqual(messagesA);
      expect(spyCallback.calls[1].args[0]).toEqual(messagesA.concat(messagesB));
      expect(spyCallback.calls[2].args[0]).toEqual([]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,