Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

'use babel';

var generateSnippets = function generateSnippets() {
  generateES5Snippet();
  generateES6Snippet();
};

var generateES5Snippet = function generateES5Snippet() {
  var templateFile = _path2['default'].resolve(__dirname, 'templates/snippets.cson.mst');
  var outputFile = _path2['default'].resolve(__dirname, '../snippets/snippets.cson');

  generateSnippet(templateFile, outputFile);
};

var generateES6Snippet = function generateES6Snippet() {
  var templateFile = _path2['default'].resolve(__dirname, 'templates/snippets-es6.cson.mst');
  var outputFile = _path2['default'].resolve(__dirname, '../snippets/snippets-es6.cson');

  generateSnippet(templateFile, outputFile);
};

var generateSnippet = function generateSnippet(templateFile, outputFile) {
  var templateData = _fs2['default'].readFileSync(templateFile, 'utf-8');
  var templateVariables = collectTemplateVariables();
  var output = _mustache2['default'].render(templateData, templateVariables);

  _fs2['default'].writeFile(outputFile, output);
};

var collectTemplateVariables = function collectTemplateVariables() {
  var variables = {};
  if (atom.config.get('atom-mocha-snippets.toggleDoubleQuotes')) {
    variables.quoteDelimiter = '\"';
  }
  if (!atom.config.get('atom-mocha-snippets.toggleDoubleQuotes')) {
    variables.quoteDelimiter = '\'';
  }
  if (atom.config.get('atom-mocha-snippets.toggleSemicolons')) {
    variables.expressionTerminator = ';';
  } else {
    variables.expressionTerminator = '';
  }

  return variables;
};

exports['default'] = generateSnippets;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90bGFuZGF1Ly5hdG9tL3BhY2thZ2VzL2F0b20tbW9jaGEtc25pcHBldHMvbGliL2dlbmVyYXRlLXNuaXBwZXRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozt3QkFFcUIsVUFBVTs7OztvQkFDZCxNQUFNOzs7O2tCQUNSLElBQUk7Ozs7QUFKbkIsV0FBVyxDQUFDOztBQU9aLElBQU0sZ0JBQWdCLEdBQUcsU0FBbkIsZ0JBQWdCLEdBQVM7QUFDN0Isb0JBQWtCLEVBQUUsQ0FBQztBQUNyQixvQkFBa0IsRUFBRSxDQUFDO0NBQ3RCLENBQUE7O0FBRUQsSUFBTSxrQkFBa0IsR0FBRyxTQUFyQixrQkFBa0IsR0FBUztBQUMvQixNQUFNLFlBQVksR0FBRyxrQkFBSyxPQUFPLENBQUMsU0FBUyxFQUFFLDZCQUE2QixDQUFDLENBQUM7QUFDNUUsTUFBTSxVQUFVLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDOztBQUV4RSxpQkFBZSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztDQUMzQyxDQUFBOztBQUVELElBQU0sa0JBQWtCLEdBQUcsU0FBckIsa0JBQWtCLEdBQVM7QUFDL0IsTUFBTSxZQUFZLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ2hGLE1BQU0sVUFBVSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUUsK0JBQStCLENBQUMsQ0FBQzs7QUFFNUUsaUJBQWUsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7Q0FDM0MsQ0FBQTs7QUFFRCxJQUFNLGVBQWUsR0FBRyxTQUFsQixlQUFlLENBQUksWUFBWSxFQUFFLFVBQVUsRUFBSztBQUNwRCxNQUFNLFlBQVksR0FBRyxnQkFBRyxZQUFZLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVELE1BQU0saUJBQWlCLEdBQUcsd0JBQXdCLEVBQUUsQ0FBQztBQUNyRCxNQUFNLE1BQU0sR0FBRyxzQkFBUyxNQUFNLENBQUMsWUFBWSxFQUFFLGlCQUFpQixDQUFDLENBQUM7O0FBRWhFLGtCQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDbEMsQ0FBQTs7QUFFRCxJQUFNLHdCQUF3QixHQUFHLFNBQTNCLHdCQUF3QixHQUFTO0FBQ3JDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNyQixNQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxDQUFDLEVBQUU7QUFDN0QsYUFBUyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7R0FDakM7QUFDRCxNQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLENBQUMsRUFBRTtBQUM5RCxhQUFTLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztHQUNqQztBQUNELE1BQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsRUFBRTtBQUMzRCxhQUFTLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0dBQ3RDLE1BQU07QUFDTCxhQUFTLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0dBQ3JDOztBQUVELFNBQU8sU0FBUyxDQUFDO0NBQ2xCLENBQUE7O3FCQUVjLGdCQUFnQiIsImZpbGUiOiIvVXNlcnMvdGxhbmRhdS8uYXRvbS9wYWNrYWdlcy9hdG9tLW1vY2hhLXNuaXBwZXRzL2xpYi9nZW5lcmF0ZS1zbmlwcGV0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgTXVzdGFjaGUgZnJvbSAnbXVzdGFjaGUnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuXG5cbmNvbnN0IGdlbmVyYXRlU25pcHBldHMgPSAoKSA9PiB7XG4gIGdlbmVyYXRlRVM1U25pcHBldCgpO1xuICBnZW5lcmF0ZUVTNlNuaXBwZXQoKTtcbn1cblxuY29uc3QgZ2VuZXJhdGVFUzVTbmlwcGV0ID0gKCkgPT4ge1xuICBjb25zdCB0ZW1wbGF0ZUZpbGUgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAndGVtcGxhdGVzL3NuaXBwZXRzLmNzb24ubXN0Jyk7XG4gIGNvbnN0IG91dHB1dEZpbGUgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vc25pcHBldHMvc25pcHBldHMuY3NvbicpO1xuXG4gIGdlbmVyYXRlU25pcHBldCh0ZW1wbGF0ZUZpbGUsIG91dHB1dEZpbGUpO1xufVxuXG5jb25zdCBnZW5lcmF0ZUVTNlNuaXBwZXQgPSAoKSA9PiB7XG4gIGNvbnN0IHRlbXBsYXRlRmlsZSA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICd0ZW1wbGF0ZXMvc25pcHBldHMtZXM2LmNzb24ubXN0Jyk7XG4gIGNvbnN0IG91dHB1dEZpbGUgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vc25pcHBldHMvc25pcHBldHMtZXM2LmNzb24nKTtcblxuICBnZW5lcmF0ZVNuaXBwZXQodGVtcGxhdGVGaWxlLCBvdXRwdXRGaWxlKTtcbn1cblxuY29uc3QgZ2VuZXJhdGVTbmlwcGV0ID0gKHRlbXBsYXRlRmlsZSwgb3V0cHV0RmlsZSkgPT4ge1xuICBjb25zdCB0ZW1wbGF0ZURhdGEgPSBmcy5yZWFkRmlsZVN5bmModGVtcGxhdGVGaWxlLCAndXRmLTgnKTtcbiAgY29uc3QgdGVtcGxhdGVWYXJpYWJsZXMgPSBjb2xsZWN0VGVtcGxhdGVWYXJpYWJsZXMoKTtcbiAgY29uc3Qgb3V0cHV0ID0gTXVzdGFjaGUucmVuZGVyKHRlbXBsYXRlRGF0YSwgdGVtcGxhdGVWYXJpYWJsZXMpO1xuXG4gIGZzLndyaXRlRmlsZShvdXRwdXRGaWxlLCBvdXRwdXQpO1xufVxuXG5jb25zdCBjb2xsZWN0VGVtcGxhdGVWYXJpYWJsZXMgPSAoKSA9PiB7XG4gIGNvbnN0IHZhcmlhYmxlcyA9IHt9O1xuICBpZiAoYXRvbS5jb25maWcuZ2V0KCdhdG9tLW1vY2hhLXNuaXBwZXRzLnRvZ2dsZURvdWJsZVF1b3RlcycpKSB7XG4gICAgdmFyaWFibGVzLnF1b3RlRGVsaW1pdGVyID0gJ1xcXCInO1xuICB9XG4gIGlmICghYXRvbS5jb25maWcuZ2V0KCdhdG9tLW1vY2hhLXNuaXBwZXRzLnRvZ2dsZURvdWJsZVF1b3RlcycpKSB7XG4gICAgdmFyaWFibGVzLnF1b3RlRGVsaW1pdGVyID0gJ1xcJyc7XG4gIH1cbiAgaWYgKGF0b20uY29uZmlnLmdldCgnYXRvbS1tb2NoYS1zbmlwcGV0cy50b2dnbGVTZW1pY29sb25zJykpIHtcbiAgICB2YXJpYWJsZXMuZXhwcmVzc2lvblRlcm1pbmF0b3IgPSAnOyc7XG4gIH0gZWxzZSB7XG4gICAgdmFyaWFibGVzLmV4cHJlc3Npb25UZXJtaW5hdG9yID0gJyc7XG4gIH1cblxuICByZXR1cm4gdmFyaWFibGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZVNuaXBwZXRzO1xuIl19