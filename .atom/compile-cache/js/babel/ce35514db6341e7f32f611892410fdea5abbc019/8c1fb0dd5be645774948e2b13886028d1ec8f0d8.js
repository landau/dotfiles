function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _main = require('./main');

var _main2 = _interopRequireDefault(_main);

var linterUiDefault = {
  instances: new Set(),
  signalRegistry: null,
  statusBarRegistry: null,
  activate: function activate() {
    if (atom.config.get('linter-ui-default.useBusySignal')) {
      // This is a necessary evil, see steelbrain/linter#1355
      atom.packages.getLoadedPackage('linter-ui-default').metadata['package-deps'].push('busy-signal');
    }

    if (!atom.inSpecMode()) {
      // eslint-disable-next-line global-require
      require('atom-package-deps').install('linter-ui-default', true);
    }
  },
  deactivate: function deactivate() {
    for (var entry of this.instances) {
      entry.dispose();
    }
    this.instances.clear();
  },
  provideUI: function provideUI() {
    var instance = new _main2['default']();
    this.instances.add(instance);
    if (this.signalRegistry) {
      instance.signal.attach(this.signalRegistry);
    }
    return instance;
  },
  provideIntentions: function provideIntentions() {
    return Array.from(this.instances).map(function (entry) {
      return entry.intentions;
    });
  },
  consumeSignal: function consumeSignal(signalRegistry) {
    this.signalRegistry = signalRegistry;
    this.instances.forEach(function (instance) {
      instance.signal.attach(signalRegistry);
    });
  },
  consumeStatusBar: function consumeStatusBar(statusBarRegistry) {
    this.statusBarRegistry = statusBarRegistry;
    this.instances.forEach(function (instance) {
      instance.statusBar.attach(statusBarRegistry);
    });
  }
};

module.exports = linterUiDefault;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90bGFuZGF1L2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci11aS1kZWZhdWx0L2xpYi9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztvQkFFcUIsUUFBUTs7OztBQUc3QixJQUFNLGVBQWUsR0FBRztBQUN0QixXQUFTLEVBQUUsSUFBSSxHQUFHLEVBQUU7QUFDcEIsZ0JBQWMsRUFBRSxJQUFJO0FBQ3BCLG1CQUFpQixFQUFFLElBQUk7QUFDdkIsVUFBUSxFQUFBLG9CQUFHO0FBQ1QsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQyxFQUFFOztBQUV0RCxVQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtLQUNqRzs7QUFFRCxRQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFOztBQUV0QixhQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUE7S0FDaEU7R0FDRjtBQUNELFlBQVUsRUFBQSxzQkFBRztBQUNYLFNBQUssSUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUNsQyxXQUFLLENBQUMsT0FBTyxFQUFFLENBQUE7S0FDaEI7QUFDRCxRQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFBO0dBQ3ZCO0FBQ0QsV0FBUyxFQUFBLHFCQUFhO0FBQ3BCLFFBQU0sUUFBUSxHQUFHLHVCQUFjLENBQUE7QUFDL0IsUUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDNUIsUUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO0FBQ3ZCLGNBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQTtLQUM1QztBQUNELFdBQU8sUUFBUSxDQUFBO0dBQ2hCO0FBQ0QsbUJBQWlCLEVBQUEsNkJBQXNCO0FBQ3JDLFdBQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsS0FBSzthQUFJLEtBQUssQ0FBQyxVQUFVO0tBQUEsQ0FBQyxDQUFBO0dBQ2pFO0FBQ0QsZUFBYSxFQUFBLHVCQUFDLGNBQXNCLEVBQUU7QUFDcEMsUUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUE7QUFDcEMsUUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBUyxRQUFRLEVBQUU7QUFDeEMsY0FBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUE7S0FDdkMsQ0FBQyxDQUFBO0dBQ0g7QUFDRCxrQkFBZ0IsRUFBQSwwQkFBQyxpQkFBeUIsRUFBRTtBQUMxQyxRQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUE7QUFDMUMsUUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBUyxRQUFRLEVBQUU7QUFDeEMsY0FBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtLQUM3QyxDQUFDLENBQUE7R0FDSDtDQUNGLENBQUE7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUEiLCJmaWxlIjoiL1VzZXJzL3RsYW5kYXUvZG90ZmlsZXMvLmF0b20vcGFja2FnZXMvbGludGVyLXVpLWRlZmF1bHQvbGliL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IExpbnRlclVJIGZyb20gJy4vbWFpbidcbmltcG9ydCB0eXBlIEludGVudGlvbnMgZnJvbSAnLi9pbnRlbnRpb25zJ1xuXG5jb25zdCBsaW50ZXJVaURlZmF1bHQgPSB7XG4gIGluc3RhbmNlczogbmV3IFNldCgpLFxuICBzaWduYWxSZWdpc3RyeTogbnVsbCxcbiAgc3RhdHVzQmFyUmVnaXN0cnk6IG51bGwsXG4gIGFjdGl2YXRlKCkge1xuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2xpbnRlci11aS1kZWZhdWx0LnVzZUJ1c3lTaWduYWwnKSkge1xuICAgICAgLy8gVGhpcyBpcyBhIG5lY2Vzc2FyeSBldmlsLCBzZWUgc3RlZWxicmFpbi9saW50ZXIjMTM1NVxuICAgICAgYXRvbS5wYWNrYWdlcy5nZXRMb2FkZWRQYWNrYWdlKCdsaW50ZXItdWktZGVmYXVsdCcpLm1ldGFkYXRhWydwYWNrYWdlLWRlcHMnXS5wdXNoKCdidXN5LXNpZ25hbCcpXG4gICAgfVxuXG4gICAgaWYgKCFhdG9tLmluU3BlY01vZGUoKSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGdsb2JhbC1yZXF1aXJlXG4gICAgICByZXF1aXJlKCdhdG9tLXBhY2thZ2UtZGVwcycpLmluc3RhbGwoJ2xpbnRlci11aS1kZWZhdWx0JywgdHJ1ZSlcbiAgICB9XG4gIH0sXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiB0aGlzLmluc3RhbmNlcykge1xuICAgICAgZW50cnkuZGlzcG9zZSgpXG4gICAgfVxuICAgIHRoaXMuaW5zdGFuY2VzLmNsZWFyKClcbiAgfSxcbiAgcHJvdmlkZVVJKCk6IExpbnRlclVJIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBMaW50ZXJVSSgpXG4gICAgdGhpcy5pbnN0YW5jZXMuYWRkKGluc3RhbmNlKVxuICAgIGlmICh0aGlzLnNpZ25hbFJlZ2lzdHJ5KSB7XG4gICAgICBpbnN0YW5jZS5zaWduYWwuYXR0YWNoKHRoaXMuc2lnbmFsUmVnaXN0cnkpXG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZVxuICB9LFxuICBwcm92aWRlSW50ZW50aW9ucygpOiBBcnJheTxJbnRlbnRpb25zPiB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5pbnN0YW5jZXMpLm1hcChlbnRyeSA9PiBlbnRyeS5pbnRlbnRpb25zKVxuICB9LFxuICBjb25zdW1lU2lnbmFsKHNpZ25hbFJlZ2lzdHJ5OiBPYmplY3QpIHtcbiAgICB0aGlzLnNpZ25hbFJlZ2lzdHJ5ID0gc2lnbmFsUmVnaXN0cnlcbiAgICB0aGlzLmluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5zaWduYWwuYXR0YWNoKHNpZ25hbFJlZ2lzdHJ5KVxuICAgIH0pXG4gIH0sXG4gIGNvbnN1bWVTdGF0dXNCYXIoc3RhdHVzQmFyUmVnaXN0cnk6IE9iamVjdCkge1xuICAgIHRoaXMuc3RhdHVzQmFyUmVnaXN0cnkgPSBzdGF0dXNCYXJSZWdpc3RyeVxuICAgIHRoaXMuaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlLnN0YXR1c0Jhci5hdHRhY2goc3RhdHVzQmFyUmVnaXN0cnkpXG4gICAgfSlcbiAgfSxcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaW50ZXJVaURlZmF1bHRcbiJdfQ==