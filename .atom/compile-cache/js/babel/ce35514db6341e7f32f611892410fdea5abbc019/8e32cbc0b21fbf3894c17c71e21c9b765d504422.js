function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _libProvidersHighlight = require('../lib/providers-highlight');

var _libProvidersHighlight2 = _interopRequireDefault(_libProvidersHighlight);

describe('ProvidersHighlight', function () {
  var providersHighlight = undefined;
  var editor = undefined;

  beforeEach(function () {
    if (providersHighlight) {
      providersHighlight.dispose();
    }
    providersHighlight = new _libProvidersHighlight2['default']();
    atom.workspace.destroyActivePane();
    waitsForPromise(function () {
      return atom.workspace.open(__filename).then(function () {
        editor = atom.workspace.getActiveTextEditor();
      });
    });
    atom.packages.activatePackage('language-javascript');
  });
  function addProvider(provider) {
    return providersHighlight.addProvider(provider);
  }
  function deleteProvider(provider) {
    providersHighlight.deleteProvider(provider);
  }

  describe('addProvider', function () {
    it('validates parameters properly', function () {
      expect(function () {
        addProvider();
      }).toThrow();
      expect(function () {
        addProvider(null);
      }).toThrow();
      expect(function () {
        addProvider(1);
      }).toThrow();
      expect(function () {
        addProvider(false);
      }).toThrow();
      expect(function () {
        addProvider(true);
      }).toThrow();

      expect(function () {
        addProvider({
          grammarScopes: false
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: null
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: true
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: 5
        });
      }).toThrow();

      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: false
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: null
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: true
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: 20
        });
      }).toThrow();
      addProvider({
        grammarScopes: [],
        getIntentions: function getIntentions() {}
      });
    });
  });
  describe('hasProvider', function () {
    it('works properly', function () {
      var provider = {
        grammarScopes: [],
        getIntentions: function getIntentions() {
          throw new Error();
        }
      };
      expect(providersHighlight.hasProvider(provider)).toBe(false);
      providersHighlight.addProvider(provider);
      expect(providersHighlight.hasProvider(provider)).toBe(true);
    });
  });
  describe('deleteProvider', function () {
    it('works properly', function () {
      deleteProvider(true);
      deleteProvider(null);
      deleteProvider(false);
      deleteProvider(50);
      var provider = {
        grammarScopes: [],
        getIntentions: function getIntentions() {
          throw new Error();
        }
      };
      expect(providersHighlight.hasProvider(provider)).toBe(false);
      providersHighlight.addProvider(provider);
      expect(providersHighlight.hasProvider(provider)).toBe(true);
      providersHighlight.deleteProvider(provider);
      expect(providersHighlight.hasProvider(provider)).toBe(false);
    });
  });
  describe('trigger', function () {
    it('works properly', function () {
      var intention = {
        range: [[0, 1], [1, Infinity]],
        'class': 'something',
        created: function created() {}
      };
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return [intention];
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function (results) {
          (0, _assert2['default'])(Array.isArray(results));
          expect(results[0]).toBe(intention);
        });
      });
    });
    it('ignores previous result from executed twice instantly', function () {
      var count = 0;
      var intentionFirst = {
        range: [[0, 1], [1, Infinity]],
        'class': 'something',
        created: function created() {}
      };
      var intentionSecond = {
        range: [[0, 1], [1, Infinity]],
        created: function created() {}
      };
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          if (++count === 1) {
            return [intentionFirst];
          }
          return [intentionSecond];
        }
      });
      var promiseFirst = providersHighlight.trigger(editor);
      var promiseSecond = providersHighlight.trigger(editor);

      waitsForPromise(function () {
        return promiseFirst.then(function (results) {
          expect(results).toEqual([]);
        });
      });
      waitsForPromise(function () {
        return promiseSecond.then(function (results) {
          (0, _assert2['default'])(Array.isArray(results));
          expect(results[0]).toBe(intentionSecond);
        });
      });
    });
    it('does not enable it if providers return no results, including non-array ones', function () {
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return [];
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return null;
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return false;
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return 50;
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {}
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function (results) {
          expect(results).toEqual([]);
        });
      });
    });
    it('emits an error if provider throws an error', function () {
      providersHighlight.addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          throw new Error('test from provider');
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function () {
          expect(false).toBe(true);
        }, function (e) {
          expect(e.message).toBe('test from provider');
        });
      });
    });
    it('validates suggestions properly', function () {
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return [{}];
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function () {
          expect(false).toBe(true);
        }, function (e) {
          expect(e instanceof Error).toBe(true);
        });
      });
    });
    it('triggers providers based on scope', function () {
      var coffeeCalled = false;
      var jsCalled = false;
      addProvider({
        grammarScopes: ['source.js'],
        getIntentions: function getIntentions() {
          jsCalled = true;
        }
      });
      addProvider({
        grammarScopes: ['source.coffee'],
        getIntentions: function getIntentions() {
          coffeeCalled = true;
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function () {
          expect(jsCalled).toBe(true);
          expect(coffeeCalled).toBe(false);
        });
      });
    });
  });

  it('automatically updates length of decoration everytime coordinates update', function () {
    var element = undefined;
    var jsCalled = false;
    var range = [[2, 0], [2, 5]];
    addProvider({
      grammarScopes: ['source.js'],
      getIntentions: function getIntentions() {
        jsCalled = true;
        return [{
          range: range,
          created: function created(_ref) {
            var _element = _ref.element;

            element = _element;
          }
        }];
      }
    });
    waitsForPromise(function () {
      return providersHighlight.trigger(editor).then(function (intentions) {
        (0, _assert2['default'])(Array.isArray(intentions));
        expect(jsCalled).toBe(true);
        expect(element).not.toBeDefined();
        providersHighlight.paint(editor, intentions);
        expect(element).toBeDefined();
        expect(element.textContent.length).toBe(5);
        editor.setTextInBufferRange(range, 'something');
        expect(element.textContent.length).toBe(9);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90bGFuZGF1Ly5hdG9tL3BhY2thZ2VzL2ludGVudGlvbnMvc3BlYy9wcm92aWRlcnMtaGlnaGxpZ2h0LXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7c0JBRXNCLFFBQVE7Ozs7cUNBQ0MsNEJBQTRCOzs7O0FBRTNELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxZQUFXO0FBQ3hDLE1BQUksa0JBQWtCLFlBQUEsQ0FBQTtBQUN0QixNQUFJLE1BQU0sWUFBQSxDQUFBOztBQUVWLFlBQVUsQ0FBQyxZQUFXO0FBQ3BCLFFBQUksa0JBQWtCLEVBQUU7QUFDdEIsd0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUE7S0FDN0I7QUFDRCxzQkFBa0IsR0FBRyx3Q0FBd0IsQ0FBQTtBQUM3QyxRQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUE7QUFDbEMsbUJBQWUsQ0FBQyxZQUFXO0FBQ3pCLGFBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVc7QUFDckQsY0FBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQTtPQUM5QyxDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7QUFDRixRQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0dBQ3JELENBQUMsQ0FBQTtBQUNGLFdBQVMsV0FBVyxDQUFDLFFBQWEsRUFBRTtBQUNsQyxXQUFPLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtHQUNoRDtBQUNELFdBQVMsY0FBYyxDQUFDLFFBQWEsRUFBRTtBQUNyQyxzQkFBa0IsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUE7R0FDNUM7O0FBRUQsVUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFXO0FBQ2pDLE1BQUUsQ0FBQywrQkFBK0IsRUFBRSxZQUFXO0FBQzdDLFlBQU0sQ0FBQyxZQUFXO0FBQ2hCLG1C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Q0FBQTtBQUM3QixjQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDMUMsY0FBTSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQTtBQUMvQyxjQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FDM0MsQ0FBQyxDQUFBO0tBQ0gsQ0FBQyxDQUFBO0dBQ0gsQ0FBQyxDQUFBO0NBQ0gsQ0FBQyxDQUFBIiwiZmlsZSI6Ii9Vc2Vycy90bGFuZGF1Ly5hdG9tL3BhY2thZ2VzL2ludGVudGlvbnMvc3BlYy9wcm92aWRlcnMtaGlnaGxpZ2h0LXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2Fzc2VydCdcbmltcG9ydCBQcm92aWRlcnNIaWdobGlnaHQgZnJvbSAnLi4vbGliL3Byb3ZpZGVycy1oaWdobGlnaHQnXG5cbmRlc2NyaWJlKCdQcm92aWRlcnNIaWdobGlnaHQnLCBmdW5jdGlvbigpIHtcbiAgbGV0IHByb3ZpZGVyc0hpZ2hsaWdodFxuICBsZXQgZWRpdG9yXG5cbiAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICBpZiAocHJvdmlkZXJzSGlnaGxpZ2h0KSB7XG4gICAgICBwcm92aWRlcnNIaWdobGlnaHQuZGlzcG9zZSgpXG4gICAgfVxuICAgIHByb3ZpZGVyc0hpZ2hsaWdodCA9IG5ldyBQcm92aWRlcnNIaWdobGlnaHQoKVxuICAgIGF0b20ud29ya3NwYWNlLmRlc3Ryb3lBY3RpdmVQYW5lKClcbiAgICB3YWl0c0ZvclByb21pc2UoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2Uub3BlbihfX2ZpbGVuYW1lKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClcbiAgICAgIH0pXG4gICAgfSlcbiAgICBhdG9tLnBhY2thZ2VzLmFjdGl2YXRlUGFja2FnZSgnbGFuZ3VhZ2UtamF2YXNjcmlwdCcpXG4gIH0pXG4gIGZ1bmN0aW9uIGFkZFByb3ZpZGVyKHByb3ZpZGVyOiBhbnkpIHtcbiAgICByZXR1cm4gcHJvdmlkZXJzSGlnaGxpZ2h0LmFkZFByb3ZpZGVyKHByb3ZpZGVyKVxuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZVByb3ZpZGVyKHByb3ZpZGVyOiBhbnkpIHtcbiAgICBwcm92aWRlcnNIaWdobGlnaHQuZGVsZXRlUHJvdmlkZXIocHJvdmlkZXIpXG4gIH1cblxuICBkZXNjcmliZSgnYWRkUHJvdmlkZXInLCBmdW5jdGlvbigpIHtcbiAgICBpdCgndmFsaWRhdGVzIHBhcmFtZXRlcnMgcHJvcGVybHknLCBmdW5jdGlvbigpIHtcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIoKVxuICAgICAgfSkudG9UaHJvdygpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZFByb3ZpZGVyKG51bGwpXG4gICAgICB9KS50b1Rocm93KClcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIoMSlcbiAgICAgIH0pLnRvVGhyb3coKVxuICAgICAgZXhwZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICBhZGRQcm92aWRlcihmYWxzZSlcbiAgICAgIH0pLnRvVGhyb3coKVxuICAgICAgZXhwZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICBhZGRQcm92aWRlcih0cnVlKVxuICAgICAgfSkudG9UaHJvdygpXG5cbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICAgIGdyYW1tYXJTY29wZXM6IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgfSkudG9UaHJvdygpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgICBncmFtbWFyU2NvcGVzOiBudWxsLFxuICAgICAgICB9KVxuICAgICAgfSkudG9UaHJvdygpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgICBncmFtbWFyU2NvcGVzOiB0cnVlLFxuICAgICAgICB9KVxuICAgICAgfSkudG9UaHJvdygpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgICBncmFtbWFyU2NvcGVzOiA1LFxuICAgICAgICB9KVxuICAgICAgfSkudG9UaHJvdygpXG5cbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICAgIGdyYW1tYXJTY29wZXM6IFtdLFxuICAgICAgICAgIGdldEludGVudGlvbnM6IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgfSkudG9UaHJvdygpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgICBncmFtbWFyU2NvcGVzOiBbXSxcbiAgICAgICAgICBnZXRJbnRlbnRpb25zOiBudWxsLFxuICAgICAgICB9KVxuICAgICAgfSkudG9UaHJvdygpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgICBncmFtbWFyU2NvcGVzOiBbXSxcbiAgICAgICAgICBnZXRJbnRlbnRpb25zOiB0cnVlLFxuICAgICAgICB9KVxuICAgICAgfSkudG9UaHJvdygpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgICBncmFtbWFyU2NvcGVzOiBbXSxcbiAgICAgICAgICBnZXRJbnRlbnRpb25zOiAyMCxcbiAgICAgICAgfSlcbiAgICAgIH0pLnRvVGhyb3coKVxuICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICBncmFtbWFyU2NvcGVzOiBbXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHt9LFxuICAgICAgfSlcbiAgICB9KVxuICB9KVxuICBkZXNjcmliZSgnaGFzUHJvdmlkZXInLCBmdW5jdGlvbigpIHtcbiAgICBpdCgnd29ya3MgcHJvcGVybHknLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IHByb3ZpZGVyID0ge1xuICAgICAgICBncmFtbWFyU2NvcGVzOiBbXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKVxuICAgICAgICB9LFxuICAgICAgfVxuICAgICAgZXhwZWN0KHByb3ZpZGVyc0hpZ2hsaWdodC5oYXNQcm92aWRlcihwcm92aWRlcikpLnRvQmUoZmFsc2UpXG4gICAgICBwcm92aWRlcnNIaWdobGlnaHQuYWRkUHJvdmlkZXIocHJvdmlkZXIpXG4gICAgICBleHBlY3QocHJvdmlkZXJzSGlnaGxpZ2h0Lmhhc1Byb3ZpZGVyKHByb3ZpZGVyKSkudG9CZSh0cnVlKVxuICAgIH0pXG4gIH0pXG4gIGRlc2NyaWJlKCdkZWxldGVQcm92aWRlcicsIGZ1bmN0aW9uKCkge1xuICAgIGl0KCd3b3JrcyBwcm9wZXJseScsIGZ1bmN0aW9uKCkge1xuICAgICAgZGVsZXRlUHJvdmlkZXIodHJ1ZSlcbiAgICAgIGRlbGV0ZVByb3ZpZGVyKG51bGwpXG4gICAgICBkZWxldGVQcm92aWRlcihmYWxzZSlcbiAgICAgIGRlbGV0ZVByb3ZpZGVyKDUwKVxuICAgICAgY29uc3QgcHJvdmlkZXIgPSB7XG4gICAgICAgIGdyYW1tYXJTY29wZXM6IFtdLFxuICAgICAgICBnZXRJbnRlbnRpb25zKCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgICBleHBlY3QocHJvdmlkZXJzSGlnaGxpZ2h0Lmhhc1Byb3ZpZGVyKHByb3ZpZGVyKSkudG9CZShmYWxzZSlcbiAgICAgIHByb3ZpZGVyc0hpZ2hsaWdodC5hZGRQcm92aWRlcihwcm92aWRlcilcbiAgICAgIGV4cGVjdChwcm92aWRlcnNIaWdobGlnaHQuaGFzUHJvdmlkZXIocHJvdmlkZXIpKS50b0JlKHRydWUpXG4gICAgICBwcm92aWRlcnNIaWdobGlnaHQuZGVsZXRlUHJvdmlkZXIocHJvdmlkZXIpXG4gICAgICBleHBlY3QocHJvdmlkZXJzSGlnaGxpZ2h0Lmhhc1Byb3ZpZGVyKHByb3ZpZGVyKSkudG9CZShmYWxzZSlcbiAgICB9KVxuICB9KVxuICBkZXNjcmliZSgndHJpZ2dlcicsIGZ1bmN0aW9uKCkge1xuICAgIGl0KCd3b3JrcyBwcm9wZXJseScsIGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgaW50ZW50aW9uID0ge1xuICAgICAgICByYW5nZTogW1swLCAxXSwgWzEsIEluZmluaXR5XV0sXG4gICAgICAgIGNsYXNzOiAnc29tZXRoaW5nJyxcbiAgICAgICAgY3JlYXRlZCgpIHt9LFxuICAgICAgfVxuICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICBncmFtbWFyU2NvcGVzOiBbJyonXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHtcbiAgICAgICAgICByZXR1cm4gW2ludGVudGlvbl1cbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgICB3YWl0c0ZvclByb21pc2UoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlcnNIaWdobGlnaHQudHJpZ2dlcihlZGl0b3IpLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykge1xuICAgICAgICAgIGludmFyaWFudChBcnJheS5pc0FycmF5KHJlc3VsdHMpKVxuICAgICAgICAgIGV4cGVjdChyZXN1bHRzWzBdKS50b0JlKGludGVudGlvbilcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgICBpdCgnaWdub3JlcyBwcmV2aW91cyByZXN1bHQgZnJvbSBleGVjdXRlZCB0d2ljZSBpbnN0YW50bHknLCBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBjb3VudCA9IDBcbiAgICAgIGNvbnN0IGludGVudGlvbkZpcnN0ID0ge1xuICAgICAgICByYW5nZTogW1swLCAxXSwgWzEsIEluZmluaXR5XV0sXG4gICAgICAgIGNsYXNzOiAnc29tZXRoaW5nJyxcbiAgICAgICAgY3JlYXRlZCgpIHt9LFxuICAgICAgfVxuICAgICAgY29uc3QgaW50ZW50aW9uU2Vjb25kID0ge1xuICAgICAgICByYW5nZTogW1swLCAxXSwgWzEsIEluZmluaXR5XV0sXG4gICAgICAgIGNyZWF0ZWQoKSB7fSxcbiAgICAgIH1cbiAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgZ3JhbW1hclNjb3BlczogWycqJ10sXG4gICAgICAgIGdldEludGVudGlvbnMoKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBbaW50ZW50aW9uRmlyc3RdXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbaW50ZW50aW9uU2Vjb25kXVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIGNvbnN0IHByb21pc2VGaXJzdCA9IHByb3ZpZGVyc0hpZ2hsaWdodC50cmlnZ2VyKGVkaXRvcilcbiAgICAgIGNvbnN0IHByb21pc2VTZWNvbmQgPSBwcm92aWRlcnNIaWdobGlnaHQudHJpZ2dlcihlZGl0b3IpXG5cbiAgICAgIHdhaXRzRm9yUHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VGaXJzdC50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpIHtcbiAgICAgICAgICBleHBlY3QocmVzdWx0cykudG9FcXVhbChbXSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICB3YWl0c0ZvclByb21pc2UoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlU2Vjb25kLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykge1xuICAgICAgICAgIGludmFyaWFudChBcnJheS5pc0FycmF5KHJlc3VsdHMpKVxuICAgICAgICAgIGV4cGVjdChyZXN1bHRzWzBdKS50b0JlKGludGVudGlvblNlY29uZClcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgICBpdCgnZG9lcyBub3QgZW5hYmxlIGl0IGlmIHByb3ZpZGVycyByZXR1cm4gbm8gcmVzdWx0cywgaW5jbHVkaW5nIG5vbi1hcnJheSBvbmVzJywgZnVuY3Rpb24oKSB7XG4gICAgICBhZGRQcm92aWRlcih7XG4gICAgICAgIGdyYW1tYXJTY29wZXM6IFsnKiddLFxuICAgICAgICBnZXRJbnRlbnRpb25zKCkge1xuICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgZ3JhbW1hclNjb3BlczogWycqJ10sXG4gICAgICAgIGdldEludGVudGlvbnMoKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgICBhZGRQcm92aWRlcih7XG4gICAgICAgIGdyYW1tYXJTY29wZXM6IFsnKiddLFxuICAgICAgICBnZXRJbnRlbnRpb25zKCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgZ3JhbW1hclNjb3BlczogWycqJ10sXG4gICAgICAgIGdldEludGVudGlvbnMoKSB7XG4gICAgICAgICAgcmV0dXJuIDUwXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICBncmFtbWFyU2NvcGVzOiBbJyonXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHtcblxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIHdhaXRzRm9yUHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyc0hpZ2hsaWdodC50cmlnZ2VyKGVkaXRvcikudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XG4gICAgICAgICAgZXhwZWN0KHJlc3VsdHMpLnRvRXF1YWwoW10pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gICAgaXQoJ2VtaXRzIGFuIGVycm9yIGlmIHByb3ZpZGVyIHRocm93cyBhbiBlcnJvcicsIGZ1bmN0aW9uKCkge1xuICAgICAgcHJvdmlkZXJzSGlnaGxpZ2h0LmFkZFByb3ZpZGVyKHtcbiAgICAgICAgZ3JhbW1hclNjb3BlczogWycqJ10sXG4gICAgICAgIGdldEludGVudGlvbnMoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0ZXN0IGZyb20gcHJvdmlkZXInKVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIHdhaXRzRm9yUHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyc0hpZ2hsaWdodC50cmlnZ2VyKGVkaXRvcikudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZmFsc2UpLnRvQmUodHJ1ZSlcbiAgICAgICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGV4cGVjdChlLm1lc3NhZ2UpLnRvQmUoJ3Rlc3QgZnJvbSBwcm92aWRlcicpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gICAgaXQoJ3ZhbGlkYXRlcyBzdWdnZXN0aW9ucyBwcm9wZXJseScsIGZ1bmN0aW9uKCkge1xuICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICBncmFtbWFyU2NvcGVzOiBbJyonXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHtcbiAgICAgICAgICByZXR1cm4gW3t9XVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIHdhaXRzRm9yUHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyc0hpZ2hsaWdodC50cmlnZ2VyKGVkaXRvcikudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZmFsc2UpLnRvQmUodHJ1ZSlcbiAgICAgICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGV4cGVjdChlIGluc3RhbmNlb2YgRXJyb3IpLnRvQmUodHJ1ZSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgICBpdCgndHJpZ2dlcnMgcHJvdmlkZXJzIGJhc2VkIG9uIHNjb3BlJywgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgY29mZmVlQ2FsbGVkID0gZmFsc2VcbiAgICAgIGxldCBqc0NhbGxlZCA9IGZhbHNlXG4gICAgICBhZGRQcm92aWRlcih7XG4gICAgICAgIGdyYW1tYXJTY29wZXM6IFsnc291cmNlLmpzJ10sXG4gICAgICAgIGdldEludGVudGlvbnMoKSB7XG4gICAgICAgICAganNDYWxsZWQgPSB0cnVlXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICBncmFtbWFyU2NvcGVzOiBbJ3NvdXJjZS5jb2ZmZWUnXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHtcbiAgICAgICAgICBjb2ZmZWVDYWxsZWQgPSB0cnVlXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgd2FpdHNGb3JQcm9taXNlKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXJzSGlnaGxpZ2h0LnRyaWdnZXIoZWRpdG9yKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChqc0NhbGxlZCkudG9CZSh0cnVlKVxuICAgICAgICAgIGV4cGVjdChjb2ZmZWVDYWxsZWQpLnRvQmUoZmFsc2UpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ2F1dG9tYXRpY2FsbHkgdXBkYXRlcyBsZW5ndGggb2YgZGVjb3JhdGlvbiBldmVyeXRpbWUgY29vcmRpbmF0ZXMgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgbGV0IGVsZW1lbnRcbiAgICBsZXQganNDYWxsZWQgPSBmYWxzZVxuICAgIGNvbnN0IHJhbmdlID0gW1syLCAwXSwgWzIsIDVdXVxuICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgIGdyYW1tYXJTY29wZXM6IFsnc291cmNlLmpzJ10sXG4gICAgICBnZXRJbnRlbnRpb25zKCkge1xuICAgICAgICBqc0NhbGxlZCA9IHRydWVcbiAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgcmFuZ2UsXG4gICAgICAgICAgY3JlYXRlZCh7IGVsZW1lbnQ6IF9lbGVtZW50IH0pIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBfZWxlbWVudFxuICAgICAgICAgIH0sXG4gICAgICAgIH1dXG4gICAgICB9LFxuICAgIH0pXG4gICAgd2FpdHNGb3JQcm9taXNlKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHByb3ZpZGVyc0hpZ2hsaWdodC50cmlnZ2VyKGVkaXRvcikudGhlbihmdW5jdGlvbihpbnRlbnRpb25zKSB7XG4gICAgICAgIGludmFyaWFudChBcnJheS5pc0FycmF5KGludGVudGlvbnMpKVxuICAgICAgICBleHBlY3QoanNDYWxsZWQpLnRvQmUodHJ1ZSlcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQpLm5vdC50b0JlRGVmaW5lZCgpXG4gICAgICAgIHByb3ZpZGVyc0hpZ2hsaWdodC5wYWludChlZGl0b3IsIGludGVudGlvbnMpXG4gICAgICAgIGV4cGVjdChlbGVtZW50KS50b0JlRGVmaW5lZCgpXG4gICAgICAgIGV4cGVjdChlbGVtZW50LnRleHRDb250ZW50Lmxlbmd0aCkudG9CZSg1KVxuICAgICAgICBlZGl0b3Iuc2V0VGV4dEluQnVmZmVyUmFuZ2UocmFuZ2UsICdzb21ldGhpbmcnKVxuICAgICAgICBleHBlY3QoZWxlbWVudC50ZXh0Q29udGVudC5sZW5ndGgpLnRvQmUoOSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn0pXG4iXX0=