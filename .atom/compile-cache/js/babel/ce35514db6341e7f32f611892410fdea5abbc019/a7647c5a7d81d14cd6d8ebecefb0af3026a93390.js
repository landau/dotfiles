'use babel';

describe('Atom Clock', function () {

  var AtomClock = undefined;
  var workspaceElement = undefined;

  beforeEach(function () {
    workspaceElement = atom.views.getView(atom.workspace);
    jasmine.attachToDOM(workspaceElement);

    var statusBar = undefined;

    waitsForPromise(function () {
      return atom.packages.activatePackage('status-bar').then(function (pack) {
        statusBar = workspaceElement.querySelector('status-bar');
      });
    });

    waitsForPromise(function () {
      return atom.packages.activatePackage('atom-clock').then(function (clk) {
        AtomClock = clk.mainModule;
        AtomClock.consumeStatusBar(statusBar);
      });
    });

    waitsForPromise(function () {
      return atom.workspace.open();
    });
  });

  it('should properly load the package', function () {
    expect(AtomClock.atomClockView.element).toBeDefined();

    expect(AtomClock.config.dateFormat['default']).toBe('H:mm');
    expect(AtomClock.config.showTooltip['default']).toBe(false);
    expect(AtomClock.config.tooltipDateFormat['default']).toBe('LLLL');
    expect(AtomClock.config.locale['default']).toBe('en');
    expect(AtomClock.config.refreshInterval['default']).toBe(60);
    expect(AtomClock.config.showClockIcon['default']).toBe(false);
  });

  it('should refresh the ticker when the date format is changed', function () {
    spyOn(AtomClock.atomClockView, 'refreshTicker');

    atom.config.set('atom-clock.dateFormat', 'H');
    expect(AtomClock.atomClockView.refreshTicker).toHaveBeenCalled();
  });

  it('should refresh the ticker when the tooltip date format is changed', function () {
    spyOn(AtomClock.atomClockView, 'refreshTicker');

    atom.config.set('atom-clock.tooltipDateFormat', 'H');
    expect(AtomClock.atomClockView.refreshTicker).toHaveBeenCalled();
  });

  it('should refresh the ticker when the interval is changed', function () {
    spyOn(AtomClock.atomClockView, 'refreshTicker');

    atom.config.set('atom-clock.refreshInterval', '20');
    expect(AtomClock.atomClockView.refreshTicker).toHaveBeenCalled();
  });

  it('should set the configuration values when the tooltip is enabled', function () {
    spyOn(AtomClock.atomClockView, 'setConfigValues');

    atom.config.set('atom-clock.showTooltip', true);
    expect(AtomClock.atomClockView.setConfigValues).toHaveBeenCalled();
  });

  it('should set the configuration values when clock icon is requested', function () {
    spyOn(AtomClock.atomClockView, 'setConfigValues');

    atom.config.set('atom-clock.showClockIcon', true);
    expect(AtomClock.atomClockView.setConfigValues).toHaveBeenCalled();
  });

  it('should clear the ticker and restart it when refresh is called', function () {
    spyOn(AtomClock.atomClockView, 'clearTicker');
    spyOn(AtomClock.atomClockView, 'startTicker');

    atom.config.set('atom-clock.refreshInterval', '20');
    expect(AtomClock.atomClockView.clearTicker).toHaveBeenCalled();
    expect(AtomClock.atomClockView.startTicker).toHaveBeenCalled();
  });

  it('should hide the clock when toggled', function () {
    atom.commands.dispatch(document.querySelector('atom-workspace'), 'atom-clock:toggle');
    expect(AtomClock.atomClockView.element.style.display).toBe('none');

    atom.commands.dispatch(document.querySelector('atom-workspace'), 'atom-clock:toggle');
    expect(AtomClock.atomClockView.element.style.display).toBe('');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,