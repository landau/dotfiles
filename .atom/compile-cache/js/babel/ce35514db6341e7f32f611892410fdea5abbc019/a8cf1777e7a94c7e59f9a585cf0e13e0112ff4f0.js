function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _libElement = require('../lib/element');

var _libElement2 = _interopRequireDefault(_libElement);

describe('Element', function () {
  var element = undefined;

  beforeEach(function () {
    element = new _libElement2['default']();
    spyOn(element, 'setTooltip').andCallThrough();
    spyOn(element, 'setBusy').andCallThrough();
  });
  afterEach(function () {
    element.dispose();
  });

  it('sets a title properly', function () {
    element.update(['Hello'], []);
    expect(element.setBusy).toHaveBeenCalledWith(true);
    expect(element.setTooltip).toHaveBeenCalledWith('<strong>Current:</strong><br>Hello');
  });
  it('escapes the given texts', function () {
    element.update(['<div>'], []);
    expect(element.setBusy).toHaveBeenCalledWith(true);
    expect(element.setTooltip).toHaveBeenCalledWith('<strong>Current:</strong><br>&lt;div&gt;');
  });
  it('shows idle message when nothing is provided', function () {
    element.update([], []);
    expect(element.setBusy).toHaveBeenCalledWith(false);
    expect(element.setTooltip).toHaveBeenCalledWith('Idle');
  });
  it('shows only history when current is not present', function () {
    element.update([], [{ title: 'Yo', duration: '1m' }]);
    expect(element.setBusy).toHaveBeenCalledWith(false);
    expect(element.setTooltip).toHaveBeenCalledWith('<strong>History:</strong><br>Yo (1m)');
  });
  it('shows both history and current when both are present', function () {
    element.update(['Hey'], [{ title: 'Yo', duration: '1m' }]);
    expect(element.setBusy).toHaveBeenCalledWith(true);
    expect(element.setTooltip).toHaveBeenCalledWith('<strong>History:</strong><br>Yo (1m)<br><strong>Current:</strong><br>Hey');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90bGFuZGF1Ly5hdG9tL3BhY2thZ2VzL2J1c3ktc2lnbmFsL3NwZWMvZWxlbWVudC1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OzBCQUVvQixnQkFBZ0I7Ozs7QUFFcEMsUUFBUSxDQUFDLFNBQVMsRUFBRSxZQUFXO0FBQzdCLE1BQUksT0FBTyxZQUFBLENBQUE7O0FBRVgsWUFBVSxDQUFDLFlBQVc7QUFDcEIsV0FBTyxHQUFHLDZCQUFhLENBQUE7QUFDdkIsU0FBSyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtBQUM3QyxTQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFBO0dBQzNDLENBQUMsQ0FBQTtBQUNGLFdBQVMsQ0FBQyxZQUFXO0FBQ25CLFdBQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtHQUNsQixDQUFDLENBQUE7O0FBRUYsSUFBRSxDQUFDLHVCQUF1QixFQUFFLFlBQVc7QUFDckMsV0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQzdCLFVBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDbEQsVUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFBO0dBQ3RGLENBQUMsQ0FBQTtBQUNGLElBQUUsQ0FBQyx5QkFBeUIsRUFBRSxZQUFXO0FBQ3ZDLFdBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUM3QixVQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ2xELFVBQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsb0JBQW9CLENBQUMsMENBQTBDLENBQUMsQ0FBQTtHQUM1RixDQUFDLENBQUE7QUFDRixJQUFFLENBQUMsNkNBQTZDLEVBQUUsWUFBVztBQUMzRCxXQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUN0QixVQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ25ELFVBQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUE7R0FDeEQsQ0FBQyxDQUFBO0FBQ0YsSUFBRSxDQUFDLGdEQUFnRCxFQUFFLFlBQVc7QUFDOUQsV0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUNyRCxVQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ25ELFVBQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsb0JBQW9CLENBQUMsc0NBQXNDLENBQUMsQ0FBQTtHQUN4RixDQUFDLENBQUE7QUFDRixJQUFFLENBQUMsc0RBQXNELEVBQUUsWUFBVztBQUNwRSxXQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUMxRCxVQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ2xELFVBQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsb0JBQW9CLENBQUMsMEVBQTBFLENBQUMsQ0FBQTtHQUM1SCxDQUFDLENBQUE7Q0FDSCxDQUFDLENBQUEiLCJmaWxlIjoiL1VzZXJzL3RsYW5kYXUvLmF0b20vcGFja2FnZXMvYnVzeS1zaWduYWwvc3BlYy9lbGVtZW50LXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgRWxlbWVudCBmcm9tICcuLi9saWIvZWxlbWVudCdcblxuZGVzY3JpYmUoJ0VsZW1lbnQnLCBmdW5jdGlvbigpIHtcbiAgbGV0IGVsZW1lbnRcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQgPSBuZXcgRWxlbWVudCgpXG4gICAgc3B5T24oZWxlbWVudCwgJ3NldFRvb2x0aXAnKS5hbmRDYWxsVGhyb3VnaCgpXG4gICAgc3B5T24oZWxlbWVudCwgJ3NldEJ1c3knKS5hbmRDYWxsVGhyb3VnaCgpXG4gIH0pXG4gIGFmdGVyRWFjaChmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LmRpc3Bvc2UoKVxuICB9KVxuXG4gIGl0KCdzZXRzIGEgdGl0bGUgcHJvcGVybHknLCBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LnVwZGF0ZShbJ0hlbGxvJ10sIFtdKVxuICAgIGV4cGVjdChlbGVtZW50LnNldEJ1c3kpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRydWUpXG4gICAgZXhwZWN0KGVsZW1lbnQuc2V0VG9vbHRpcCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzxzdHJvbmc+Q3VycmVudDo8L3N0cm9uZz48YnI+SGVsbG8nKVxuICB9KVxuICBpdCgnZXNjYXBlcyB0aGUgZ2l2ZW4gdGV4dHMnLCBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LnVwZGF0ZShbJzxkaXY+J10sIFtdKVxuICAgIGV4cGVjdChlbGVtZW50LnNldEJ1c3kpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRydWUpXG4gICAgZXhwZWN0KGVsZW1lbnQuc2V0VG9vbHRpcCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzxzdHJvbmc+Q3VycmVudDo8L3N0cm9uZz48YnI+Jmx0O2RpdiZndDsnKVxuICB9KVxuICBpdCgnc2hvd3MgaWRsZSBtZXNzYWdlIHdoZW4gbm90aGluZyBpcyBwcm92aWRlZCcsIGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQudXBkYXRlKFtdLCBbXSlcbiAgICBleHBlY3QoZWxlbWVudC5zZXRCdXN5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChmYWxzZSlcbiAgICBleHBlY3QoZWxlbWVudC5zZXRUb29sdGlwKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnSWRsZScpXG4gIH0pXG4gIGl0KCdzaG93cyBvbmx5IGhpc3Rvcnkgd2hlbiBjdXJyZW50IGlzIG5vdCBwcmVzZW50JywgZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudC51cGRhdGUoW10sIFt7IHRpdGxlOiAnWW8nLCBkdXJhdGlvbjogJzFtJyB9XSlcbiAgICBleHBlY3QoZWxlbWVudC5zZXRCdXN5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChmYWxzZSlcbiAgICBleHBlY3QoZWxlbWVudC5zZXRUb29sdGlwKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnPHN0cm9uZz5IaXN0b3J5Ojwvc3Ryb25nPjxicj5ZbyAoMW0pJylcbiAgfSlcbiAgaXQoJ3Nob3dzIGJvdGggaGlzdG9yeSBhbmQgY3VycmVudCB3aGVuIGJvdGggYXJlIHByZXNlbnQnLCBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LnVwZGF0ZShbJ0hleSddLCBbeyB0aXRsZTogJ1lvJywgZHVyYXRpb246ICcxbScgfV0pXG4gICAgZXhwZWN0KGVsZW1lbnQuc2V0QnVzeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgodHJ1ZSlcbiAgICBleHBlY3QoZWxlbWVudC5zZXRUb29sdGlwKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnPHN0cm9uZz5IaXN0b3J5Ojwvc3Ryb25nPjxicj5ZbyAoMW0pPGJyPjxzdHJvbmc+Q3VycmVudDo8L3N0cm9uZz48YnI+SGV5JylcbiAgfSlcbn0pXG4iXX0=