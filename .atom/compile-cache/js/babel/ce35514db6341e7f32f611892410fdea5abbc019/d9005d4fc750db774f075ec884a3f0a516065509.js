

'use babel';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = check;
var helpers = require('atom-linter');

function check(pathToFlow, args, options) {
  var startTime = arguments.length <= 3 || arguments[3] === undefined ? Date.now() : arguments[3];

  return helpers.exec(pathToFlow, args, options)['catch'](function (error) {
    var errorM = String(error).toLowerCase();

    // If we'be been waiting for more than 10 seconds, just give up
    if (Date.now() - startTime > 10000) {
      return '[]';
    }
    // Check for the common flow status messages and ignore them
    if (errorM.indexOf('rechecking') !== -1 || errorM.indexOf('launching') !== -1 || errorM.indexOf('processing') !== -1 || errorM.indexOf('starting') !== -1 || errorM.indexOf('spawned') !== -1 || errorM.indexOf('logs') !== -1 || errorM.indexOf('initializing') !== -1) {
      return check(pathToFlow, args, options);
    }
    throw error;
  });
}

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90bGFuZGF1L2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1mbG93L2xpYi9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsV0FBVyxDQUFDOzs7OztxQkFJWSxLQUFLO0FBRjdCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQzs7QUFFeEIsU0FBUyxLQUFLLENBQzNCLFVBQWtCLEVBQ2xCLElBQW1CLEVBQ25CLE9BQWUsRUFFRTtNQURqQixTQUFpQix5REFBRyxJQUFJLENBQUMsR0FBRyxFQUFFOztBQUU5QixTQUFPLE9BQU8sQ0FDWCxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsU0FDMUIsQ0FBQyxVQUFDLEtBQUssRUFBc0I7QUFDakMsUUFBTSxNQUFjLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDOzs7QUFHbkQsUUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxHQUFHLEtBQUssRUFBRTtBQUNsQyxhQUFPLElBQUksQ0FBQztLQUNiOztBQUVELFFBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsSUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsSUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsSUFDbkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsSUFDakMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsSUFDaEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFDN0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDckM7QUFDQSxhQUFPLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3pDO0FBQ0QsVUFBTSxLQUFLLENBQUM7R0FDYixDQUFDLENBQUM7Q0FDTiIsImZpbGUiOiIvVXNlcnMvdGxhbmRhdS9kb3RmaWxlcy8uYXRvbS9wYWNrYWdlcy9saW50ZXItZmxvdy9saWIvaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbid1c2UgYmFiZWwnO1xuXG5jb25zdCBoZWxwZXJzID0gcmVxdWlyZSgnYXRvbS1saW50ZXInKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hlY2soXG4gIHBhdGhUb0Zsb3c6IHN0cmluZyxcbiAgYXJnczogQXJyYXk8c3RyaW5nPixcbiAgb3B0aW9uczogT2JqZWN0LFxuICBzdGFydFRpbWU6IG51bWJlciA9IERhdGUubm93KCksXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICByZXR1cm4gaGVscGVyc1xuICAgIC5leGVjKHBhdGhUb0Zsb3csIGFyZ3MsIG9wdGlvbnMpXG4gICAgLmNhdGNoKChlcnJvcjogc3RyaW5nIHwgT2JqZWN0KSA9PiB7XG4gICAgICBjb25zdCBlcnJvck06IHN0cmluZyA9IFN0cmluZyhlcnJvcikudG9Mb3dlckNhc2UoKTtcblxuICAgICAgLy8gSWYgd2UnYmUgYmVlbiB3YWl0aW5nIGZvciBtb3JlIHRoYW4gMTAgc2Vjb25kcywganVzdCBnaXZlIHVwXG4gICAgICBpZiAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSA+IDEwMDAwKSB7XG4gICAgICAgIHJldHVybiAnW10nO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIHRoZSBjb21tb24gZmxvdyBzdGF0dXMgbWVzc2FnZXMgYW5kIGlnbm9yZSB0aGVtXG4gICAgICBpZiAoZXJyb3JNLmluZGV4T2YoJ3JlY2hlY2tpbmcnKSAhPT0gLTEgfHxcbiAgICAgICAgZXJyb3JNLmluZGV4T2YoJ2xhdW5jaGluZycpICE9PSAtMSB8fFxuICAgICAgICBlcnJvck0uaW5kZXhPZigncHJvY2Vzc2luZycpICE9PSAtMSB8fFxuICAgICAgICBlcnJvck0uaW5kZXhPZignc3RhcnRpbmcnKSAhPT0gLTEgfHxcbiAgICAgICAgZXJyb3JNLmluZGV4T2YoJ3NwYXduZWQnKSAhPT0gLTEgfHxcbiAgICAgICAgZXJyb3JNLmluZGV4T2YoJ2xvZ3MnKSAhPT0gLTEgfHxcbiAgICAgICAgZXJyb3JNLmluZGV4T2YoJ2luaXRpYWxpemluZycpICE9PSAtMVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBjaGVjayhwYXRoVG9GbG93LCBhcmdzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xufVxuIl19