Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getType = getType;
exports.locationToRange = locationToRange;
exports.toLinterLocation = toLinterLocation;
exports.toStatusLinterMessages = toStatusLinterMessages;
exports.toCoverageLinterMessages = toCoverageLinterMessages;
exports.injectPosition = injectPosition;
exports.toAutocompleteSuggestions = toAutocompleteSuggestions;
exports.toDatatip = toDatatip;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _sbString_score = require('sb-string_score');

var _sbString_score2 = _interopRequireDefault(_sbString_score);

var _flowLanguageServerLibPkgNuclideFlowRpcLibPrettyPrintTypes = require('flow-language-server/lib/pkg/nuclide-flow-rpc/lib/prettyPrintTypes');

var _flowLanguageServerLibPkgNuclideFlowRpcLibPrettyPrintTypes2 = _interopRequireDefault(_flowLanguageServerLibPkgNuclideFlowRpcLibPrettyPrintTypes);

var _atom = require('atom');

var _helpersLinter = require('./helpers-linter');

var INIT_MESSAGE = 'flow server';
exports.INIT_MESSAGE = INIT_MESSAGE;
var RECHECKING_MESSAGE = 'flow is';

exports.RECHECKING_MESSAGE = RECHECKING_MESSAGE;

function getType(value) {
  return value.type && value.type.substr(0, 1) === '{' ? 'Object' : value.type || 'any';
}

function locationToRange(_ref) {
  var start = _ref.start;
  var end = _ref.end;

  return new _atom.Range([start.line - 1, start.column - 1], [end.line - 1, end.column]);
}

function toLinterLocation(loc) {
  return {
    file: loc.source,
    position: locationToRange(loc)
  };
}

function toLinterReference(messages) {
  for (var i = 1, _length = messages.length; i < _length; i++) {
    var message = messages[i];
    if (message.loc) {
      return {
        file: message.loc.source,
        position: locationToRange(message.loc).start
      };
    }
  }
  return null;
}

function toStatusLinterMessages(contents) {
  var parsed = JSON.parse(contents);
  if (!Array.isArray(parsed.errors) || !parsed.errors.length) {
    return [];
  }

  return parsed.errors.map(function (error) {
    var mainMsg = (0, _helpersLinter.mainMessageOfError)(error);
    var excerpt = error.message.map(function (msg) {
      return msg.descr;
    }).join(' ');
    if (error.operation && mainMsg === error.operation) {
      excerpt = error.operation.descr + ' ' + excerpt;
    }

    return {
      severity: error.level === 'error' ? 'error' : 'warning',
      location: mainMsg.loc && toLinterLocation(mainMsg.loc),
      excerpt: excerpt,
      description: (0, _helpersLinter.prettyPrintError)(error),
      reference: toLinterReference(error.message)
    };
  });
}

function toCoverageLinterMessages(coverage) {
  return coverage.expressions.uncovered_locs.map(function (loc) {
    return {
      severity: 'info',
      location: toLinterLocation(loc),
      excerpt: 'Uncovered code'
    };
  });
}

function injectPosition(text, editor, bufferPosition) {
  var characterIndex = editor.getBuffer().characterIndexForPosition(bufferPosition);
  return text.slice(0, characterIndex) + 'AUTO332' + text.slice(characterIndex);
}

function toAutocompleteSuggestions(contents, prefix) {
  if (contents.slice(0, 1) !== '{') {
    // Invalid server response
    return [];
  }

  var parsed = JSON.parse(contents);
  var hasPrefix = prefix.trim().length;
  var suggestions = parsed.result.map(function (suggestion) {
    var isFunction = suggestion.func_details !== null;
    var text = null;
    var snippet = null;
    var displayText = null;
    var description = null;

    if (isFunction) {
      var functionParams = suggestion.func_details.params;
      displayText = suggestion.name + '(' + functionParams.map(function (value) {
        return value.name;
      }).join(', ') + ')';
      snippet = suggestion.name + '(' + functionParams.map(function (value, i) {
        return '${' + (i + 1) + ':' + value.name + '}';
      }).join(', ') + ')$' + (functionParams.length + 1);

      var params = functionParams.map(function (param) {
        return param.name + (param.type ? ': ' + param.type : '');
      });
      var match = suggestion.type.match(/\(.*?\) => (.*)/);
      var returnType = match ? '=> ' + match[1] : '';

      description = '(' + params.join(', ') + ') ' + returnType;
    } else {
      text = suggestion.name;
    }

    return {
      text: text,
      type: isFunction ? 'function' : 'property',
      score: hasPrefix ? (0, _sbString_score2['default'])(suggestion.name, prefix) : 1,
      snippet: snippet,
      leftLabel: isFunction ? 'function' : getType(suggestion),
      displayText: displayText,
      replacementPrefix: prefix,
      description: description
    };
  });
  return suggestions.sort(function (a, b) {
    return b.score - a.score;
  }).filter(function (item) {
    return item.score;
  });
}

function toDatatip(editor, point, result) {
  var parsed = JSON.parse(result);

  var type = parsed.type;
  var loc = parsed.loc;

  if (type === '(unknown)') {
    return null;
  }

  return {
    range: locationToRange(loc),
    markedStrings: [{
      type: 'snippet',
      grammar: editor.getGrammar(),
      value: (0, _flowLanguageServerLibPkgNuclideFlowRpcLibPrettyPrintTypes2['default'])(type)
    }]
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,