Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _graphqlLanguageServiceInterface = require('graphql-language-service-interface');

var _graphqlCleanQuery = require('../graphql/cleanQuery');

var _graphqlCleanQuery2 = _interopRequireDefault(_graphqlCleanQuery);

var _getCustomSnippet = require('./getCustomSnippet');

var _getCustomSnippet2 = _interopRequireDefault(_getCustomSnippet);

'use babel';

var getRow = function getRow(fileContent, query, bufferPosition) {
  var prefix = fileContent.split(query)[0];
  var lines = prefix.split('\n');
  var startLine = lines.length - 1;
  return bufferPosition.row - startLine;
};

var getColumn = function getColumn(fileContent, query, bufferPosition) {
  var row = getRow(fileContent, query, bufferPosition);
  if (row === 0) {
    var prefixLines = fileContent.split(query)[0].split('\n');
    var linePrefix = prefixLines[prefixLines.length - 1];
    return bufferPosition.column - linePrefix.length;
  } else {
    return bufferPosition.column;
  }
};

var isCursorInQuery = function isCursorInQuery(query, fileContent, bufferPosition) {
  var prefix = fileContent.split(query)[0];
  var lines = prefix.split('\n');
  var startLine = lines.length - 1;
  var endLine = startLine + query.split('\n').length - 1;
  return startLine <= bufferPosition.row && endLine >= bufferPosition.row;
};

exports['default'] = _asyncToGenerator(function* (_ref) {
  var schema = _ref.schema;
  var query = _ref.query;
  var fileContent = _ref.fileContent;
  var bufferPosition = _ref.bufferPosition;

  if (!isCursorInQuery(query, fileContent, bufferPosition)) return [];
  var cursor = {
    line: getRow(fileContent, query, bufferPosition),
    character: getColumn(fileContent, query, bufferPosition)
  };
  var cleanedQuery = (0, _graphqlCleanQuery2['default'])(query);
  var hints = (0, _graphqlLanguageServiceInterface.getAutocompleteSuggestions)(schema, cleanedQuery, cursor);
  var custom = (0, _getCustomSnippet2['default'])(hints, schema, cleanedQuery, cursor);
  if (custom) {
    hints.push(custom);
  }

  if (!hints) return [];
  return hints.map(function (hint) {
    return {
      snippet: hint.label,
      displayText: hint.label,
      leftLabel: hint.detail,
      description: hint.documentation || 'Self descriptive.'
    };
  });
});
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90bGFuZGF1L2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2dyYXBocWwtYXV0b2NvbXBsZXRlL2xpYi9TbmlwcGV0cy9nZXRTbmlwcGV0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OzsrQ0FFeUMsb0NBQW9DOztpQ0FDdEQsdUJBQXVCOzs7O2dDQUNqQixvQkFBb0I7Ozs7QUFKakQsV0FBVyxDQUFBOztBQU1YLElBQU0sTUFBTSxHQUFHLFNBQVQsTUFBTSxDQUFZLFdBQVcsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFO0FBQzFELE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDMUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNoQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtBQUNsQyxTQUFPLGNBQWMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFBO0NBQ3RDLENBQUE7O0FBRUQsSUFBTSxTQUFTLEdBQUcsU0FBWixTQUFTLENBQVksV0FBVyxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUU7QUFDN0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQUE7QUFDdEQsTUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO0FBQ2IsUUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDM0QsUUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDdEQsV0FBTyxjQUFjLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUE7R0FDakQsTUFBTTtBQUNMLFdBQU8sY0FBYyxDQUFDLE1BQU0sQ0FBQTtHQUM3QjtDQUNGLENBQUE7O0FBRUQsSUFBTSxlQUFlLEdBQUcsU0FBbEIsZUFBZSxDQUFZLEtBQUssRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFO0FBQ25FLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDMUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNoQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtBQUNsQyxNQUFNLE9BQU8sR0FBRyxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO0FBQ3hELFNBQU8sU0FBUyxJQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUE7Q0FDeEUsQ0FBQTs7dUNBRWMsV0FBZSxJQUE0QyxFQUFFO01BQTdDLE1BQU0sR0FBUCxJQUE0QyxDQUEzQyxNQUFNO01BQUUsS0FBSyxHQUFkLElBQTRDLENBQW5DLEtBQUs7TUFBRSxXQUFXLEdBQTNCLElBQTRDLENBQTVCLFdBQVc7TUFBRSxjQUFjLEdBQTNDLElBQTRDLENBQWYsY0FBYzs7QUFDdkUsTUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLGNBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFBO0FBQ25FLE1BQU0sTUFBTSxHQUFHO0FBQ2IsUUFBSSxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQztBQUNoRCxhQUFTLEVBQUUsU0FBUyxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDO0dBQ3pELENBQUE7QUFDRCxNQUFNLFlBQVksR0FBRyxvQ0FBVyxLQUFLLENBQUMsQ0FBQTtBQUN0QyxNQUFNLEtBQUssR0FBRyxpRUFBMkIsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUN0RSxNQUFNLE1BQU0sR0FBRyxtQ0FBaUIsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUE7QUFDcEUsTUFBSSxNQUFNLEVBQUU7QUFDVixTQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0dBQ25COztBQUVELE1BQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUE7QUFDckIsU0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQ3ZCLFdBQU87QUFDTCxhQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUs7QUFDbkIsaUJBQVcsRUFBRSxJQUFJLENBQUMsS0FBSztBQUN2QixlQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU07QUFDdEIsaUJBQVcsRUFBRSxJQUFJLENBQUMsYUFBYSxJQUFJLG1CQUFtQjtLQUN2RCxDQUFBO0dBQ0YsQ0FBQyxDQUFBO0NBQ0giLCJmaWxlIjoiL1VzZXJzL3RsYW5kYXUvZG90ZmlsZXMvLmF0b20vcGFja2FnZXMvZ3JhcGhxbC1hdXRvY29tcGxldGUvbGliL1NuaXBwZXRzL2dldFNuaXBwZXRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcblxuaW1wb3J0IHtnZXRBdXRvY29tcGxldGVTdWdnZXN0aW9uc30gZnJvbSAnZ3JhcGhxbC1sYW5ndWFnZS1zZXJ2aWNlLWludGVyZmFjZSdcbmltcG9ydCBjbGVhblF1ZXJ5IGZyb20gJy4uL2dyYXBocWwvY2xlYW5RdWVyeSdcbmltcG9ydCBnZXRDdXN0b21TbmlwcGV0IGZyb20gJy4vZ2V0Q3VzdG9tU25pcHBldCdcblxuY29uc3QgZ2V0Um93ID0gZnVuY3Rpb24oZmlsZUNvbnRlbnQsIHF1ZXJ5LCBidWZmZXJQb3NpdGlvbikge1xuICBjb25zdCBwcmVmaXggPSBmaWxlQ29udGVudC5zcGxpdChxdWVyeSlbMF1cbiAgY29uc3QgbGluZXMgPSBwcmVmaXguc3BsaXQoJ1xcbicpXG4gIGNvbnN0IHN0YXJ0TGluZSA9IGxpbmVzLmxlbmd0aCAtIDFcbiAgcmV0dXJuIGJ1ZmZlclBvc2l0aW9uLnJvdyAtIHN0YXJ0TGluZVxufVxuXG5jb25zdCBnZXRDb2x1bW4gPSBmdW5jdGlvbihmaWxlQ29udGVudCwgcXVlcnksIGJ1ZmZlclBvc2l0aW9uKSB7XG4gIGNvbnN0IHJvdyA9IGdldFJvdyhmaWxlQ29udGVudCwgcXVlcnksIGJ1ZmZlclBvc2l0aW9uKVxuICBpZiAocm93ID09PSAwKSB7XG4gICAgY29uc3QgcHJlZml4TGluZXMgPSBmaWxlQ29udGVudC5zcGxpdChxdWVyeSlbMF0uc3BsaXQoJ1xcbicpXG4gICAgY29uc3QgbGluZVByZWZpeCA9IHByZWZpeExpbmVzW3ByZWZpeExpbmVzLmxlbmd0aCAtIDFdXG4gICAgcmV0dXJuIGJ1ZmZlclBvc2l0aW9uLmNvbHVtbiAtIGxpbmVQcmVmaXgubGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1ZmZlclBvc2l0aW9uLmNvbHVtblxuICB9XG59XG5cbmNvbnN0IGlzQ3Vyc29ySW5RdWVyeSA9IGZ1bmN0aW9uKHF1ZXJ5LCBmaWxlQ29udGVudCwgYnVmZmVyUG9zaXRpb24pIHtcbiAgY29uc3QgcHJlZml4ID0gZmlsZUNvbnRlbnQuc3BsaXQocXVlcnkpWzBdXG4gIGNvbnN0IGxpbmVzID0gcHJlZml4LnNwbGl0KCdcXG4nKVxuICBjb25zdCBzdGFydExpbmUgPSBsaW5lcy5sZW5ndGggLSAxXG4gIGNvbnN0IGVuZExpbmUgPSBzdGFydExpbmUgKyBxdWVyeS5zcGxpdCgnXFxuJykubGVuZ3RoIC0gMVxuICByZXR1cm4gc3RhcnRMaW5lIDw9IGJ1ZmZlclBvc2l0aW9uLnJvdyAmJiBlbmRMaW5lID49IGJ1ZmZlclBvc2l0aW9uLnJvd1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbih7c2NoZW1hLCBxdWVyeSwgZmlsZUNvbnRlbnQsIGJ1ZmZlclBvc2l0aW9ufSkge1xuICBpZiAoIWlzQ3Vyc29ySW5RdWVyeShxdWVyeSwgZmlsZUNvbnRlbnQsIGJ1ZmZlclBvc2l0aW9uKSkgcmV0dXJuIFtdXG4gIGNvbnN0IGN1cnNvciA9IHtcbiAgICBsaW5lOiBnZXRSb3coZmlsZUNvbnRlbnQsIHF1ZXJ5LCBidWZmZXJQb3NpdGlvbiksXG4gICAgY2hhcmFjdGVyOiBnZXRDb2x1bW4oZmlsZUNvbnRlbnQsIHF1ZXJ5LCBidWZmZXJQb3NpdGlvbilcbiAgfVxuICBjb25zdCBjbGVhbmVkUXVlcnkgPSBjbGVhblF1ZXJ5KHF1ZXJ5KVxuICBjb25zdCBoaW50cyA9IGdldEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb25zKHNjaGVtYSwgY2xlYW5lZFF1ZXJ5LCBjdXJzb3IpXG4gIGNvbnN0IGN1c3RvbSA9IGdldEN1c3RvbVNuaXBwZXQoaGludHMsIHNjaGVtYSwgY2xlYW5lZFF1ZXJ5LCBjdXJzb3IpXG4gIGlmIChjdXN0b20pIHtcbiAgICBoaW50cy5wdXNoKGN1c3RvbSlcbiAgfVxuXG4gIGlmICghaGludHMpIHJldHVybiBbXVxuICByZXR1cm4gaGludHMubWFwKGhpbnQgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzbmlwcGV0OiBoaW50LmxhYmVsLFxuICAgICAgZGlzcGxheVRleHQ6IGhpbnQubGFiZWwsXG4gICAgICBsZWZ0TGFiZWw6IGhpbnQuZGV0YWlsLFxuICAgICAgZGVzY3JpcHRpb246IGhpbnQuZG9jdW1lbnRhdGlvbiB8fCAnU2VsZiBkZXNjcmlwdGl2ZS4nXG4gICAgfVxuICB9KVxufVxuIl19