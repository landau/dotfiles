{"version":3,"sources":["../src/Traverse.js"],"names":[],"mappings":"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","file":"Traverse.js","sourcesContent":["/* @flow */\n\nimport type Element from './elements/Element';\nimport type Node from './elements/Node';\nimport type Token from './elements/Token';\n\nexport default class Traverse {\n    constructor() {\n        this._nodeIndex = new ElementIndexByType();\n        this._tokenIndex = new ElementIndexByType();\n    }\n\n    _nodeIndex: ElementIndexByType;\n    _tokenIndex: ElementIndexByType;\n\n    selectNodesByType(type: string): Array<Node> {\n        return this._nodeIndex.select(type);\n    }\n\n    selectTokensByType(type: string): Array<Token> {\n        return this._tokenIndex.select(type);\n    }\n\n    selectTokensByTypeAndValue(type: string, value: string): Array<Token> {\n        let tokens = this._tokenIndex.select(type);\n\n        if (value) {\n            return tokens.filter(function(token) {\n                return token.value === value;\n            });\n        }\n\n        return tokens;\n    }\n\n    addElements(elements: Array<Element>): void {\n        let nodeIndex = this._nodeIndex;\n        let tokenIndex = this._tokenIndex;\n\n        for (let i = 0; i < elements.length; i++) {\n            addElementTree(elements[i]);\n        }\n\n        function addElementTree(element) {\n            if (element.isToken) {\n                tokenIndex.addElement(element);\n            } else {\n                nodeIndex.addElement(element);\n                let child = element.firstChild;\n                while (child) {\n                    addElementTree(child);\n                    child = child.nextSibling;\n                }\n            }\n        }\n    }\n\n    removeElements(elements: Array<Element>): void {\n        let nodeIndex = this._nodeIndex;\n        let tokenIndex = this._tokenIndex;\n\n        for (let i = 0; i < elements.length; i++) {\n            removeElementTree(elements[i]);\n        }\n\n        function removeElementTree(element) {\n            if (element.isToken) {\n                tokenIndex.removeElement(element);\n            } else {\n                nodeIndex.removeElement(element);\n                let child = element.firstChild;\n                while (child) {\n                    removeElementTree(child);\n                    child = child.nextSibling;\n                }\n            }\n        }\n    }\n}\n\nclass ElementIndexByType {\n    constructor() {\n        this._index = {};\n    }\n\n    _index: Object;\n\n    select(type: string): Array<any> {\n        let items = this._index[type];\n        if (items) {\n            return items.concat();\n        } else {\n            return [];\n        }\n    }\n\n    addElement(element: Element): void {\n        let items = this._index[element.type];\n        if (!items) {\n            items = this._index[element.type] = [];\n        }\n        items[items.length] = element;\n    }\n\n    removeElement(element: Element): void {\n        let items = this._index[element.type];\n        items.splice(items.indexOf(element), 1);\n    }\n}\n"]}