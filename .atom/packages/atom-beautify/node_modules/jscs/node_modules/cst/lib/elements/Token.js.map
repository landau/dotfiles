{"version":3,"sources":["../../src/elements/Token.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;IAEqB;;;;;;;;;;;+BAOH,MAAc,OAAmB;AAC3C,mBAAO,IAAI,KAAJ,CAAU,IAAV,EAAgB,KAAhB,EAAuB,kBAAkB,IAAlB,EAAwB,KAAxB,CAAvB,CAAP,CAD2C;;;;;;;;;;;wCASxB,OAAiE;AACpF,mBAAO,IAAI,KAAJ,CAAU,MAAM,IAAN,EAAY,MAAM,KAAN,EAAa,MAAM,UAAN,CAA1C,CADoF;;;;;;;;;;;AASxF,aAzBiB,KAyBjB,CAAY,IAAZ,EAA0B,KAA1B,EAAyC,WAAzC,EAA8D;4CAzB7C,OAyB6C;;iGAzB7C,kBA0BP,MAAM,KAD8C;;AAG1D,YAAI,UAAU,MAAV,KAAqB,CAArB,EAAwB;AACxB,0BAAc,kBAAkB,IAAlB,EAAwB,KAAxB,CAAd,CADwB;SAA5B;;AAIA,YAAI,YAAY,KAAZ,CAPsD;AAQ1D,YAAI,eAAe,KAAf,CARsD;AAS1D,YAAI,SAAS,IAAT,CATsD;AAU1D,gBAAQ,IAAR;AACI,iBAAK,aAAL;AACI,4BAAY,IAAZ,CADJ;AAEI,yBAAS,KAAT,CAFJ;AAGI,sBAHJ;AADJ,iBAKS,cAAL;AACI,4BAAY,IAAZ,CADJ;AAEI,yBAAS,KAAT,CAFJ;AAGI,sBAHJ;AALJ,iBASS,YAAL;AACI,+BAAe,IAAf,CADJ;AAEI,yBAAS,KAAT,CAFJ;AAGI,sBAHJ;AATJ,iBAaS,+BAAL,CAbJ;AAcI,iBAAK,eAAL,CAdJ;AAeI,iBAAK,UAAL;AACI,yBAAS,KAAT,CADJ;AAEI,sBAFJ;AAfJ,SAV0D;AA6B1D,cAAK,KAAL,GAAa,KAAb,CA7B0D;AA8B1D,cAAK,WAAL,GAAmB,WAAnB,CA9B0D;AA+B1D,cAAK,iBAAL,GAAyB,YAAY,MAAZ,CA/BiC;AAgC1D,cAAK,gBAAL,GAAwB,qBAAS,WAAT,CAAxB,CAhC0D;AAiC1D,cAAK,OAAL,GAAe,IAAf,CAjC0D;AAkC1D,cAAK,SAAL,GAAiB,SAAjB,CAlC0D;AAmC1D,cAAK,YAAL,GAAoB,YAApB,CAnC0D;AAoC1D,cAAK,MAAL,GAAc,MAAd,CApC0D;AAqC1D,cAAK,cAAL,GAAsB,CAAC,MAAD,CArCoC;;KAA9D;;+BAzBiB;;wCAyEiB;AAC9B,mBAAO,IAAP,CAD8B;;;;uCAID;AAC7B,mBAAO,IAAP,CAD6B;;;;wCAIT;AACpB,mBAAO,KAAK,WAAL,CADa;;;;8CAIM;AAC1B,mBAAO,KAAK,iBAAL,CADmB;;;;6CAIM;AAChC,mBAAO,KAAK,gBAAL,CADyB;;;;0CAIV;AACtB,mBAAO,KAAK,gBAAL,CAAsB,MAAtB,GAA+B,CAA/B,CADe;;;;2CAIP;AACf,mBAAO,wBAAY,KAAK,KAAL,CAAnB,CADe;;;;qCAIN,aAA+B;AACxC,gBAAI,YAAY,MAAZ,GAAqB,CAArB,EAAwB;AACxB,sBAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN,CADwB;aAA5B;;AAIA,iBAAK,aAAL,GAAqB,WAArB,CALwC;;;;;;;;;;;uCAatB;AAClB,mBAAO,IAAI,KAAJ,CAAU,KAAK,IAAL,EAAW,KAAK,KAAL,EAAY,KAAK,WAAL,CAAxC,CADkB;;;WAlHL;;;;;;AAuHrB,SAAS,iBAAT,CAA2B,IAA3B,EAAyC,KAAzC,EAA6D;AACzD,YAAQ,IAAR;AACI,aAAK,aAAL;AACI,mBAAO,OAAO,KAAP,CADX;;AADJ,aAIS,cAAL;AACI,mBAAO,OAAO,KAAP,GAAe,IAAf,CADX;;AAJJ,aAOS,mBAAL;AACI,mBAAO,OAAO,KAAP,CAAP,CADJ;;AAPJ,aAUS,SAAL,CAVJ;AAWI,aAAK,SAAL,CAXJ;AAYI,aAAK,MAAL;AACI,mBAAO,OAAO,KAAP,CAAP,CADJ;;AAZJ;AAgBQ,mBAAO,KAAP,CADJ;AAfJ,KADyD;CAA7D","file":"Token.js","sourcesContent":["/* @flow */\n\nimport Element from './Element';\nimport {getLines, getLineInfo} from '../utils/lines';\n\nexport default class Token extends Element {\n    /**\n     * Generic token constructor.\n     *\n     * @param {String} type\n     * @param {*} value\n     */\n    static create(type: string, value: any): Token {\n        return new Token(type, value, valueToSourceCode(type, value));\n    }\n\n    /**\n     * Creates new token using babel/acorn parser token.\n     *\n     * @param {{type: String, value: String, sourceCode: String}} token\n     */\n    static createFromToken(token: {type: string, value: string, sourceCode: string}): Token {\n        return new Token(token.type, token.value, token.sourceCode);\n    }\n\n    /**\n     * @param {String} type\n     * @param {String} value\n     * @param {String} _sourceCode private source code argument\n     */\n    constructor(type: string, value: string, _sourceCode: string) {\n        super(type, []);\n\n        if (arguments.length === 2) {\n            _sourceCode = valueToSourceCode(type, value);\n        }\n\n        let isComment = false;\n        let isWhitespace = false;\n        let isCode = true;\n        switch (type) {\n            case 'CommentLine':\n                isComment = true;\n                isCode = false;\n                break;\n            case 'CommentBlock':\n                isComment = true;\n                isCode = false;\n                break;\n            case 'Whitespace':\n                isWhitespace = true;\n                isCode = false;\n                break;\n            case 'AppleInstrumentationDirective':\n            case 'GritDirective':\n            case 'Hashbang':\n                isCode = false;\n                break;\n        }\n        this.value = value;\n        this._sourceCode = _sourceCode;\n        this._sourceCodeLength = _sourceCode.length;\n        this._sourceCodeLines = getLines(_sourceCode);\n        this.isToken = true;\n        this.isComment = isComment;\n        this.isWhitespace = isWhitespace;\n        this.isCode = isCode;\n        this.isNonCodeToken = !isCode;\n    }\n\n    value: string;\n    _sourceCode: string;\n    _sourceCodeLength: number;\n    _sourceCodeLines: Array<string>;\n    _isComment: boolean;\n    _isWhitespace: boolean;\n    _isCode: boolean;\n\n    getFirstToken(): ?Token | Element {\n        return this;\n    }\n\n    getLastToken(): ?Token | Element {\n        return this;\n    }\n\n    getSourceCode(): string {\n        return this._sourceCode;\n    }\n\n    getSourceCodeLength(): number {\n        return this._sourceCodeLength;\n    }\n\n    getSourceCodeLines(): Array<string> {\n        return this._sourceCodeLines;\n    }\n\n    getNewlineCount(): number {\n        return this._sourceCodeLines.length - 1;\n    }\n\n    getValueLineInfo() {\n        return getLineInfo(this.value);\n    }\n\n    _setChildren(newChildren: Array<any>): void {\n        if (newChildren.length > 0) {\n            throw new Error('Token nodes cannot contain child nodes');\n        }\n\n        this.childElements = newChildren;\n    }\n\n    /**\n     * Clones current Element structure.\n     *\n     * @returns {Element}\n     */\n    cloneElement(): Token {\n        return new Token(this.type, this.value, this._sourceCode);\n    }\n}\n\nfunction valueToSourceCode(type: string, value: any): string {\n    switch (type) {\n        case 'CommentLine':\n            return '//' + value;\n\n        case 'CommentBlock':\n            return '/*' + value + '*/';\n\n        case 'RegularExpression':\n            return String(value);\n\n        case 'Numeric':\n        case 'Boolean':\n        case 'Null':\n            return String(value);\n\n        default:\n            return value;\n    }\n}\n"]}