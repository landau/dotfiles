{"version":3,"sources":["../../../src/elements/types/ArrowFunctionExpression.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEqB;;;AACjB,aADiB,uBACjB,CAAY,UAAZ,EAAwB;4CADP,yBACO;;iGADP,oCAEP,2BAA2B,aADb;;AAEpB,cAAK,EAAL,GAAU,IAAV,CAFoB;AAGpB,cAAK,SAAL,GAAiB,KAAjB,CAHoB;AAIpB,cAAK,UAAL,GAAkB,IAAlB,CAJoB;;KAAxB;;+BADiB;;wCAQD,UAAU;AACtB,gBAAI,SAAS,EAAT,CADkB;AAEtB,gBAAI,QAAQ,KAAR,CAFkB;;AAItB,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,OAA/B,CAAJ,EAA6C;AACzC,wBAAQ,IAAR,CADyC;AAEzC,yBAAS,SAAT,CAAmB,YAAnB,EAAiC,OAAjC,EAFyC;AAGzC,yBAAS,WAAT,GAHyC;aAA7C;;AAMA,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrC,yBAAS,iCAAkB,QAAlB,CAAT,CADqC;AAErC,yBAAS,WAAT,GAFqC;aAAzC,MAGO,IAAI,SAAS,cAAT,CAAwB,SAAxB,EAAmC;AAC1C,uBAAO,IAAP,CAAY,SAAS,cAAT,CAAZ,CAD0C;AAE1C,yBAAS,QAAT,GAF0C;AAG1C,yBAAS,WAAT,GAH0C;aAAvC;;AAMP,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,IAAjC,EAnBsB;AAoBtB,qBAAS,WAAT,GApBsB;;AAsBtB,gBAAI,aAAa,CAAC,SAAS,cAAT,CAAwB,WAAxB,CAtBI;;AAwBtB,gBAAI,aAAJ,CAxBsB;AAyBtB,gBAAI,UAAJ,EAAgB;AACZ,uBAAO,SAAS,cAAT,EAAP,CADY;aAAhB,MAEO;AACH,uBAAO,SAAS,aAAT,EAAP,CADG;aAFP;;AAMA,qBAAS,SAAT,GA/BsB;;AAiCtB,iBAAK,KAAL,GAAa,KAAb,CAjCsB;AAkCtB,iBAAK,MAAL,GAAc,MAAd,CAlCsB;AAmCtB,iBAAK,IAAL,GAAY,IAAZ,CAnCsB;AAoCtB,iBAAK,UAAL,GAAkB,UAAlB,CApCsB;;;WART","file":"ArrowFunctionExpression.js","sourcesContent":["import Expression from '../Expression';\nimport getFunctionParams from './utils/getFunctionParams';\n\nexport default class ArrowFunctionExpression extends Expression {\n    constructor(childNodes) {\n        super('ArrowFunctionExpression', childNodes);\n        this.id = null;\n        this.generator = false;\n        this.isFunction = true;\n    }\n\n    _acceptChildren(children) {\n        let params = [];\n        let async = false;\n\n        if (children.isToken('Identifier', 'async')) {\n            async = true;\n            children.passToken('Identifier', 'async');\n            children.skipNonCode();\n        }\n\n        if (children.isToken('Punctuator', '(')) {\n            params = getFunctionParams(children);\n            children.skipNonCode();\n        } else if (children.currentElement.isPattern) {\n            params.push(children.currentElement);\n            children.moveNext();\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', '=>');\n        children.skipNonCode();\n\n        let expression = !children.currentElement.isStatement;\n\n        let body;\n        if (expression) {\n            body = children.passExpression();\n        } else {\n            body = children.passStatement();\n        }\n\n        children.assertEnd();\n\n        this.async = async;\n        this.params = params;\n        this.body = body;\n        this.expression = expression;\n    }\n}\n"]}