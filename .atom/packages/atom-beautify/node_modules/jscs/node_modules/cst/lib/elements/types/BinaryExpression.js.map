{"version":3,"sources":["../../../src/elements/types/BinaryExpression.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAM,kBAAkB;AACpB,UAAM,IAAN;AACA,UAAM,IAAN;AACA,WAAO,IAAP;AACA,WAAO,IAAP;AACA,SAAK,IAAL;AACA,UAAM,IAAN;AACA,SAAK,IAAL;AACA,UAAM,IAAN;AACA,UAAM,IAAN;AACA,UAAM,IAAN;AACA,WAAO,IAAP;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACA,UAAM,IAAN;AACA,kBAAc,IAAd;AACA,UAAM,IAAN;CAtBE;;IAyBe;;;;;;AAIjB,aAJiB,gBAIjB,CAAY,UAAZ,EAAwB;4CAJP,kBAIO;4FAJP,6BAKP,oBAAoB,aADN;KAAxB;;+BAJiB;;wCAQD,UAAU;AACtB,gBAAI,OAAO,SAAS,cAAT,EAAP,CADkB;AAEtB,qBAAS,WAAT,GAFsB;AAGtB,gBAAI,SAAS,cAAT,CAAwB,IAAxB,KAAiC,YAAjC,IAAiD,SAAS,cAAT,CAAwB,IAAxB,KAAiC,SAAjC,EAA4C;AAC7F,yBAAS,WAAT,CAAqB,SAAS,cAAT,CAAwB,IAAxB,EAA8B,eAAnD,EAD6F;aAAjG,MAEO;AACH,yBAAS,WAAT,CAAqB,YAArB,EADG;aAFP;AAKA,gBAAI,WAAW,SAAS,SAAT,GAAqB,KAArB,CARO;AAStB,qBAAS,WAAT,GATsB;AAUtB,gBAAI,QAAQ,SAAS,cAAT,EAAR,CAVkB;AAWtB,qBAAS,SAAT,GAXsB;;AAatB,iBAAK,IAAL,GAAY,IAAZ,CAbsB;AActB,iBAAK,QAAL,GAAgB,QAAhB,CAdsB;AAetB,iBAAK,KAAL,GAAa,KAAb,CAfsB;;;WART","file":"BinaryExpression.js","sourcesContent":["import Expression from '../Expression';\n\nconst binaryOperators = {\n    '==': true,\n    '!=': true,\n    '===': true,\n    '!==': true,\n    '<': true,\n    '<=': true,\n    '>': true,\n    '>=': true,\n    '<<': true,\n    '>>': true,\n    '>>>': true,\n    '+': true,\n    '-': true,\n    '*': true,\n    '/': true,\n    '%': true,\n    '|': true,\n    '^': true,\n    '&': true,\n    'in': true,\n    'instanceof': true,\n    '**': true\n};\n\nexport default class BinaryExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"a + b\" before \" * b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('BinaryExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let left = children.passExpression();\n        children.skipNonCode();\n        if (children.currentElement.type === 'Punctuator' || children.currentElement.type === 'Keyword') {\n            children.assertToken(children.currentElement.type, binaryOperators);\n        } else {\n            children.assertToken('Punctuator');\n        }\n        let operator = children.passToken().value;\n        children.skipNonCode();\n        let right = children.passExpression();\n        children.assertEnd();\n\n        this.left = left;\n        this.operator = operator;\n        this.right = right;\n    }\n}\n"]}