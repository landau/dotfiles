{"version":3,"sources":["../../../src/elements/types/ClassMethod.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAM,kBAAkB;AACpB,SAAK,IAAL;AACA,SAAK,IAAL;CAFE;;IAKe;;;AACjB,aADiB,WACjB,CAAY,UAAZ,EAAwB;4CADP,aACO;;iGADP,wBAEP,eAAe,aADD;;AAEpB,cAAK,UAAL,GAAkB,IAAlB,CAFoB;;KAAxB;;+BADiB;;wCAMD,UAAU;AACtB,gBAAI,YAAJ,CADsB;AAEtB,gBAAI,iBAAJ,CAFsB;AAGtB,gBAAI,aAAJ,CAHsB;AAItB,gBAAI,eAAe,KAAf,CAJkB;AAKtB,gBAAI,YAAY,KAAZ,CALkB;AAMtB,gBAAI,eAAJ,CANsB;;AAQtB,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,QAA/B,CAAJ,EAA8C;AAC1C,+BAAe,IAAf,CAD0C;AAE1C,yBAAS,SAAT,GAF0C;AAG1C,yBAAS,WAAT,GAH0C;aAA9C;;AAMA,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,eAA/B,CAAJ,EAAqD;AACjD,uBAAO,SAAS,cAAT,CAAwB,KAAxB,CAD0C;AAEjD,yBAAS,SAAT,GAFiD;AAGjD,yBAAS,WAAT,GAHiD;aAArD,MAIO;AACH,uBAAO,QAAP,CADG;AAEH,oBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrC,gCAAY,IAAZ,CADqC;AAErC,6BAAS,SAAT,GAFqC;AAGrC,6BAAS,WAAT,GAHqC;iBAAzC;aANJ;;AAaA,gBAAI,SAAS,MAAT,CAAgB,YAAhB,CAAJ,EAAmC;AAC/B,2BAAW,KAAX,CAD+B;AAE/B,sBAAM,SAAS,QAAT,EAAN,CAF+B;AAG/B,oBAAI,SAAS,QAAT,IAAqB,IAAI,IAAJ,KAAa,YAAb,IAA6B,IAAI,IAAJ,KAAa,aAAb,EAA4B;AAC9E,2BAAO,aAAP,CAD8E;iBAAlF;AAGA,yBAAS,WAAT,GAN+B;aAAnC,MAOO;AACH,2BAAW,IAAX,CADG;AAEH,yBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EAFG;AAGH,yBAAS,WAAT,GAHG;AAIH,sBAAM,SAAS,cAAT,EAAN,CAJG;AAKH,yBAAS,WAAT,GALG;AAMH,yBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EANG;AAOH,yBAAS,WAAT,GAPG;aAPP;;AAiBA,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrC,4BAAY,IAAZ,CADqC;AAErC,yBAAS,QAAT,GAFqC;AAGrC,yBAAS,WAAT,GAHqC;aAAzC;;AAMA,gBAAI,SAAS,MAAT,CAAgB,YAAhB,CAAJ,EAAmC;AAC/B,qBAAK,SAAS,QAAT,EAAL,CAD+B;AAE/B,yBAAS,WAAT,GAF+B;aAAnC;;AAKA,qBAAS,iCAAkB,QAAlB,CAAT,CAvDsB;AAwDtB,qBAAS,WAAT,GAxDsB;;AA0DtB,gBAAI,OAAO,SAAS,aAAT,EAAP,CA1DkB;;AA4DtB,qBAAS,SAAT,GA5DsB;;AA8DtB,iBAAK,MAAL,GAAc,MAAd,CA9DsB;AA+DtB,iBAAK,IAAL,GAAY,IAAZ,CA/DsB;AAgEtB,iBAAK,SAAL,GAAiB,SAAjB,CAhEsB;AAiEtB,iBAAK,IAAL,GAAY,IAAZ,CAjEsB;AAkEtB,iBAAK,GAAL,GAAW,GAAX,CAlEsB;AAmEtB,iBAAK,QAAL,GAAgB,QAAhB,CAnEsB;AAoEtB,iBAAK,MAAL,GAAc,YAAd,CApEsB;;;WANT","file":"ClassMethod.js","sourcesContent":["import Node from '../Node';\nimport getFunctionParams from './utils/getFunctionParams';\n\nconst getterAndSetter = {\n    get: true,\n    set: true\n};\n\nexport default class ClassMethod extends Node {\n    constructor(childNodes) {\n        super('ClassMethod', childNodes);\n        this.isFunction = true;\n    }\n\n    _acceptChildren(children) {\n        let key;\n        let computed;\n        let kind;\n        let staticMember = false;\n        let generator = false;\n        let params;\n\n        if (children.isToken('Identifier', 'static')) {\n            staticMember = true;\n            children.passToken();\n            children.skipNonCode();\n        }\n\n        if (children.isToken('Identifier', getterAndSetter)) {\n            kind = children.currentElement.value;\n            children.passToken();\n            children.skipNonCode();\n        } else {\n            kind = 'method';\n            if (children.isToken('Punctuator', '*')) {\n                generator = true;\n                children.passToken();\n                children.skipNonCode();\n            }\n        }\n\n        if (children.isNode('Identifier')) {\n            computed = false;\n            key = children.passNode();\n            if (kind === 'method' && key.type === 'Identifier' && key.name === 'constructor') {\n                kind = 'constructor';\n            }\n            children.skipNonCode();\n        } else {\n            computed = true;\n            children.passToken('Punctuator', '[');\n            children.skipNonCode();\n            key = children.passExpression();\n            children.skipNonCode();\n            children.passToken('Punctuator', ']');\n            children.skipNonCode();\n        }\n\n        if (children.isToken('Punctuator', '*')) {\n            generator = true;\n            children.moveNext();\n            children.skipNonCode();\n        }\n\n        if (children.isNode('Identifier')) {\n            id = children.passNode();\n            children.skipNonCode();\n        }\n\n        params = getFunctionParams(children);\n        children.skipNonCode();\n\n        let body = children.passStatement();\n\n        children.assertEnd();\n\n        this.params = params;\n        this.body = body;\n        this.generator = generator;\n        this.kind = kind;\n        this.key = key;\n        this.computed = computed;\n        this.static = staticMember;\n    }\n}\n"]}