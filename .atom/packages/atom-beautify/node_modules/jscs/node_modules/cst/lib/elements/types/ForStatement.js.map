{"version":3,"sources":["../../../src/elements/types/ForStatement.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB;;;AACjB,aADiB,YACjB,CAAY,UAAZ,EAAwB;4CADP,cACO;4FADP,yBAEP,gBAAgB,aADF;KAAxB;;+BADiB;;wCAKD,UAAU;AACtB,qBAAS,SAAT,CAAmB,SAAnB,EAA8B,KAA9B,EADsB;AAEtB,qBAAS,WAAT,GAFsB;;AAItB,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EAJsB;AAKtB,qBAAS,WAAT,GALsB;;AAOtB,gBAAI,OAAO,IAAP,CAPkB;;AAStB,gBAAI,CAAC,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAD,EAAsC;AACtC,oBAAI,SAAS,MAAT,CAAgB,qBAAhB,CAAJ,EAA4C;AACxC,2BAAO,SAAS,cAAT,CADiC;AAExC,6BAAS,QAAT,GAFwC;iBAA5C,MAGO;AACH,2BAAO,SAAS,cAAT,EAAP,CADG;iBAHP;AAMA,yBAAS,WAAT,GAPsC;aAA1C;;AAUA,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EAnBsB;AAoBtB,qBAAS,WAAT,GApBsB;;AAsBtB,gBAAI,OAAO,IAAP,CAtBkB;AAuBtB,gBAAI,CAAC,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAD,EAAsC;AACtC,uBAAO,SAAS,cAAT,EAAP,CADsC;AAEtC,yBAAS,WAAT,GAFsC;aAA1C;;AAKA,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EA5BsB;AA6BtB,qBAAS,WAAT,GA7BsB;;AA+BtB,gBAAI,SAAS,IAAT,CA/BkB;AAgCtB,gBAAI,CAAC,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAD,EAAsC;AACtC,yBAAS,SAAS,cAAT,EAAT,CADsC;AAEtC,yBAAS,WAAT,GAFsC;aAA1C;;AAKA,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EArCsB;AAsCtB,qBAAS,WAAT,GAtCsB;;AAwCtB,gBAAI,OAAO,SAAS,aAAT,EAAP,CAxCkB;;AA0CtB,qBAAS,SAAT,GA1CsB;;AA4CtB,iBAAK,IAAL,GAAY,IAAZ,CA5CsB;AA6CtB,iBAAK,IAAL,GAAY,IAAZ,CA7CsB;AA8CtB,iBAAK,MAAL,GAAc,MAAd,CA9CsB;AA+CtB,iBAAK,IAAL,GAAY,IAAZ,CA/CsB;;;WALT","file":"ForStatement.js","sourcesContent":["import Statement from '../Statement';\n\nexport default class ForStatement extends Statement {\n    constructor(childNodes) {\n        super('ForStatement', childNodes);\n    }\n\n    _acceptChildren(children) {\n        children.passToken('Keyword', 'for');\n        children.skipNonCode();\n\n        children.passToken('Punctuator', '(');\n        children.skipNonCode();\n\n        let init = null;\n\n        if (!children.isToken('Punctuator', ';')) {\n            if (children.isNode('VariableDeclaration')) {\n                init = children.currentElement;\n                children.moveNext();\n            } else {\n                init = children.passExpression();\n            }\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', ';');\n        children.skipNonCode();\n\n        let test = null;\n        if (!children.isToken('Punctuator', ';')) {\n            test = children.passExpression();\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', ';');\n        children.skipNonCode();\n\n        let update = null;\n        if (!children.isToken('Punctuator', ')')) {\n            update = children.passExpression();\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', ')');\n        children.skipNonCode();\n\n        let body = children.passStatement();\n\n        children.assertEnd();\n\n        this.init = init;\n        this.test = test;\n        this.update = update;\n        this.body = body;\n    }\n}\n"]}