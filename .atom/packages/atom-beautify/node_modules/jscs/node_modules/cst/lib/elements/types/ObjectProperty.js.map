{"version":3,"sources":["../../../src/elements/types/ObjectProperty.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB;;;AACjB,aADiB,cACjB,CAAY,UAAZ,EAAwB;4CADP,gBACO;4FADP,2BAEP,kBAAkB,aADJ;KAAxB;;+BADiB;;wCAKD,UAAU;AACtB,gBAAI,YAAJ,CADsB;AAEtB,gBAAI,cAAJ,CAFsB;AAGtB,gBAAI,YAAY,KAAZ,CAHkB;AAItB,gBAAI,WAAW,KAAX,CAJkB;;AAMtB,uBAAW,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAX,CANsB;AAOtB,kBAAM,QAAQ,QAAR,CAAN,CAPsB;;AAStB,gBAAI,SAAS,KAAT,IAAkB,IAAI,IAAJ,KAAa,YAAb,EAA2B;AAC7C,4BAAY,IAAZ,CAD6C;AAE7C,wBAAQ,GAAR,CAF6C;aAAjD,MAGO;AACH,yBAAS,WAAT,GADG;AAEH,oBAAI,SAAS,MAAT,CAAgB,oBAAhB,CAAJ,EAA2C;AACvC,4BAAQ,SAAS,QAAT,CAAkB,oBAAlB,CAAR,CADuC;iBAA3C,MAEO;AACH,6BAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EADG;AAEH,6BAAS,WAAT,GAFG;AAGH,wBAAI,SAAS,cAAT,CAAwB,SAAxB,EAAmC;AACnC,gCAAQ,SAAS,WAAT,EAAR,CADmC;qBAAvC,MAEO;AACH,gCAAQ,SAAS,cAAT,EAAR,CADG;qBAFP;iBALJ;aALJ;;AAkBA,qBAAS,SAAT,GA3BsB;;AA6BtB,iBAAK,GAAL,GAAW,GAAX,CA7BsB;AA8BtB,iBAAK,KAAL,GAAa,KAAb,CA9BsB;AA+BtB,iBAAK,SAAL,GAAiB,SAAjB,CA/BsB;AAgCtB,iBAAK,QAAL,GAAgB,QAAhB,CAhCsB;;;WALT;;;;;;AAyCrB,SAAS,OAAT,CAAiB,QAAjB,EAA2B;AACvB,QACI,SAAS,MAAT,CAAgB,eAAhB,KACA,SAAS,MAAT,CAAgB,gBAAhB,CADA,IAEA,SAAS,MAAT,CAAgB,YAAhB,CAFA,EAGF;AACE,eAAO,SAAS,QAAT,EAAP,CADF;KAJF,MAMO;AACH,iBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EADG;AAEH,iBAAS,WAAT,GAFG;AAGH,YAAI,SAAS,SAAS,cAAT,EAAT,CAHD;AAIH,iBAAS,WAAT,GAJG;AAKH,iBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EALG;AAMH,eAAO,MAAP,CANG;KANP;CADJ","file":"ObjectProperty.js","sourcesContent":["import Node from '../Node';\n\nexport default class ObjectProperty extends Node {\n    constructor(childNodes) {\n        super('ObjectProperty', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let key;\n        let value;\n        let shorthand = false;\n        let computed = false;\n\n        computed = children.isToken('Punctuator', '[');\n        key = readKey(children);\n\n        if (children.isEnd && key.type === 'Identifier') {\n            shorthand = true;\n            value = key;\n        } else {\n            children.skipNonCode();\n            if (children.isNode('FunctionExpression')) {\n                value = children.passNode('FunctionExpression');\n            } else {\n                children.passToken('Punctuator', ':');\n                children.skipNonCode();\n                if (children.currentElement.isPattern) {\n                    value = children.passPattern();\n                } else {\n                    value = children.passExpression();\n                }\n            }\n        }\n\n        children.assertEnd();\n\n        this.key = key;\n        this.value = value;\n        this.shorthand = shorthand;\n        this.computed = computed;\n    }\n}\n\nfunction readKey(children) {\n    if (\n        children.isNode('StringLiteral') ||\n        children.isNode('NumericLiteral') ||\n        children.isNode('Identifier')\n    ) {\n        return children.passNode();\n    } else {\n        children.passToken('Punctuator', '[');\n        children.skipNonCode();\n        let result = children.passExpression();\n        children.skipNonCode();\n        children.passToken('Punctuator', ']');\n        return result;\n    }\n}\n"]}