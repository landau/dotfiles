{"version":3,"sources":["../../../src/elements/types/Program.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;AACA;;;;;;IAEqB;;;AACjB,aADiB,OACjB,CAAY,UAAZ,EAAoC;4CADnB,SACmB;;iGADnB,oBAEP,WAAW,aADe;;AAGhC,cAAK,UAAL,GAAkB,IAAlB,CAHgC;AAIhC,cAAK,SAAL,GAAiB,wBAAjB,CAJgC;AAKhC,cAAK,SAAL,CAAe,WAAf,CAA2B,UAA3B,EALgC;AAMhC,cAAK,eAAL,GAAuB,EAAvB,CANgC;;KAApC;;+BADiB;;uCAgBF,SAAsC;AACjD,iBAAK,OAAL,GAAe,OAAf,CADiD;;;;wCAIrC,UAAyB;AACrC,gBAAI,SAAS,OAAT,CAAiB,UAAjB,CAAJ,EAAkC;AAC9B,yBAAS,SAAT,CAAmB,UAAnB,EAD8B;aAAlC;;AAIA,qBAAS,WAAT,GALqC;;AAOrC,gBAAI,aAAa,EAAb,CAPiC;AAQrC,mBAAO,SAAS,MAAT,CAAgB,WAAhB,CAAP,EAAqC;AACjC,2BAAW,IAAX,CAAgB,SAAS,QAAT,EAAhB,EADiC;AAEjC,yBAAS,WAAT,GAFiC;aAArC;;AAKA,gBAAI,OAAO,EAAP,CAbiC;AAcrC,mBAAO,SAAS,WAAT,EAAP,EAA+B;AAC3B,qBAAK,IAAL,CAAU,SAAS,aAAT,EAAV,EAD2B;AAE3B,yBAAS,WAAT,GAF2B;aAA/B;;AAKA,qBAAS,SAAT,CAAmB,KAAnB,EAnBqC;AAoBrC,qBAAS,SAAT,GApBqC;;AAsBrC,iBAAK,IAAL,GAAY,IAAZ,CAtBqC;AAuBrC,iBAAK,UAAL,GAAkB,UAAlB,CAvBqC;;;;;;;;;;;;0CAgCvB,MAA2B;AACzC,mBAAO,KAAK,SAAL,CAAe,iBAAf,CAAiC,IAAjC,CAAP,CADyC;;;;;;;;;;;;2CAU1B,MAA4B;AAC3C,mBAAO,KAAK,SAAL,CAAe,kBAAf,CAAkC,IAAlC,CAAP,CAD2C;;;;8CAIzB,UAA0B;AAC5C,iBAAK,SAAL,CAAe,WAAf,CAA2B,QAA3B,EAD4C;AAE5C,iBAAK,KAAL,CAAW,cAAX,EAA2B,QAA3B,EAF4C;;;;mDAKrB,UAA0B;AACjD,iBAAK,SAAL,CAAe,cAAf,CAA8B,QAA9B,EADiD;AAEjD,iBAAK,KAAL,CAAW,iBAAX,EAA8B,QAA9B,EAFiD;;;;2BAKlD,WAAmB,UAAoB;AACtC,gBAAI,KAAK,eAAL,CAAqB,SAArB,CAAJ,EAAqC;AACjC,qBAAK,eAAL,CAAqB,SAArB,EAAgC,IAAhC,CAAqC,QAArC,EADiC;aAArC,MAEO;AACH,qBAAK,eAAL,CAAqB,SAArB,IAAkC,CAAC,QAAD,CAAlC,CADG;aAFP;;;;4BAOA,WAAmB,UAAoB;AACvC,gBAAI,KAAK,eAAL,CAAqB,SAArB,CAAJ,EAAqC;AACjC,qBAAK,eAAL,CAAqB,SAArB,IAAkC,KAAK,eAAL,CAAqB,SAArB,EAAgC,MAAhC,CAAuC,UAAC,OAAD,EAAa;AAClF,2BAAO,aAAa,OAAb,CAD2E;iBAAb,CAAzE,CADiC;aAArC;;;;8BAOE,WAAmB,MAAW;AAChC,gBAAI,WAAW,KAAK,eAAL,CAAqB,SAArB,CAAX,CAD4B;AAEhC,gBAAI,QAAJ,EAAc;AACV,qBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,SAAS,MAAT,EAAiB,GAArC,EAA0C;AACtC,6BAAS,CAAT,EAAY,IAAZ,EADsC;iBAA1C;aADJ;;;WA9Fa;;;;AAoGpB","file":"Program.js","sourcesContent":["/* @flow */\n\nimport type Token from '../Token';\nimport type Node from '../Node';\nimport type Element from '../Element';\nimport type ElementAssert from '../ElementAssert';\nimport type BasePlugin from '../../plugins/BasePlugin';\nimport Statement from '../Statement';\nimport Traverse from '../../Traverse';\n\nexport default class Program extends Statement {\n    constructor(childNodes: Array<any>) {\n        super('Program', childNodes);\n\n        this._isProgram = true;\n        this._traverse = new Traverse();\n        this._traverse.addElements(childNodes);\n        this._eventListeners = {};\n    }\n\n    _eventListeners: {[key: string]: Function[]};\n    _traverse: Traverse;\n    _body: Array<any>;\n    _isProgram: boolean;\n    plugins: {[key: string]: BasePlugin};\n\n    _acceptPlugins(plugins: {[key: string]: BasePlugin}) {\n        this.plugins = plugins;\n    }\n\n    _acceptChildren(children: ElementAssert) {\n        if (children.isToken('Hashbang')) {\n            children.passToken('Hashbang');\n        }\n\n        children.skipNonCode();\n\n        let directives = [];\n        while (children.isNode('Directive')) {\n            directives.push(children.passNode());\n            children.skipNonCode();\n        }\n\n        let body = [];\n        while (children.isStatement()) {\n            body.push(children.passStatement());\n            children.skipNonCode();\n        }\n\n        children.passToken('EOF');\n        children.assertEnd();\n\n        this.body = body;\n        this.directives = directives;\n    }\n\n    /**\n     * Returns node list with specified type from the tree.\n     *\n     * @param {String} type\n     * @returns {Node[]}\n     */\n    selectNodesByType(type: string): Array<Node> {\n        return this._traverse.selectNodesByType(type);\n    }\n\n    /**\n     * Returns tokens list with specified type from the tree.\n     *\n     * @param {String} type\n     * @returns {Token[]}\n     */\n    selectTokensByType(type: string): Array<Token> {\n        return this._traverse.selectTokensByType(type);\n    }\n\n    _addElementsToProgram(elements: Array<Element>) {\n        this._traverse.addElements(elements);\n        this._emit('elements-add', elements);\n    }\n\n    _removeElementsFromProgram(elements: Array<Element>) {\n        this._traverse.removeElements(elements);\n        this._emit('elements-remove', elements);\n    }\n\n    on(eventName: string, callback: Function) {\n        if (this._eventListeners[eventName]) {\n            this._eventListeners[eventName].push(callback);\n        } else {\n            this._eventListeners[eventName] = [callback];\n        }\n    }\n\n    off(eventName: string, callback: Function) {\n        if (this._eventListeners[eventName]) {\n            this._eventListeners[eventName] = this._eventListeners[eventName].filter((handler) => {\n                return callback !== handler;\n            });\n        }\n    }\n\n    _emit(eventName: string, data: any) {\n        var handlers = this._eventListeners[eventName];\n        if (handlers) {\n            for (let i = 0; i < handlers.length; i++) {\n                handlers[i](data);\n            }\n        }\n    }\n};\n"]}