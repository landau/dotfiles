{"version":3,"sources":["../../../src/elements/types/RegExpLiteral.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB;;;AACjB,aADiB,aACjB,CAAY,UAAZ,EAAwB;4CADP,eACO;4FADP,0BAEP,iBAAiB,aADH;KAAxB;;+BADiB;;wCAKD,UAAU;AACtB,qBAAS,WAAT,CAAqB,mBAArB,EADsB;AAEtB,gBAAI,UAAU,SAAS,cAAT,CAAwB,KAAxB,CAA8B,OAA9B,CAFQ;AAGtB,gBAAI,QAAQ,SAAS,cAAT,CAAwB,KAAxB,CAA8B,KAA9B,CAHU;AAItB,gBAAI,QAAQ;AACR,0BAAU,SAAV;AACA,qBAAK,SAAS,cAAT,CAAwB,aAAxB,EAAL;aAFA,CAJkB;;AAStB,qBAAS,QAAT,GATsB;AAUtB,qBAAS,SAAT,GAVsB;;AAYtB,iBAAK,KAAL,GAAa,KAAb,CAZsB;AAatB,iBAAK,OAAL,GAAe,OAAf,CAbsB;AActB,iBAAK,KAAL,GAAa,KAAb,CAdsB;;;WALT","file":"RegExpLiteral.js","sourcesContent":["import Expression from '../Expression';\n\nexport default class RegExpLiteral extends Expression {\n    constructor(childNodes) {\n        super('RegExpLiteral', childNodes);\n    }\n\n    _acceptChildren(children) {\n        children.assertToken('RegularExpression');\n        let pattern = children.currentElement.value.pattern;\n        let flags = children.currentElement.value.flags;\n        let extra = {\n            rawValue: undefined,\n            raw: children.currentElement.getSourceCode()\n        };\n\n        children.moveNext();\n        children.assertEnd();\n\n        this.extra = extra;\n        this.pattern = pattern;\n        this.flags = flags;\n    }\n}\n"]}