{"version":3,"sources":["../../../src/elements/types/SequenceExpression.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB;;;;;;AAIjB,aAJiB,kBAIjB,CAAY,UAAZ,EAAwB;4CAJP,oBAIO;4FAJP,+BAKP,sBAAsB,aADR;KAAxB;;+BAJiB;;wCAQD,UAAU;AACtB,gBAAI,cAAc,EAAd,CADkB;;AAGtB,wBAAY,IAAZ,CAAiB,SAAS,cAAT,EAAjB,EAHsB;AAItB,qBAAS,WAAT,GAJsB;;AAMtB,eAAG;AACC,yBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EADD;AAEC,yBAAS,WAAT,GAFD;AAGC,4BAAY,IAAZ,CAAiB,SAAS,cAAT,EAAjB,EAHD;AAIC,yBAAS,WAAT,GAJD;aAAH,QAKS,CAAC,SAAS,KAAT,EAXY;;AAatB,qBAAS,SAAT,GAbsB;;AAetB,iBAAK,WAAL,GAAmB,WAAnB,CAfsB;;;WART","file":"SequenceExpression.js","sourcesContent":["import Expression from '../Expression';\n\nexport default class SequenceExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"a + b\" before \" * b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('SequenceExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let expressions = [];\n\n        expressions.push(children.passExpression());\n        children.skipNonCode();\n\n        do {\n            children.passToken('Punctuator', ',');\n            children.skipNonCode();\n            expressions.push(children.passExpression());\n            children.skipNonCode();\n        } while (!children.isEnd);\n\n        children.assertEnd();\n\n        this.expressions = expressions;\n    }\n}\n"]}