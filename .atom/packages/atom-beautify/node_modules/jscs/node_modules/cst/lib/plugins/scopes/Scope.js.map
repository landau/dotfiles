{"version":3,"sources":["../../../src/plugins/scopes/Scope.js"],"names":[],"mappings":"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","file":"Scope.js","sourcesContent":["/* @flow */\n\nimport type Node from '../../elements/Node';\nimport Reference from './Reference';\nimport Variable from './Variable';\nimport {default as Definition, types, typeOrder} from './Definition';\nimport toArray from '../../utils/toArray';\n\nexport default class Scope {\n    constructor(scopeInfo: ScopeInfo) {\n        let {node, parentScope, isProgramScope, isFunctionScope, isClassScope, isArrowFunctionScope} = scopeInfo;\n\n        this.node = node;\n        this.parentScope = parentScope;\n        if (parentScope) {\n            parentScope.childScopes.push(this);\n            this._depth = parentScope._depth + 1;\n        } else {\n            this._depth = 0;\n        }\n        this.childScopes = [];\n        this._variables = new Map();\n        this._references = new Map();\n        this._isProgramScope = Boolean(isProgramScope);\n        this._isFunctionScope = Boolean(isFunctionScope);\n        this._isClassScope = Boolean(isClassScope);\n        this._isArrowFunctionScope = Boolean(isArrowFunctionScope);\n\n        if (isProgramScope) {\n            this._programReferences = new Map();\n            this._programDefinitions = new Map();\n        }\n    }\n\n    _isProgramScope: boolean;\n    _isFunctionScope: boolean;\n    _isClassScope: boolean;\n    _isArrowFunctionScope: boolean;\n    node: Node;\n    _depth: number;\n    parentScope: ?Scope;\n    childScopes: Scope[];\n    _variables: Map<string, Variable[]>;\n    _references: Map<string, Reference[]>;\n\n    _programReferences: Map<Node, Reference>;\n    _programDefinitions: Map<Node, Definition>;\n\n    _addVariable(variable: Variable) {\n        let variables = this._variables.get(variable.name);\n        if (variables) {\n            variables.push(variable);\n            variables.sort((variable1: Variable, variable2: Variable) => {\n                let typeOrder1 = typeOrder[variable1.type];\n                let typeOrder2 = typeOrder[variable2.type];\n                if (typeOrder1 > typeOrder2) {\n                    return 1;\n                }\n                if (typeOrder1 < typeOrder2) {\n                    return -1;\n                }\n                return 0;\n            });\n        } else {\n            this._variables.set(variable.name, [variable]);\n        }\n    }\n\n    _addDefinition(definitionInfo: DefinitionInfo) {\n        let {node, name, type} = definitionInfo;\n        if (type === types.Variable) {\n            if (!this._isFunctionScope && this.parentScope) {\n                this.parentScope._addDefinition(definitionInfo);\n                return;\n            }\n        }\n\n        let variables = this._variables.get(name) || [];\n        let variable: ?Variable;\n        for (let item of variables) {\n            if (item.type === type) {\n                variable = item;\n                break;\n            }\n        }\n\n        if (!variable) {\n            variable = new Variable({name, type, scope: this});\n            this._adjustReferencesOnVariableAdd(variable);\n            this._addVariable(variable);\n        }\n\n        let definition = new Definition({node, type, scope: this});\n\n        variable._addDefinition(definition);\n\n        let programScope = this._getProgramScope();\n        if (programScope) {\n            programScope._programDefinitions.set(node, definition);\n        }\n    }\n\n    _removeDefinition(definition: Definition) {\n        let variable = definition.variable;\n\n        variable._removeDefinition(definition);\n\n        if (\n            variable._definitions.size === 0 &&\n            (\n                variable.type === 'LetVariable' ||\n                variable.type === 'Constant' ||\n                variable.type === 'Variable' ||\n                variable.type === 'Parameter' ||\n                variable.type === 'SelfReference' ||\n                variable.type === 'CatchClauseError' ||\n                variable.type === 'ImportBinding'\n            )\n        ) {\n            removeVariable(variable);\n        }\n\n        let programScope = this._getProgramScope();\n        if (programScope) {\n            programScope._programDefinitions.delete(definition.node);\n        }\n    }\n\n    _adjustReferencesOnVariableAdd(variable: Variable) {\n        let depth = variable.scope._depth;\n        let references = this._references.get(variable.name);\n        if (references) {\n            for (let reference of references) {\n                let refVar = reference.variable;\n                let varDepth = refVar.scope._depth;\n                if (varDepth === depth) {\n                    if (typeOrder[variable.type] < typeOrder[refVar.type]) {\n                        refVar._transferReferences(variable);\n                        removeVariableIfRequired(refVar);\n                    }\n                } else if (varDepth < depth) {\n                    refVar._references.delete(reference);\n                    variable._addReference(reference);\n                    reference.variable = variable;\n                    removeVariableIfRequired(refVar);\n                }\n            }\n        }\n\n        for (let childScope of this.childScopes) {\n            childScope._adjustReferencesOnVariableAdd(variable);\n        }\n    }\n\n    _addReference(referenceInfo: ReferenceInfo) {\n        let {name} = referenceInfo;\n        let reference = new Reference({scope: this, ...referenceInfo});\n        this._assignReference(reference, name);\n        let references = this._references.get(name);\n        if (references) {\n            references.push(reference);\n        } else {\n            this._references.set(name, [reference]);\n        }\n\n        let programScope = this._getProgramScope();\n        if (programScope) {\n            programScope._programReferences.set(reference.node, reference);\n        }\n    }\n\n    _assignReference(reference: Reference, name: string) {\n        let currentScope = this;\n        do {\n            let variables = currentScope._variables.get(name);\n            if (variables) {\n                if (reference.type) {\n                    for (let variable of variables) {\n                        if (variable.type === reference.type) {\n                            variable._addReference(reference);\n                            return;\n                        }\n                    }\n                } else {\n                    variables[0]._addReference(reference);\n                    return;\n                }\n            }\n            if (!currentScope.parentScope) {\n                let globalVariable = new Variable({\n                    name, type: types.ImplicitGlobal, scope: currentScope\n                });\n                globalVariable._addReference(reference);\n                currentScope._addVariable(globalVariable);\n                return;\n            } else {\n                if (\n                    (\n                        (name === 'arguments' || name === 'this') &&\n                        currentScope._isFunctionScope &&\n                        !currentScope._isArrowFunctionScope &&\n                        !currentScope._isProgramScope\n                    ) ||\n                    (\n                        name === 'super' && currentScope._isClassScope\n                    )\n                ) {\n                    let builtInVariable = new Variable({\n                        name, type: types.BuiltIn, scope: currentScope\n                    });\n                    builtInVariable._addReference(reference);\n                    currentScope._addVariable(builtInVariable);\n                    return;\n                }\n                currentScope = currentScope.parentScope;\n            }\n        } while (true);\n    }\n\n    _removeReference(reference: Reference) {\n        let variable = reference.variable;\n        let name = variable.name;\n        let references = this._references.get(name);\n        if (references) {\n            let index = references.indexOf(reference);\n            if (index !== -1) {\n                references.splice(index, 1);\n            }\n        }\n        variable._removeReference(reference);\n        if (\n            variable._references.size === 0 &&\n            (\n                variable.type === 'ImplicitGlobal' ||\n                variable.type === 'BuiltIn'\n            )\n        ) {\n            removeVariable(variable);\n        }\n\n        let programScope = this._getProgramScope();\n        if (programScope) {\n            programScope._programReferences.delete(reference.node);\n        }\n    }\n\n    _getProgramScope(): ?Scope {\n        let scope = this;\n        while (scope && !scope._isProgramScope) {\n            scope = scope.parentScope;\n        }\n        return scope;\n    }\n\n    getVariables(): Variable[] {\n        return [].concat.apply([], toArray(this._variables.values()));\n    }\n\n    getReferences(): Reference[] {\n        return [].concat.apply([], toArray(this._references.values()));\n    }\n\n    destroy() {\n        let parentScope = this.parentScope;\n        if (parentScope) {\n            let scopeIndex = parentScope.childScopes.indexOf(this);\n            if (scopeIndex !== -1) {\n                parentScope.childScopes.splice(scopeIndex, 1);\n            }\n        }\n        this.getReferences().forEach(this._removeReference, this);\n    }\n}\n\nfunction removeVariableIfRequired(variable: Variable) {\n    if (variable._references.size === 0 && variable._definitions.size === 0) {\n        let variables = variable.scope._variables.get(variable.name);\n        if (variables) {\n            let index = variables.indexOf(variable);\n\n            if (index !== -1) {\n                variables.splice(index, 1);\n            }\n\n            if (variables.length === 0) {\n                variable.scope._variables.delete(variable.name);\n            }\n        }\n    }\n}\n\nfunction removeVariable(variable: Variable) {\n    let scope = variable.scope;\n    let variables = scope._variables.get(variable.name);\n\n    if (variables) {\n        let index = variables.indexOf(variable);\n        if (index !== -1) {\n            variables.splice(index, 1);\n            if (variables.length === 0) {\n                scope._variables.delete(variable.name);\n            }\n            for (var reference of variable._references) {\n                reference.scope._assignReference(reference, variable.name);\n            }\n        }\n    }\n}\n\nexport type ReferenceInfo = {\n    node: Node,\n    name: string,\n    read: boolean,\n    write: boolean,\n    type?: string\n};\n\nexport type DefinitionInfo = {\n    node: Node,\n    name: string,\n    type: string\n};\n\nexport type ScopeInfo = {\n    node: Node,\n    parentScope: ?Scope,\n    isProgramScope?: boolean,\n    isFunctionScope?: boolean,\n    isClassScope?: boolean,\n    isArrowFunctionScope?: boolean\n};\n"]}