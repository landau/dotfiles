{"version":3,"sources":["../../../src/plugins/scopes/ScopesApi.js"],"names":[],"mappings":"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","file":"ScopesApi.js","sourcesContent":["/* @flow */\nimport type Variable from './Variable';\nimport type Reference from './Reference';\nimport type Definition from './Definition';\nimport type Element from '../../elements/Element';\nimport Token from '../../elements/Token';\nimport Node from '../../elements/Node';\nimport Program from '../../elements/types/Program';\nimport BlockStatement from '../../elements/types/BlockStatement';\nimport Identifier from '../../elements/types/Identifier';\nimport Scope from './Scope';\nimport type {ReferenceInfo, DefinitionInfo, ScopeInfo} from './Scope';\nimport AssignmentPattern from '../../elements/types/AssignmentPattern';\nimport FunctionExpression from '../../elements/types/FunctionExpression';\nimport FunctionDeclaration from '../../elements/types/FunctionDeclaration';\nimport ArrowFunctionExpression from '../../elements/types/ArrowFunctionExpression';\nimport VariableDeclarator from '../../elements/types/VariableDeclarator';\nimport VariableDeclaration from '../../elements/types/VariableDeclaration';\nimport AssignmentExpression from '../../elements/types/AssignmentExpression';\nimport UpdateExpression from '../../elements/types/UpdateExpression';\nimport ForOfStatement from '../../elements/types/ForOfStatement';\nimport ForInStatement from '../../elements/types/ForInStatement';\nimport MemberExpression from '../../elements/types/MemberExpression';\nimport ObjectProperty from '../../elements/types/ObjectProperty';\nimport ObjectMethod from '../../elements/types/ObjectMethod';\nimport ImportDefaultSpecifier from '../../elements/types/ImportDefaultSpecifier';\nimport ImportNamespaceSpecifier from '../../elements/types/ImportNamespaceSpecifier';\nimport ImportSpecifier from '../../elements/types/ImportSpecifier';\nimport ThisExpression from '../../elements/types/ThisExpression';\nimport Super from '../../elements/types/Super';\nimport CatchClause from '../../elements/types/CatchClause';\nimport LabeledStatement from '../../elements/types/LabeledStatement';\nimport BreakStatement from '../../elements/types/BreakStatement';\nimport ContinueStatement from '../../elements/types/ContinueStatement';\nimport ClassExpression from '../../elements/types/ClassExpression';\nimport ClassDeclaration from '../../elements/types/ClassDeclaration';\nimport ClassMethod from '../../elements/types/ClassMethod';\nimport JSXIdentifier from '../../elements/types/JSXIdentifier';\nimport JSXAttribute from '../../elements/types/JSXAttribute';\nimport JSXElement from '../../elements/types/JSXElement';\nimport JSXMemberExpression from '../../elements/types/JSXMemberExpression';\nimport JSXNamespacedName from '../../elements/types/JSXNamespacedName';\nimport {types} from './Definition';\n\nconst scopedBlocks = {\n    'ForStatement': true,\n    'ForInStatement': true,\n    'ForOfStatement': true,\n    'SwitchStatement': true,\n    'CatchClause': true\n};\n\nexport default class ScopesApi {\n    constructor(program: Program) {\n        program.on('elements-add', (elements: Element[]) => {\n            elements.map(this._addElement, this);\n        });\n        program.on('elements-remove', (elements: Element[]) => {\n            elements.map(this._removeElement, this);\n        });\n        this._scopesMap = new Map();\n        this._program = program;\n        this._addElement(program);\n        this.acquire(this._program);\n    }\n\n    _program: Program;\n    _programScope: Scope;\n    _scopesMap: Map<Element, Scope>;\n\n    _addElement(element: Element) {\n        if (element instanceof Node) {\n            let nodes = buildNodeList((element: Node));\n            for (let i = 0; i < nodes.length; i++) {\n                this._addNode(nodes[i]);\n            }\n        }\n        this._updateTokenIfNecessary(element);\n    }\n\n    _removeElement(element: Element) {\n        if (element instanceof Node) {\n            let nodes = buildNodeList((element: Node));\n            for (let i = 0; i < nodes.length; i++) {\n                this._removeNode(nodes[i]);\n            }\n        }\n        this._updateTokenIfNecessary(element);\n    }\n\n    _updateTokenIfNecessary(element: Element) {\n        if (element instanceof Token) {\n            let parentElement = element.parentElement;\n            if (parentElement) {\n                if (element.type === 'Identifier') {\n                    this._removeElement(parentElement);\n                    this._addElement(parentElement);\n                    return;\n                }\n                if (\n                    element.type === 'Punctuator' &&\n                    element.value === ':' &&\n                    parentElement instanceof ObjectProperty\n                ) {\n                    this._removeElement(parentElement);\n                    this._addElement(parentElement);\n                    return;\n                }\n            }\n        }\n    }\n\n    _addNode(node: Node): void {\n        if (node instanceof Program) {\n            return this._addProgram(node);\n        }\n\n        if (node instanceof FunctionExpression) {\n            return this._addFunctionExpression(node);\n        }\n\n        if (node instanceof FunctionDeclaration) {\n            return this._addFunctionDeclaration(node);\n        }\n\n        if (node instanceof ArrowFunctionExpression) {\n            return this._addArrowFunctionExpression(node);\n        }\n\n        if (node instanceof ObjectMethod) {\n            return this._addObjectMethod(node);\n        }\n\n        if (node instanceof ClassDeclaration) {\n            return this._addClassDeclaration(node);\n        }\n\n        if (node instanceof ClassExpression) {\n            return this._addClassExpression(node);\n        }\n\n        if (node instanceof ClassMethod) {\n            return this._addClassMethod(node);\n        }\n\n        if (node.type in scopedBlocks) {\n            return this._addScopedBlock(node);\n        }\n\n        if (node instanceof BlockStatement) {\n            return this._addBlockStatement(node);\n        }\n\n        if (node instanceof ThisExpression) {\n            return this._addThisExpression(node);\n        }\n\n        if (node instanceof Super) {\n            return this._addSuper(node);\n        }\n\n        if (node instanceof Identifier) {\n            return this._addIdentifier(node);\n        }\n\n        if (node instanceof JSXIdentifier) {\n            return this._addJSXIdentifier(node);\n        }\n    }\n\n    _addProgram(node: Program) {\n        this._programScope = this._addScope({\n            node,\n            parentScope: undefined,\n            isFunctionScope: true,\n            isProgramScope: true\n        });\n    }\n\n    _addClassExpression(node: ClassExpression) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isClassScope: true\n        });\n    }\n\n    _addClassDeclaration(node: ClassDeclaration) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isClassScope: true\n        });\n    }\n\n    _addClassMethod(node: ClassMethod) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true\n        });\n    }\n\n    _addFunctionExpression(node: FunctionExpression) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true\n        });\n    }\n\n    _addObjectMethod(node: ObjectMethod) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true\n        });\n    }\n\n    _addFunctionDeclaration(node: FunctionDeclaration) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true\n        });\n    }\n\n    _addArrowFunctionExpression(node: ArrowFunctionExpression) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true,\n            isArrowFunctionScope: true\n        });\n    }\n\n    _addScopedBlock(node: Node) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node)\n        });\n    }\n\n    _addBlockStatement(node: BlockStatement) {\n        let parentElement = node.parentElement;\n        if (\n            parentElement &&\n            (\n                parentElement.type === 'ForStatement' ||\n                parentElement.type === 'ForInStatement' ||\n                parentElement.type === 'ForOfStatement' ||\n                parentElement.type === 'CatchClause' ||\n                parentElement.type === 'ArrowFunctionExpression' ||\n                parentElement.type === 'FunctionExpression' ||\n                parentElement.type === 'FunctionDeclaration'\n            )\n        ) {\n            return;\n        }\n        this._addScope({\n            node,\n            parentScope: this._getScopeFor(parentElement)\n        });\n    }\n\n    _removeBlockStatement(node: BlockStatement) {\n        let parentElement = node.parentElement;\n        if (\n            parentElement &&\n            (\n                parentElement.type === 'ForStatement' ||\n                parentElement.type === 'ForInStatement' ||\n                parentElement.type === 'ForOfStatement' ||\n                parentElement.type === 'CatchClause' ||\n                parentElement.type === 'ArrowFunctionExpression' ||\n                parentElement.type === 'FunctionExpression' ||\n                parentElement.type === 'FunctionDeclaration'\n            )\n        ) {\n            return;\n        }\n\n        let scope = this._scopesMap.get(node);\n        if (scope) {\n            scope.destroy();\n            this._scopesMap.delete(node);\n        }\n    }\n\n    _addJSXIdentifier(node: JSXIdentifier) {\n        let name = node.name;\n        let scope = this._getScopeFor(node);\n        let parentElement = node.parentElement;\n\n        if (!scope || !parentElement) {\n            return;\n        }\n\n        if (parentElement instanceof JSXAttribute) {\n            if (node === parentElement.name) {\n                return;\n            }\n        }\n\n        if (parentElement instanceof JSXMemberExpression) {\n            if (node === parentElement.property) {\n                return;\n            }\n        }\n\n        if (parentElement instanceof JSXNamespacedName) {\n            if (node === parentElement.name) {\n                return;\n            }\n        }\n\n        this._addReferenceToScope(scope, {node, name, read: true, write: false});\n    }\n\n    _addIdentifier(node: Identifier) {\n        let scope = this._getScopeFor(node);\n        let parentElement = node.parentElement;\n\n        if (!scope || !parentElement) {\n            return;\n        }\n\n        let name = node.name;\n        if (parentElement instanceof ObjectProperty && parentElement.parentElement) {\n            if (node === parentElement.key && !parentElement.shorthand) {\n                if (parentElement.computed) {\n                    this._addReferenceToScope(scope, {node, name, read: true, write: false});\n                }\n                return;\n            }\n        }\n        let topLevelPattern = node;\n        while (topLevelPattern.parentElement) {\n            if (topLevelPattern.parentElement instanceof ObjectProperty) {\n                if (topLevelPattern.parentElement.parentElement.isPattern) {\n                    topLevelPattern = topLevelPattern.parentElement.parentElement;\n                    continue;\n                }\n            }\n            if (topLevelPattern.parentElement instanceof AssignmentPattern) {\n                if (topLevelPattern === topLevelPattern.parentElement.right) {\n                    break;\n                }\n            }\n            if (!topLevelPattern.parentElement.isPattern) {\n                break;\n            }\n            topLevelPattern = topLevelPattern.parentElement;\n        }\n\n        let container = topLevelPattern.parentElement;\n        if (!container) {\n            return;\n        }\n\n        if (\n            container instanceof ClassMethod ||\n            container instanceof ObjectMethod ||\n            container instanceof FunctionExpression ||\n            container instanceof FunctionDeclaration ||\n            container instanceof ArrowFunctionExpression\n        ) {\n            if (container.params.indexOf(topLevelPattern) !== -1) {\n                this._addDefinitionToScope(scope, {node, name, type: types.Parameter});\n                if (topLevelPattern instanceof AssignmentPattern) {\n                    this._addReferenceToScope(scope, {node, name, read: false, write: true, type: types.Parameter});\n                }\n                return;\n            }\n        }\n        if (container instanceof VariableDeclarator) {\n            if (container.id === topLevelPattern) {\n                let type = types.Variable;\n                let variableDeclaration = container.parentElement;\n                if (variableDeclaration && variableDeclaration instanceof VariableDeclaration) {\n                    if (variableDeclaration.kind === 'let') {\n                        type = types.LetVariable;\n                    }\n                    if (variableDeclaration.kind === 'const') {\n                        type = types.Constant;\n                    }\n                    this._addDefinitionToScope(scope, {node, name, type});\n                    let write = container.init ||\n                        variableDeclaration.parentElement instanceof ForOfStatement ||\n                        variableDeclaration.parentElement instanceof ForInStatement;\n                    if (write) {\n                        this._addReferenceToScope(scope, {node, name, read: false, write: true, type});\n                    }\n                }\n                return;\n            }\n        }\n        if (container instanceof CatchClause) {\n            if (container.param === topLevelPattern) {\n                this._addDefinitionToScope(scope, {node, name, type: types.CatchClauseError});\n                return;\n            }\n        }\n        if (container instanceof AssignmentExpression) {\n            if (container.left === topLevelPattern) {\n                this._addReferenceToScope(scope, {node, name, read: container.operator !== '=', write: true});\n                return;\n            }\n        }\n        if (container instanceof UpdateExpression) {\n            if (container.argument === topLevelPattern) {\n                this._addReferenceToScope(scope, {node, name, read: true, write: true});\n                return;\n            }\n        }\n        if (container instanceof MemberExpression) {\n            if (node === container.property && !container.computed) {\n                return;\n            }\n        }\n        if (container instanceof ObjectMethod) {\n            if (node === container.key && !container.computed && !container.shorthand) {\n                return;\n            }\n        }\n        if (container instanceof ClassMethod) {\n            if (node === container.key && !container.computed) {\n                return;\n            }\n        }\n        if (container instanceof ImportDefaultSpecifier) {\n            this._addDefinitionToScope(scope, {node, name, type: types.ImportBinding});\n            return;\n        }\n        if (container instanceof ImportNamespaceSpecifier) {\n            this._addDefinitionToScope(scope, {node, name, type: types.ImportBinding});\n            return;\n        }\n        if (container instanceof ImportSpecifier) {\n            if (container.local === node) {\n                this._addDefinitionToScope(scope, {node, name, type: types.ImportBinding});\n            }\n            return;\n        }\n        if (container instanceof ClassExpression) {\n            if (container.id === node) {\n                this._addDefinitionToScope(scope, {node, name, type: types.SelfReference});\n                this._addReferenceToScope(scope, {\n                    node: node,\n                    name: node.name,\n                    read: false,\n                    write: true,\n                    type: types.SelfReference\n                });\n                return;\n            }\n        }\n        if (container instanceof ClassDeclaration) {\n            if (container.id === node) {\n                let parentScope = this._getParentScopeFor(container);\n                if (parentScope) {\n                    this._addDefinitionToScope(parentScope, {node, name, type: types.LetVariable});\n                    this._addReferenceToScope(parentScope, {\n                        node: node,\n                        name: node.name,\n                        read: false,\n                        write: true,\n                        type: types.LetVariable\n                    });\n                    return;\n                }\n            }\n        }\n        if (container instanceof FunctionDeclaration) {\n            if (node === container.id) {\n                let parentScope = this._getParentScopeFor(container);\n                if (parentScope) {\n                    this._addDefinitionToScope(parentScope, {\n                        node: node,\n                        name: node.name,\n                        type: types.LetVariable\n                    });\n                    this._addReferenceToScope(parentScope, {\n                        node: node,\n                        name: node.name,\n                        read: false,\n                        write: true,\n                        type: types.LetVariable\n                    });\n                }\n                return;\n            }\n        }\n        if (container instanceof FunctionExpression) {\n            if (node === container.id) {\n                this._addDefinitionToScope(scope, {\n                    node: node,\n                    name: node.name,\n                    type: types.SelfReference\n                });\n                this._addReferenceToScope(scope, {\n                    node: node,\n                    name: node.name,\n                    read: false,\n                    write: true,\n                    type: types.SelfReference\n                });\n                return;\n            }\n        }\n        if (container instanceof LabeledStatement) {\n            if (node === container.label) {\n                return;\n            }\n        }\n        if (container instanceof BreakStatement || container instanceof ContinueStatement) {\n            return;\n        }\n        this._addReferenceToScope(scope, {node, name, read: true, write: false});\n    }\n\n    _addThisExpression(node: ThisExpression) {\n        let scope = this._getScopeFor(node);\n        if (scope) {\n            this._addReferenceToScope(scope, {node, name: 'this', read: true, write: false});\n        }\n    }\n\n    _addSuper(node: Super) {\n        let scope = this._getScopeFor(node);\n        if (scope) {\n            this._addReferenceToScope(scope, {node, name: 'super', read: true, write: false});\n        }\n    }\n\n    _removeNode(node: Node) {\n        if (\n            node instanceof FunctionExpression ||\n            node instanceof FunctionDeclaration ||\n            node instanceof ArrowFunctionExpression ||\n            node instanceof ClassDeclaration ||\n            node instanceof ClassExpression ||\n            node.type in scopedBlocks\n        ) {\n            let scope = this._scopesMap.get(node);\n            if (scope) {\n                scope.destroy();\n                this._scopesMap.delete(node);\n            }\n        }\n\n        if (node instanceof BlockStatement) {\n            return this._removeBlockStatement(node);\n        }\n\n        if (\n            node instanceof ThisExpression ||\n            node instanceof Super ||\n            node instanceof Identifier ||\n            node instanceof JSXIdentifier\n        ) {\n            let reference = this._programScope._programReferences.get(node);\n            if (reference) {\n                reference.scope._removeReference(reference);\n            }\n            let definition = this._programScope._programDefinitions.get(node);\n            if (definition) {\n                definition.scope._removeDefinition(definition);\n            }\n        }\n    }\n\n    _addReferenceToScope(scope: Scope, referenceInfo: ReferenceInfo) {\n        let reference = this._programScope._programReferences.get(referenceInfo.node);\n        if (!reference) {\n            scope._addReference(referenceInfo);\n        }\n    }\n\n    _addDefinitionToScope(scope: Scope, definitionInfo: DefinitionInfo) {\n        let definition = this._programScope._programDefinitions.get(definitionInfo.node);\n        if (!definition) {\n            scope._addDefinition(definitionInfo);\n        }\n    }\n\n    _addScope(scopeInfo: ScopeInfo): Scope {\n        let scope = this._scopesMap.get(scopeInfo.node);\n        if (!scope) {\n            scope = new Scope(scopeInfo);\n            this._scopesMap.set(scopeInfo.node, scope);\n        }\n        return scope;\n    }\n\n    _getParentScopeFor(element: Element): ?Scope {\n        return this._getScopeFor(element.parentElement);\n    }\n\n    _getScopeFor(element: ?Element): ?Scope {\n        while (element) {\n            let scope = this._scopesMap.get(element);\n            if (scope) {\n                return scope;\n            }\n            element = element.parentElement;\n        }\n        return null;\n    }\n\n    acquire(element: Node): ?Scope {\n        return this._scopesMap.get(element);\n    }\n\n    findReference(node: Node): ?Reference {\n        return this._programScope._programReferences.get(node);\n    }\n\n    findDefinition(node: Node): ?Definition {\n        return this._programScope._programDefinitions.get(node);\n    }\n\n    findVariable(node: Node): ?Variable {\n        let reference = this._programScope._programReferences.get(node);\n        if (reference) {\n            return reference.variable;\n        }\n        let definition = this._programScope._programDefinitions.get(node);\n        if (definition) {\n            return definition.variable;\n        }\n    }\n}\n\nfunction buildNodeList(parentNode: Node): Node[] {\n    let result: Node[] = [parentNode];\n    let nodesToProcess: Node[] = [parentNode];\n    while (nodesToProcess.length > 0) {\n        let node = nodesToProcess.shift();\n        let childElements = node.childElements;\n        for (let i = 0; i < childElements.length; i++) {\n            let element = childElements[i];\n            if (element instanceof Node) {\n                result.push(element);\n                nodesToProcess.push(element);\n            }\n        }\n    }\n    return result;\n}\n"]}