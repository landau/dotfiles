'use strict';

var repeatedRegExp = /\[\]$/;
var componentUtil = require('./util');
var attachBubblingEvent = componentUtil._i_;
var extend = require('raptor-util/extend');

/**
 * A ComponentDef is used to hold the metadata collected at runtime for
 * a single component and this information is used to instantiate the component
 * later (after the rendered HTML has been added to the DOM)
 */
function ComponentDef(component, componentId, globalComponentsContext, componentStack, componentStackLen) {
    this._j_ = globalComponentsContext; // The AsyncWriter that this component is associated with
    this._k_ = componentStack;
    this._l_ = componentStackLen;
    this.h_ = component;
    this.id = componentId;

    this.s_ = null; // IDs of root elements if there are multiple root elements
    this._m_ = null; // An array of nested ComponentDef instances
    this._n_ = undefined; // An array of DOM events that need to be added (in sets of three)

    this._o_ = false;

    this._p_ = false;

    this._q_ = 0; // The unique integer to use for the next scoped ID
}

ComponentDef.prototype = {
    _r_: function () {
        this._k_.length = this._l_;
    },

    /**
     * Register a nested component for this component. We maintain a tree of components
     * so that we can instantiate nested components before their parents.
     */
    _s_: function (componentDef) {
        var children = this._m_;

        if (children) {
            children.push(componentDef);
        } else {
            this._m_ = [componentDef];
        }
    },
    /**
     * This helper method generates a unique and fully qualified DOM element ID
     * that is unique within the scope of the current component. This method prefixes
     * the the nestedId with the ID of the current component. If nestedId ends
     * with `[]` then it is treated as a repeated ID and we will generate
     * an ID with the current index for the current nestedId.
     * (e.g. "myParentId-foo[0]", "myParentId-foo[1]", etc.)
     */
    elId: function (nestedId) {
        var id = this.id;
        if (nestedId == null) {
            return id;
        } else {
            if (typeof nestedId == 'string' && repeatedRegExp.test(nestedId)) {
                return this._j_._t_(id, nestedId);
            } else {
                return id + '-' + nestedId;
            }
        }
    },
    /**
     * Registers a DOM event for a nested HTML element associated with the
     * component. This is only done for non-bubbling events that require
     * direct event listeners to be added.
     * @param  {String} type The DOM event type ("mouseover", "mousemove", etc.)
     * @param  {String} targetMethod The name of the method to invoke on the scoped component
     * @param  {String} elId The DOM element ID of the DOM element that the event listener needs to be added too
     */
    e: function (type, targetMethod, elId, extraArgs) {
        if (targetMethod) {
            // The event handler method is allowed to be conditional. At render time if the target
            // method is null then we do not attach any direct event listeners.
            (this._n_ || (this._n_ = [])).push([type, targetMethod, elId, extraArgs]);
        }
    },
    /**
     * Returns the next auto generated unique ID for a nested DOM element or nested DOM component
     */
    _u_: function () {
        var id = this.id;

        return id === null ? this._j_._u_(this.q_) : id + '-c' + this._q_++;
    },

    d: function (handlerMethodName, extraArgs) {
        return attachBubblingEvent(this, handlerMethodName, extraArgs);
    }
};

ComponentDef._v_ = function (o, types, globals, registry) {
    var id = o[0];
    var typeName = types[o[1]];
    var input = o[2];
    var extra = o[3];

    var state = extra.s;
    var componentProps = extra.w;

    var component = typeName /* legacy */ && registry._w_(typeName, id);

    if (extra.b) {
        component.v_ = extra.b;
    }

    // Preview newly created component from being queued for update since we area
    // just building it from the server info
    component.C_ = true;

    if (state) {
        var undefinedPropNames = extra.u;
        if (undefinedPropNames) {
            undefinedPropNames.forEach(function (undefinedPropName) {
                state[undefinedPropName] = undefined;
            });
        }
        // We go through the setter here so that we convert the state object
        // to an instance of `State`
        component.state = state;
    }

    component.y_ = input;

    if (componentProps) {
        extend(component, componentProps);
    }

    var scope = extra.p;
    var customEvents = extra.e;
    if (customEvents) {
        component._g_(customEvents, scope);
    }

    component.A_ = globals;

    return {
        h_: component,
        s_: extra.r,
        _n_: extra.d,
        _p_: extra._ === 1
    };
};

module.exports = ComponentDef;