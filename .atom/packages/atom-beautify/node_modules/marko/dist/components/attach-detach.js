var eventDelegation = require('./event-delegation');
var delegateEvent = eventDelegation._I_;
var getEventFromEl = eventDelegation._J_;

var componentsUtil = require('./util');
var destroyElRecursive = componentsUtil.d_;
var destroyComponentForEl = componentsUtil.c_;

function handleNodeAttach(node, out) {
    if (node.nodeType === 1) {
        var target = getEventFromEl(node, 'onattach');
        if (target) {
            var data = out.data;

            var attachTargets = data._K_;
            if (!attachTargets) {
                attachTargets = data._K_ = [];
                out.on('_d_', function () {
                    for (var i = 0; i < attachTargets.length; i += 2) {
                        var node = attachTargets[i];
                        var target = attachTargets[i + 1];
                        delegateEvent(node, target, {});
                    }
                });
            }

            attachTargets.push(node);
            attachTargets.push(target);
        }
    }
}

function handleNodeDetach(node) {
    if (node.nodeType === 1) {
        var target = getEventFromEl(node, 'ondetach');
        if (target) {
            var allowDetach;

            delegateEvent(node, target, {
                preventDefault: function () {
                    allowDetach = false;
                    destroyComponentForEl(node);
                    destroyElRecursive(node);
                },
                detach: function () {
                    var parentNode = node.parentNode;
                    if (parentNode) {
                        parentNode.removeChild(node);
                    }
                }
            });

            return allowDetach;
        }
    }
}

eventDelegation.p_ = handleNodeAttach;
eventDelegation.m_ = handleNodeDetach;