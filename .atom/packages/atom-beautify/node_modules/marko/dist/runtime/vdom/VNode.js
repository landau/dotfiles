/* jshint newcap:false */
var specialElHandlers = require('../../morphdom/specialElHandlers');

function VNode() {}

VNode.prototype = {
    aL_: function (finalChildCount) {
        this.aY_ = finalChildCount;
        this.aZ_ = 0;
        this.aP_ = null;
        this.b__ = null;
        this.aM_ = null;
        this.aN_ = null;
    },

    get _a_() {
        var firstChild = this.aP_;

        if (firstChild && firstChild.aO_) {
            var nestedFirstChild = firstChild._a_;
            // The first child is a DocumentFragment node.
            // If the DocumentFragment node has a first child then we will return that.
            // Otherwise, the DocumentFragment node is not *really* the first child and
            // we need to skip to its next sibling
            return nestedFirstChild || firstChild._c_;
        }

        return firstChild;
    },

    get _c_() {
        var nextSibling = this.aN_;

        if (nextSibling) {
            if (nextSibling.aO_) {
                var firstChild = nextSibling._a_;
                return firstChild || nextSibling._c_;
            }
        } else {
            var parentNode = this.aM_;
            if (parentNode && parentNode.aO_) {
                return parentNode._c_;
            }
        }

        return nextSibling;
    },

    aD_: function (child) {
        this.aZ_++;

        if (this.aV_) {
            if (child.aH_) {
                var childValue = child.ae_;
                this.aT_ = (this.aT_ || '') + childValue;
            } else {
                throw TypeError();
            }
        } else {
            var lastChild = this.b__;

            child.aM_ = this;

            if (lastChild) {
                lastChild.aN_ = child;
            } else {
                this.aP_ = child;
            }

            this.b__ = child;
        }

        return child;
    },

    aU_: function finishChild() {
        if (this.aZ_ == this.aY_ && this.aM_) {
            return this.aM_.aU_();
        } else {
            return this;
        }
    },

    actualize: function (doc) {
        var actualNode = this.ab_(doc);

        var curChild = this._a_;

        while (curChild) {
            actualNode.appendChild(curChild.actualize(doc));
            curChild = curChild._c_;
        }

        if (this.ac_ === 1) {
            var elHandler = specialElHandlers[this._b_];
            if (elHandler !== undefined) {
                elHandler(actualNode, this);
            }
        }

        return actualNode;
    }

    // ,toJSON: function() {
    //     var clone = Object.assign({
    //         nodeType: this.nodeType
    //     }, this);
    //
    //     for (var k in clone) {
    //         if (k.startsWith('_')) {
    //             delete clone[k];
    //         }
    //     }
    //     delete clone._nextSibling;
    //     delete clone._lastChild;
    //     delete clone.parentNode;
    //     return clone;
    // }
};

module.exports = VNode;