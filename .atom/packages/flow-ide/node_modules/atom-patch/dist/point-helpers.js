"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compare = compare;
exports.isZero = isZero;
exports.isInfinity = isInfinity;
exports.min = min;
exports.traverse = traverse;
exports.traversalDistance = traversalDistance;
exports.format = format;
var ZERO_POINT = Object.freeze({ row: 0, column: 0 });
exports.ZERO_POINT = ZERO_POINT;
var INFINITY_POINT = Object.freeze({ row: Infinity, column: Infinity });

exports.INFINITY_POINT = INFINITY_POINT;

function compare(a, b) {
  if (a.row === b.row) {
    return compareNumbers(a.column, b.column);
  } else {
    return compareNumbers(a.row, b.row);
  }
}

function isZero(point) {
  return point.row === 0 && point.column === 0;
}

function isInfinity(point) {
  return point.row === INFINITY_POINT || point.column === Infinity;
}

function min(a, b) {
  if (compare(a, b) <= 0) {
    return a;
  } else {
    return b;
  }
}

function traverse(start, distance) {
  if (distance.row === 0) {
    return {
      row: start.row,
      column: start.column + distance.column
    };
  } else {
    return {
      row: start.row + distance.row,
      column: distance.column
    };
  }
}

function traversalDistance(end, start) {
  if (end.row === start.row) {
    return { row: 0, column: end.column - start.column };
  } else {
    return { row: end.row - start.row, column: end.column };
  }
}

function format(point) {
  return "(" + point.row + ", " + point.column + ")";
}

function compareNumbers(a, b) {
  if (a < b) {
    return -1;
  } else if (a > b) {
    return 1;
  } else {
    return 0;
  }
}