{"version":3,"sources":["../src/Completion.js"],"names":["logger","Completion","constructor","clientCapabilities","documents","flow","provideCompletionItems","textDocument","position","fileName","parse","uri","fsPath","doc","get","point","prevPoint","traverse","match","buffer","prefix","wordMatch","column","getTextInRange","autocompleteResult","getAutocompleteSuggestions","isIncomplete","items","map","completion","label","atomCompletion","displayText","kind","typeToKind","type","description","documentation","Function","returnDetail","leftLabel","parametersDetail","rightLabel","_returnDetail","_parametersDetail","detail","completionItem","snippetSupport","snippet","insertText","insertTextFormat","Snippet","debug","indexOf","Class","Variable"],"mappings":";;;;;;;;;;AAoBA;;AAEA;;AACA;;;;AACA;;AAIA;;AAEA;;;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,SAAS,uBAAU,YAAV,CAAf,C,CAnCA;;;;;;;;;;;;AA2Ce,MAAMC,UAAN,CAAiB;;AAK9BC,cAAY,EAACC,kBAAD,EAAqBC,SAArB,EAAgCC,IAAhC,EAAZ,EAAqE;AACnE,SAAKF,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAEKC,wBAAN,CAA6B;AAC3BC,gBAD2B;AAE3BC;AAF2B,GAA7B,EAGyD;AAAA;;AAAA;AACvD,YAAMC,WAAW,oBAAIC,KAAJ,CAAUH,aAAaI,GAAvB,EAA4BC,MAA7C;AACA,YAAMC,MAAM,MAAKT,SAAL,CAAeU,GAAf,CAAmBP,aAAaI,GAAhC,CAAZ;AACA,YAAMI,QAAQ,kCAAuBP,QAAvB,CAAd;AACA;AACA,YAAMQ,YAAYD,MAAME,QAAN,CAAe,CAAC,CAAD,EAAI,CAAC,CAAL,CAAf,CAAlB;AACA,YAAMC,QAAQ,qCACZL,IAAIM,MADQ,EAEZH,SAFY,2CAAd;AAKA,UAAII,SAAUF,SAASA,MAAMG,SAAf,IAA4BH,MAAMG,SAAN,CAAgB,CAAhB,CAA7B,IAAoD,EAAjE;AACA;AACA,UACEN,MAAMO,MAAN,KAAiB,CAAjB,IACAT,IAAIM,MAAJ,CAAWI,cAAX,CAA0B,4BAAUP,SAAV,EAAqBD,KAArB,CAA1B,MAA2D,GAF7D,EAGE;AACAK,iBAAS,GAAT;AACD;;AAED,YAAMI,qBAAqB,MAAM,MAAKnB,IAAL,CAAUoB,0BAAV,CAC/BhB,QAD+B,EAE/BI,IAAIM,MAF2B,EAG/BJ,KAH+B,EAI/B,KAJ+B,EAIxB;AACPK,YAL+B,CAAjC;;AAQA,UAAII,kBAAJ,EAAwB;AAAA,cACfE,YADe,GACQF,kBADR,CACfE,YADe;AAAA,cACDC,KADC,GACQH,kBADR,CACDG,KADC;;;AAGtB,eAAO;AACLD,sBADK;AAELC,iBAAOA,MAAMC,GAAN,CAAU,0BAAkB;AACjC,kBAAMC,aAA6B;AACjCC,qBAAOC,eAAeC,WADW;AAEjCC,oBAAM,MAAKC,UAAL,CACJH,eAAeI,IADX,EAEJJ,eAAeK,WAFX;AAF2B,aAAnC;;AAQA,gBAAIL,eAAeK,WAAnB,EAAgC;AAC9BP,yBAAWQ,aAAX,GAA2BN,eAAeK,WAA1C;AACD;;AAED,gBAAIP,WAAWI,IAAX,KAAoB,8CAAmBK,QAA3C,EAAqD;AAAA,oBAEtCC,YAFsC,GAI/CR,cAJ+C,CAEjDS,SAFiD;AAAA,oBAGrCC,gBAHqC,GAI/CV,cAJ+C,CAGjDW,UAHiD;;;AAMnDb,yBAAWc,aAAX,GAA2BJ,YAA3B;AACAV,yBAAWe,iBAAX,GAA+BH,gBAA/B;;AAEA,kBAAIF,gBAAgB,IAAhB,IAAwBE,oBAAoB,IAAhD,EAAsD;AACpDZ,2BAAWgB,MAAX,GAAqB,GAAEJ,gBAAiB,OAAMF,YAAa,EAA3D;AACD;AACF,aAZD,MAYO;AACLV,yBAAWgB,MAAX,GAAoBd,eAAeW,UAAnC;AACD;;AAED,gBACE,MAAKvC,kBAAL,IACA,MAAKA,kBAAL,CAAwBI,YADxB,IAEA,MAAKJ,kBAAL,CAAwBI,YAAxB,CAAqCsB,UAFrC,IAGA,MAAK1B,kBAAL,CAAwBI,YAAxB,CAAqCsB,UAArC,CAAgDiB,cAHhD,IAIA,MAAK3C,kBAAL,CAAwBI,YAAxB,CAAqCsB,UAArC,CAAgDiB,cAAhD,CACGC,cALH,IAMAhB,eAAeiB,OAPjB,EAQE;AACAnB,yBAAWoB,UAAX,GAAwBlB,eAAeiB,OAAvC;AACAnB,yBAAWqB,gBAAX,GAA8B,4CAAiBC,OAA/C;AACD,aAXD,MAWO;AACLnD,qBAAOoD,KAAP,CACE,gFADF;AAGD;;AAED,mBAAOvB,UAAP;AACD,WA/CM;AAFF,SAAP;AAmDD;;AAED7B,aAAOoD,KAAP,CAAa,+BAAb;AACA,aAAO;AACL1B,sBAAc,IADT;AAELC,eAAO;AAFF,OAAP;AArFuD;AAyFxD;;AAEDO,aAAWC,IAAX,EAA0BC,WAA1B,EAAwE;AACtE,QAAID,SAAS,UAAb,EAAyB;AACvB,aAAO,8CAAmBG,QAA1B;AACD;;AAED,QAAIF,eAAeA,YAAYiB,OAAZ,CAAoB,UAApB,KAAmC,CAAtD,EAAyD;AACvD,aAAO,8CAAmBC,KAA1B;AACD;;AAED,WAAO,8CAAmBC,QAA1B;AACD;AAnH6B;kBAAXtD,U","file":"Completion.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {\n  ClientCapabilities,\n  TextDocumentPositionParams,\n} from 'vscode-languageserver/lib/protocol';\nimport type {\n  ICompletionList,\n  CompletionItemKindType,\n} from 'vscode-languageserver-types';\nimport {FlowSingleProjectLanguageService} from './pkg/nuclide-flow-rpc/lib/FlowSingleProjectLanguageService';\n\nimport {Range} from 'simple-text-buffer';\nimport URI from 'vscode-uri';\nimport {\n  CompletionItemKind,\n  InsertTextFormat,\n} from 'vscode-languageserver-types';\nimport {wordAtPositionFromBuffer} from 'nuclide-commons/range';\n\nimport TextDocuments from './TextDocuments';\nimport {JAVASCRIPT_WORD_REGEX} from './pkg/nuclide-flow-common';\nimport {lspPositionToAtomPoint} from './utils/util';\nimport {getLogger} from 'log4js';\n\nconst logger = getLogger('Completion');\n\ntype CompletionParams = {\n  clientCapabilities: ClientCapabilities,\n  documents: TextDocuments,\n  flow: FlowSingleProjectLanguageService,\n};\n\nexport default class Completion {\n  clientCapabilities: ClientCapabilities;\n  documents: TextDocuments;\n  flow: FlowSingleProjectLanguageService;\n\n  constructor({clientCapabilities, documents, flow}: CompletionParams) {\n    this.clientCapabilities = clientCapabilities;\n    this.documents = documents;\n    this.flow = flow;\n  }\n\n  async provideCompletionItems({\n    textDocument,\n    position,\n  }: TextDocumentPositionParams): Promise<ICompletionList> {\n    const fileName = URI.parse(textDocument.uri).fsPath;\n    const doc = this.documents.get(textDocument.uri);\n    const point = lspPositionToAtomPoint(position);\n    // $FlowFixMe: Add to defs\n    const prevPoint = point.traverse([0, -1]);\n    const match = wordAtPositionFromBuffer(\n      doc.buffer,\n      prevPoint,\n      JAVASCRIPT_WORD_REGEX,\n    );\n    let prefix = (match && match.wordMatch && match.wordMatch[0]) || '';\n    // Ensure that we also trigger on object properties (\".\").\n    if (\n      point.column !== 0 &&\n      doc.buffer.getTextInRange(new Range(prevPoint, point)) === '.'\n    ) {\n      prefix = '.';\n    }\n\n    const autocompleteResult = await this.flow.getAutocompleteSuggestions(\n      fileName,\n      doc.buffer,\n      point,\n      false, // activatedManually\n      prefix,\n    );\n\n    if (autocompleteResult) {\n      const {isIncomplete, items} = autocompleteResult;\n\n      return {\n        isIncomplete,\n        items: items.map(atomCompletion => {\n          const completion: CompletionItem = {\n            label: atomCompletion.displayText,\n            kind: this.typeToKind(\n              atomCompletion.type,\n              atomCompletion.description,\n            ),\n          };\n\n          if (atomCompletion.description) {\n            completion.documentation = atomCompletion.description;\n          }\n\n          if (completion.kind === CompletionItemKind.Function) {\n            const {\n              leftLabel: returnDetail,\n              rightLabel: parametersDetail,\n            } = atomCompletion;\n\n            completion._returnDetail = returnDetail;\n            completion._parametersDetail = parametersDetail;\n\n            if (returnDetail != null && parametersDetail != null) {\n              completion.detail = `${parametersDetail} => ${returnDetail}`;\n            }\n          } else {\n            completion.detail = atomCompletion.rightLabel;\n          }\n\n          if (\n            this.clientCapabilities &&\n            this.clientCapabilities.textDocument &&\n            this.clientCapabilities.textDocument.completion &&\n            this.clientCapabilities.textDocument.completion.completionItem &&\n            this.clientCapabilities.textDocument.completion.completionItem\n              .snippetSupport &&\n            atomCompletion.snippet\n          ) {\n            completion.insertText = atomCompletion.snippet;\n            completion.insertTextFormat = InsertTextFormat.Snippet;\n          } else {\n            logger.debug(\n              'Was going to return a snippet completion, but the client does not support them',\n            );\n          }\n\n          return completion;\n        }),\n      };\n    }\n\n    logger.debug('found no autocomplete results');\n    return {\n      isIncomplete: true,\n      items: [],\n    };\n  }\n\n  typeToKind(type: ?string, description: ?string): CompletionItemKindType {\n    if (type === 'function') {\n      return CompletionItemKind.Function;\n    }\n\n    if (description && description.indexOf('[class: ') >= 0) {\n      return CompletionItemKind.Class;\n    }\n\n    return CompletionItemKind.Variable;\n  }\n}\n"]}