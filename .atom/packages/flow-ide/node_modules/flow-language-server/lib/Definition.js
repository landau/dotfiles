'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _asyncToGenerator = require('async-to-generator');

var _asyncToGenerator2 = _interopRequireDefault(_asyncToGenerator);

var _FlowSingleProjectLanguageService = require('./pkg/nuclide-flow-rpc/lib/FlowSingleProjectLanguageService');

var _vscodeUri = require('vscode-uri');

var _vscodeUri2 = _interopRequireDefault(_vscodeUri);

var _log4js = require('log4js');

var _util = require('./utils/util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _log4js.getLogger)('Definition'); /**
                                                      * Copyright (c) 2017-present, Facebook, Inc.
                                                      * All rights reserved.
                                                      *
                                                      * This source code is licensed under the BSD-style license found in the
                                                      * LICENSE file in the root directory of this source tree. An additional grant
                                                      * of patent rights can be found in the PATENTS file in the same directory.
                                                      *
                                                      * 
                                                      * @format
                                                      */

class DefinitionSupport {

  constructor({ documents, flow }) {
    this.documents = documents;
    this.flow = flow;
  }

  provideDefinition({
    textDocument,
    position
  }) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const fileName = _vscodeUri2.default.parse(textDocument.uri).fsPath;
      const doc = _this.documents.get(textDocument.uri);

      const definitionResults = yield _this.flow.getDefinition(fileName, doc.buffer, (0, _util.lspPositionToAtomPoint)(position));

      if (definitionResults) {
        return definitionResults.definitions.map(function (def) {
          const lspPosition = (0, _util.atomPointToLSPPosition)(def.position);

          const range = {
            start: lspPosition,
            end: lspPosition
          };

          return {
            uri: _vscodeUri2.default.file(def.path).toString(),
            range
          };
        });
      }

      logger.debug('did not find definition');
      return null; // no definition
    })();
  }
}
exports.default = DefinitionSupport;
//# sourceMappingURL=Definition.js.map