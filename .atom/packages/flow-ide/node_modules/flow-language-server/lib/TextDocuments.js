'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _TextDocument = require('./TextDocument');

var _TextDocument2 = _interopRequireDefault(_TextDocument);

var _UniversalDisposable = require('nuclide-commons/UniversalDisposable');

var _UniversalDisposable2 = _interopRequireDefault(_UniversalDisposable);

var _eventKit = require('event-kit');

var _vscodeLanguageserver = require('vscode-languageserver');

var _log4js = require('log4js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _log4js.getLogger)('TextDocuments'); /**
                                                         * Copyright (c) 2017-present, Facebook, Inc.
                                                         * All rights reserved.
                                                         *
                                                         * This source code is licensed under the BSD-style license found in the
                                                         * LICENSE file in the root directory of this source tree. An additional grant
                                                         * of patent rights can be found in the PATENTS file in the same directory.
                                                         *
                                                         * 
                                                         * @format
                                                         */

function textDocumentFromLSPTextDocument(textDocument) {
  return new _TextDocument2.default(textDocument.uri, textDocument.languageId, textDocument.version, textDocument.text);
}

class TextDocuments {

  constructor() {
    this._disposables = new _UniversalDisposable2.default();
    this._documents = new Map();
    this._emitter = new _eventKit.Emitter();

    this._handleDidStopChanging = document => {
      this._emitter.emit('didChangeContent', { document });
    };

    this._handleDidSave = document => {
      this._emitter.emit('didSave', { document });
    };

    this._disposables.add(this._emitter);
  }

  dispose() {
    this._disposables.dispose();
  }

  get disposed() {
    return this._disposables.disposed;
  }

  get syncKind() {
    return _vscodeLanguageserver.TextDocumentSyncKind.Incremental;
  }

  get(uri) {
    const document = this._documents.get(uri);

    (0, _assert2.default)(document != null, `TextDocuments: asked for document with uri ${uri}, but no buffer was loaded`);
    return document;
  }

  listen(connection) {
    connection.onDidOpenTextDocument(e => {
      const textDocument = e.textDocument;

      const document = textDocumentFromLSPTextDocument(textDocument);
      this.addDocument(textDocument.uri, document);
    });

    connection.onDidChangeTextDocument(e => {
      const contentChanges = e.contentChanges,
            textDocument = e.textDocument;

      const document = this.get(textDocument.uri);
      document.updateMany(contentChanges, textDocument.version);
    });

    connection.onDidCloseTextDocument(e => {
      this.removeDocument(e.textDocument.uri);
    });

    connection.onDidSaveTextDocument(e => {
      const document = this.get(e.textDocument.uri);
      document.save(e.textDocument.version, e.text);
    });
  }

  addDocument(uri, document) {
    logger.debug(`TextDocuments: adding document ${uri}`);
    this._documents.set(uri, document);
    this._disposables.add(document);
    this._emitter.emit('didOpen', { document });
    document.onDidStopChanging(this._handleDidStopChanging);
    document.onDidSave(this._handleDidSave);
  }

  removeDocument(uri) {
    logger.debug(`TextDocuments: removing document ${uri}`);
    const document = this.get(uri);
    this._disposables.remove(document);
    this._documents.delete(uri);
    document.dispose();
  }

  all() {
    return Array.from(this._documents.values());
  }

  onDidChangeContent(handler) {
    this._emitter.on('didChangeContent', handler);
  }

  onDidSave(handler) {
    this._emitter.on('didSave', handler);
  }

  onDidOpen(handler) {
    this._emitter.on('didOpen', handler);
  }

}
exports.default = TextDocuments;
//# sourceMappingURL=TextDocuments.js.map