{"version":3,"sources":["../../src/__tests__/TextDocuments.test.js"],"names":["uri","languageId","docs","connection","describe","beforeEach","listen","test","expect","all","length","toBe","_emitter","emit","textDocument","version","text","getText","contentChanges","range","start","line","character","end"],"mappings":"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","file":"TextDocuments.test.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport ConnectionMock from './ConnectionMock';\nimport TextDocuments from '../TextDocuments';\n\nconst uri = 'file:///some/test/uri.js';\nconst languageId = 'javascript';\n\nlet docs, connection;\n\ndescribe('TextDocuments', () => {\n  beforeEach(() => {\n    docs = new TextDocuments();\n    // $FlowFixMe\n    connection = new ConnectionMock();\n    docs.listen(connection);\n  });\n\n  test('sets doc when the connection sends doc opened', () => {\n    expect(docs.all().length).toBe(0);\n\n    connection._emitter.emit('didOpen', {\n      textDocument: {\n        uri,\n        languageId,\n        version: 1,\n        text: 'foobar',\n      },\n    });\n\n    expect(docs.all().length).toBe(1);\n    expect(docs.all()[0].getText()).toBe('foobar');\n  });\n\n  test('updates an entire doc when no range provided', () => {\n    connection._emitter.emit('didOpen', {\n      textDocument: {\n        uri,\n        languageId,\n        version: 1,\n        text: 'foobar',\n      },\n    });\n\n    expect(docs.all().length).toBe(1);\n    expect(docs.all()[0].getText()).toBe('foobar');\n\n    connection._emitter.emit('didChange', {\n      contentChanges: [{text: 'example foobaz'}],\n      textDocument: {\n        uri,\n        languageId,\n        version: 2,\n      },\n    });\n\n    expect(docs.all().length).toBe(1);\n    expect(docs.all()[0].getText()).toBe('example foobaz');\n  });\n\n  test('updates a text range of a doc when range provided', () => {\n    connection._emitter.emit('didOpen', {\n      textDocument: {\n        uri,\n        languageId,\n        version: 1,\n        text: 'foobar',\n      },\n    });\n\n    expect(docs.all().length).toBe(1);\n    expect(docs.all()[0].getText()).toBe('foobar');\n\n    connection._emitter.emit('didChange', {\n      contentChanges: [\n        {\n          range: {\n            start: {\n              line: 0,\n              character: 3,\n            },\n            end: {\n              line: 0,\n              character: 17,\n            },\n          },\n          text: 'example foobaz',\n        },\n      ],\n      textDocument: {\n        uri,\n        languageId,\n        version: 2,\n      },\n    });\n\n    expect(docs.all().length).toBe(1);\n    expect(docs.all()[0].getText()).toBe('fooexample foobaz');\n  });\n\n  test('deletes doc when the connection sends doc closed', () => {\n    connection._emitter.emit('didOpen', {\n      textDocument: {\n        uri,\n        languageId,\n        version: 1,\n        text: 'foobar',\n      },\n    });\n    expect(docs.all().length).toBe(1);\n\n    connection._emitter.emit('didClose', {\n      textDocument: {\n        uri,\n      },\n    });\n    expect(docs.all().length).toBe(0);\n  });\n});\n"]}