{"version":3,"sources":["../../src/bin/cli.js"],"names":["cli","usage","help","alias","option","describe","type","default","argv","options","methods","cliInvariant","filter","m","length","method","find","port","socket","pipe","pipeName","connection","flowOptions","flowPath","tryFlowBin","autoDownloadFlow","listen","process","stdin","on","exit","condition","msgs","console","error","showHelp"],"mappings":";AACA;;;;;;;;;;AAUA;;AAEA;;AAGA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,MAAM,gBACTC,KADS,CACH,iEADG,EAETC,IAFS,CAEJ,GAFI,EAGTC,KAHS,CAGH,GAHG,EAGE,MAHF,EAITC,MAJS,CAIF,UAJE,EAIU;AAClBC,YACE,uFAFgB;AAGlBC,QAAM;AAHY,CAJV,EASTF,MATS,CASF,OATE,EASO;AACfC,YAAU,0CADK;AAEfC,QAAM;AAFS,CATP,EAaTF,MAbS,CAaF,MAbE,EAaM;AACdC,YACE,qFAFY;AAGdC,QAAM;AAHQ,CAbN,EAkBTF,MAlBS,CAkBF,QAlBE,EAkBQ;AAChBC,YACE,qFAFc;AAGhBC,QAAM;AAHU,CAlBR,EAuBTF,MAvBS,CAuBF,WAvBE,EAuBW;AACnBC,YACE,kEAFiB;AAGnBC,QAAM;AAHa,CAvBX,EA4BTF,MA5BS,CA4BF,cA5BE,EA4Bc;AACtBC,YACE,2EAFoB;AAGtBC,QAAM,SAHgB;AAItBC,WAAS;AAJa,CA5Bd,EAkCTH,MAlCS,CAkCF,kBAlCE,EAkCkB;AAC1BC,YAAU,uDADgB;AAE1BC,QAAM,SAFoB;AAG1BC,WAAS;AAHiB,CAlClB,CAAZ;;AAwCA,MAAMC,OAAOR,IAAIQ,IAAjB;AACA,MAAMC,UAAU,EAAhB;AACA,MAAMC,UAAU,CAAC,UAAD,EAAa,OAAb,EAAsB,MAAtB,EAA8B,QAA9B,CAAhB;;AAEAC,aACED,QAAQE,MAAR,CAAeC,KAAKL,KAAKK,CAAL,KAAW,IAA/B,EAAqCC,MAArC,KAAgD,CADlD,EAEE,uGAFF;AAIA,MAAMC,SAASL,QAAQM,IAAR,CAAaH,KAAKL,KAAKK,CAAL,KAAW,IAA7B,CAAf;;AAEAJ,QAAQM,MAAR,GAAiBA,MAAjB;AACA,IAAIN,QAAQM,MAAR,KAAmB,QAAvB,EAAiC;AAC/BJ,eAAaF,QAAQQ,IAArB,EAA2B,gCAA3B;AACAR,UAAQQ,IAAR,GAAeT,KAAKU,MAApB;AACD,CAHD,MAGO,IAAIT,QAAQM,MAAR,KAAmB,MAAvB,EAA+B;AACpCJ,eAAaF,QAAQU,IAArB,EAA2B,qCAA3B;AACAV,UAAQW,QAAR,GAAmBZ,KAAKW,IAAxB;AACD;;AAED,MAAME,aAAa,qCAAsBZ,OAAtB,CAAnB;AACA,iCAAkBY,UAAlB;;AAEA,MAAMC,cAA2B;AAC/BC,YAAUf,KAAK,WAAL,CADqB;AAE/BgB,cAAYhB,KAAK,cAAL,CAFmB;AAG/BiB,oBAAkB,CAACjB,KAAK,kBAAL;AAHY,CAAjC;AAKA,yBAAaa,UAAb,EAAyBC,WAAzB,EAAsCI,MAAtC;;AAEA;AACAC,QAAQC,KAAR,CAAcC,EAAd,CAAiB,OAAjB,EAA0B,MAAM;AAC9BF,UAAQG,IAAR,CAAa,CAAb;AACD,CAFD;;AAIA,SAASnB,YAAT,CAAsBoB,SAAtB,EAAiC,GAAGC,IAApC,EAA0C;AACxC,MAAI,CAACD,SAAL,EAAgB;AACd;AACAE,YAAQC,KAAR,CAAc,QAAd,EAAwB,GAAGF,IAA3B;AACAC,YAAQC,KAAR;AACA;AACAlC,QAAImC,QAAJ;AACAR,YAAQG,IAAR,CAAa,CAAb;AACD;AACF","file":"cli.js","sourcesContent":["\n/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @noflow\n */\n'use strict';\n\n/* eslint comma-dangle: [1, always-multiline], prefer-object-spread/prefer-object-spread: 0 */\n\nimport type {FlowOptions} from '../types';\nimport yargs from 'yargs';\n\nimport connectionFromOptions from '../utils/connectionFromOptions';\nimport initializeLogging from '../logging/initializeLogging';\nimport {createServer} from '../index';\n\nconst cli = yargs\n  .usage('Flow Language Service Command-Line Interface.\\nUsage: $0 [args]')\n  .help('h')\n  .alias('h', 'help')\n  .option('node-ipc', {\n    describe:\n      'Use node-ipc to communicate with the server. Useful for calling from a node.js client',\n    type: 'string',\n  })\n  .option('stdio', {\n    describe: 'Use stdio to communicate with the server',\n    type: 'string',\n  })\n  .option('pipe', {\n    describe:\n      'Use a pipe (with a name like --pipe=/tmp/named-pipe) to communicate with the server',\n    type: 'string',\n  })\n  .option('socket', {\n    describe:\n      'Use a socket (with a port number like --socket=5051) to communicate with the server',\n    type: 'number',\n  })\n  .option('flow-path', {\n    describe:\n      'An absolute path to a specific flow binary to use for the server',\n    type: 'string',\n  })\n  .option('try-flow-bin', {\n    describe:\n      \"Attempt to use flow-bin inside the $PROJECT_ROOT's node_modules directory\",\n    type: 'boolean',\n    default: false,\n  })\n  .option('no-auto-download', {\n    describe: \"Don't automatically download and manage flow binaries\",\n    type: 'boolean',\n    default: false,\n  });\n\nconst argv = cli.argv;\nconst options = {};\nconst methods = ['node-ipc', 'stdio', 'pipe', 'socket'];\n\ncliInvariant(\n  methods.filter(m => argv[m] != null).length === 1,\n  'flow-language-server requires exactly one valid connection option (node-ipc, stdio, pipe, or socket).',\n);\nconst method = methods.find(m => argv[m] != null);\n\noptions.method = method;\nif (options.method === 'socket') {\n  cliInvariant(options.port, '--socket option requires port.');\n  options.port = argv.socket;\n} else if (options.method === 'pipe') {\n  cliInvariant(options.pipe, '--pipe option requires a pipe name.');\n  options.pipeName = argv.pipe;\n}\n\nconst connection = connectionFromOptions(options);\ninitializeLogging(connection);\n\nconst flowOptions: FlowOptions = {\n  flowPath: argv['flow-path'],\n  tryFlowBin: argv['try-flow-bin'],\n  autoDownloadFlow: !argv['no-auto-download'],\n};\ncreateServer(connection, flowOptions).listen();\n\n// Exit the process when stream closes from remote end.\nprocess.stdin.on('close', () => {\n  process.exit(0);\n});\n\nfunction cliInvariant(condition, ...msgs) {\n  if (!condition) {\n    /* eslint-disable no-console */\n    console.error('ERROR:', ...msgs);\n    console.error();\n    /* eslint-enable */\n    cli.showHelp();\n    process.exit(1);\n  }\n}\n"]}