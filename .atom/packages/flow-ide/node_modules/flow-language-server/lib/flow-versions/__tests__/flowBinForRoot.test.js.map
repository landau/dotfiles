{"version":3,"sources":["../../../src/flow-versions/__tests__/flowBinForRoot.test.js"],"names":["describe","mockReporter","beforeEach","info","jest","fn","error","warn","it","resolved","join","__dirname","expect","toBe","mock","calls","toMatchSnapshot","not","toHaveBeenCalled"],"mappings":";;;;;;AAYA;;;;AACA;;;;AAbA;;;;;;;;;;;;AAeAA,SAAS,gBAAT,EAA2B,MAAM;AAC/B,MAAIC,YAAJ;AACAC,aAAW,MAAM;AACfD,mBAAe;AACbE,YAAMC,KAAKC,EAAL,EADO;AAEbC,aAAOF,KAAKC,EAAL,EAFM;AAGbE,YAAMH,KAAKC,EAAL;AAHO,KAAf;AAKD,GAND;;AAQAL,WAAS,mBAAT,EAA8B,MAAM;AAClCQ,OAAG,sFAAH,kCAA2F,aAAY;AACrG,YAAMC,WAAW,MAAM,4CACrB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,EAAiC,iBAAjC,CADqB,EAErBV,YAFqB,CAAvB;AAIAW,aAAOH,QAAP,EAAiBI,IAAjB,CAAsB,QAAtB;AACA;AACAD,aAAOX,aAAaE,IAAb,CAAkBW,IAAlB,CAAuBC,KAA9B,EAAqCC,eAArC;AACAJ,aAAOX,aAAaM,IAApB,EAA0BU,GAA1B,CAA8BC,gBAA9B;AACD,KATD;;AAWAV,OAAG,oGAAH,kCAAyG,aAAY;AACnH,YAAMC,WAAW,MAAM,4CACrB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,EAAiC,kBAAjC,CADqB,EAErBV,YAFqB,CAAvB;AAIAW,aAAOH,QAAP,EAAiBI,IAAjB,CAAsB,SAAtB;AACA;AACAD,aAAOX,aAAaE,IAAb,CAAkBW,IAAlB,CAAuBC,KAA9B,EAAqCC,eAArC;AACAJ,aAAOX,aAAaM,IAApB,EAA0BU,GAA1B,CAA8BC,gBAA9B;AACD,KATD;;AAWAV,OAAG,8GAAH,kCAAmH,aAAY;AAC7H,YAAMC,WAAW,MAAM,4CACrB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,EAAiC,4BAAjC,CADqB,EAErBV,YAFqB,CAAvB;AAIAW,aAAOH,QAAP,EAAiBI,IAAjB,CAAsB,QAAtB;AACA;AACAD,aAAOX,aAAaE,IAAb,CAAkBW,IAAlB,CAAuBC,KAA9B,EAAqCC,eAArC;AACD,KARD;;AAUAR,OAAG,0FAAH,kCAA+F,aAAY;AACzG,YAAMC,WAAW,MAAM,4CACrB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,EAAiC,aAAjC,CADqB,EAErBV,YAFqB,CAAvB;AAIAW,aAAOH,QAAP,EAAiBI,IAAjB,CAAsB,GAAtB;AACAD,aAAOX,aAAaM,IAApB,EAA0BW,gBAA1B;AACD,KAPD;AAQD,GAzCD;AA0CD,CApDD","file":"flowBinForRoot.test.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport path from 'path';\nimport {_flowSemverForRootPath} from '../flowBinForRoot';\n\ndescribe('flowBinForRoot', () => {\n  let mockReporter;\n  beforeEach(() => {\n    mockReporter = {\n      info: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n    };\n  });\n\n  describe('flowSemverForPath', () => {\n    it(\"returns the flowconfig's version without a message when only a flowconfig is present\", async () => {\n      const resolved = await _flowSemverForRootPath(\n        path.join(__dirname, 'fixtures', 'only-flowconfig'),\n        mockReporter,\n      );\n      expect(resolved).toBe('0.47.0');\n      // $FlowFixMe\n      expect(mockReporter.info.mock.calls).toMatchSnapshot();\n      expect(mockReporter.warn).not.toHaveBeenCalled();\n    });\n\n    it(\"returns the package.json's version without a message when only the package.json version is present\", async () => {\n      const resolved = await _flowSemverForRootPath(\n        path.join(__dirname, 'fixtures', 'only-packagejson'),\n        mockReporter,\n      );\n      expect(resolved).toBe('^0.47.0');\n      // $FlowFixMe\n      expect(mockReporter.info.mock.calls).toMatchSnapshot();\n      expect(mockReporter.warn).not.toHaveBeenCalled();\n    });\n\n    it(\"returns the flowconfig's version with a message when both flowconfig and package.json dependency are present\", async () => {\n      const resolved = await _flowSemverForRootPath(\n        path.join(__dirname, 'fixtures', 'flowconfig-and-packagejson'),\n        mockReporter,\n      );\n      expect(resolved).toBe('0.47.0');\n      // $FlowFixMe\n      expect(mockReporter.info.mock.calls).toMatchSnapshot();\n    });\n\n    it('returns * (indicating to download latest) when no version is present, and warns the user', async () => {\n      const resolved = await _flowSemverForRootPath(\n        path.join(__dirname, 'fixtures', 'no-versions'),\n        mockReporter,\n      );\n      expect(resolved).toBe('*');\n      expect(mockReporter.warn).toHaveBeenCalled();\n    });\n  });\n});\n"]}