{"version":3,"sources":["../../src/flow-versions/flowBinForRoot.js"],"names":["rootPath","tryFlowBin","autoDownloadFlow","semverDownloader","reporter","semversion","_flowSemverForRootPath","info","versionInfo","join","FLOW_BIN_PATH","satisfies","flowVersion","error","systemFlowPath","fromDisk","getFromDiskCache","chmod","pathToFlow","dest","flowBinForPath","configDir","flowConfigCache","getConfigDir","configPath","cwd","pkg","packageFlowVersion","depRange","dependencies","devDepRange","devDependencies","validRange","configFlowVersion","configFileStr","readFile","flowConfig","parse","version","rawConfigVersion","Object","keys","e","warn","diskVersions","readdir","filter","valid","foundVersion","sort","a","b","compare","find","v","foundPath","stat"],"mappings":"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","file":"flowBinForRoot.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {Reporter, VersionInfo} from './types';\n\nimport {ConfigCache} from 'nuclide-commons/ConfigCache';\nimport nuclideUri from 'nuclide-commons/nuclideUri';\nimport ini from 'ini';\nimport readPkgUp from 'read-pkg-up';\nimport fs from 'nuclide-commons/fsPromise';\nimport path from 'path';\nimport semver from 'semver';\nimport idx from 'idx';\nimport which from 'nuclide-commons/which';\nimport {BIN_NAME, BINS_DIR} from './constants';\nimport {downloadSemverFromGitHub} from './githubSemverDownloader';\nimport {versionInfoForPath} from './utils';\nimport {getLogger} from 'log4js';\n\ntype FlowBinForPathOptions = {\n  tryFlowBin?: boolean,\n  autoDownloadFlow?: boolean,\n  semverDownloader?: (\n    semversion: ?string,\n    binsDir: string,\n    reporter: Reporter,\n  ) => Promise<?VersionInfo>,\n  reporter?: Reporter,\n};\n\nconst FLOW_BIN_PATH = path.join('node_modules', '.bin', BIN_NAME);\nconst flowConfigCache = new ConfigCache(['.flowconfig']);\n\nexport async function flowBinForPath(\n  rootPath: string,\n  {\n    tryFlowBin = false,\n    autoDownloadFlow = true,\n    semverDownloader = downloadSemverFromGitHub,\n    reporter = getLogger('flow-versions'),\n  }: FlowBinForPathOptions,\n): Promise<?VersionInfo> {\n  // get the version (or range) of flow we'll need for this path\n  const semversion = await _flowSemverForRootPath(rootPath, reporter);\n  if (semversion == null) {\n    return null;\n  }\n  reporter.info(`Looking for a version of flow matching ${semversion}...`);\n\n  if (tryFlowBin) {\n    const versionInfo = await versionInfoForPath(\n      rootPath,\n      nuclideUri.join(rootPath, FLOW_BIN_PATH),\n    );\n\n    reporter.info('version info', versionInfo);\n    if (versionInfo) {\n      if (semver.satisfies(versionInfo.flowVersion, semversion)) {\n        reporter.info('Using the flow bin in node_modules');\n        return versionInfo;\n      } else {\n        reporter.error(\n          'The version of flow-bin (declared in package.json) is incompatible ' +\n            \"with the range stated in the project's .flowconfig, and will not run.\",\n        );\n        return null;\n      }\n    } else {\n      reporter.info('Unable to locate flow-bin in node_modules');\n    }\n  }\n\n  // see if the system flow satisfies before downloading one\n  const systemFlowPath = await which('flow');\n  if (systemFlowPath) {\n    const versionInfo = await versionInfoForPath(rootPath, systemFlowPath);\n    if (versionInfo) {\n      if (semver.satisfies(versionInfo.flowVersion, semversion)) {\n        reporter.info(`Using the system flow at ${systemFlowPath}.`);\n        return versionInfo;\n      } else {\n        reporter.info(\n          'System flow found, but does not satisfy the current project.',\n        );\n      }\n    } else {\n      reporter.info('System flow not found.');\n    }\n  }\n\n  if (autoDownloadFlow) {\n    reporter.info('Checking the disk cache for a local copy of flow...');\n    const fromDisk = await getFromDiskCache(semversion);\n    if (fromDisk) {\n      reporter.info(`Found flow version ${fromDisk.flowVersion} on disk.`);\n      await fs.chmod(fromDisk.pathToFlow, '0755');\n      return fromDisk;\n    }\n\n    reporter.info('No suitable flow found on disk');\n    const dest = await semverDownloader(semversion, BINS_DIR, reporter);\n    if (dest) {\n      await fs.chmod(dest.pathToFlow, '0755');\n      return dest;\n    }\n  }\n\n  reporter.error('Unable to find a suitable version of flow.');\n}\n\n// exported to test\nexport async function _flowSemverForRootPath(\n  rootPath: string,\n  reporter: Reporter,\n): Promise<?string> {\n  const configDir = await flowConfigCache.getConfigDir(rootPath);\n  reporter.info('Determining the version of flow for your project...');\n  if (!configDir) {\n    reporter.error(\n      'No valid .flowconfig was found. Use `flow init` in the root of your project to create one.',\n    );\n    return null;\n  }\n  const configPath = path.join(configDir, '.flowconfig');\n  const {pkg} = await readPkgUp({cwd: rootPath});\n\n  let packageFlowVersion;\n  const depRange = idx(pkg, _ => _.dependencies['flow-bin']);\n  const devDepRange = idx(pkg, _ => _.devDependencies['flow-bin']);\n  if (depRange && semver.validRange(depRange)) {\n    packageFlowVersion = depRange;\n  } else if (devDepRange && semver.validRange(devDepRange)) {\n    packageFlowVersion = devDepRange;\n  }\n  if (packageFlowVersion) {\n    reporter.info(\n      `Found flow version requirement ${packageFlowVersion} in your package.json`,\n    );\n  }\n\n  let configFlowVersion;\n  if (configDir) {\n    try {\n      const configFileStr = await fs.readFile(configPath, 'utf-8');\n      const flowConfig = ini.parse(configFileStr);\n      if (typeof flowConfig.version === 'object') {\n        const rawConfigVersion = Object.keys(flowConfig.version)[0];\n        configFlowVersion = semver.validRange(rawConfigVersion)\n          ? rawConfigVersion\n          : null;\n      }\n    } catch (e) {\n      reporter.error('Root dir contains missing or invalid flowconfig');\n      return null;\n    }\n  }\n\n  if (configFlowVersion) {\n    reporter.info(\n      `Found flow version requirement ${configFlowVersion} in your .flowconfig`,\n    );\n  }\n\n  if (!configFlowVersion && !packageFlowVersion) {\n    reporter.warn(\n      'No valid version of flow specified in .flowconfig or flow-bin ' +\n        'dependency of package.json. It is strongly recommended you specify a ' +\n        'version in your .flowconfig.',\n    );\n  }\n\n  return configFlowVersion || packageFlowVersion || '*';\n}\n\nasync function getFromDiskCache(semversion: string): Promise<?VersionInfo> {\n  let diskVersions;\n  try {\n    diskVersions = (await fs.readdir(BINS_DIR)).filter(semver.valid);\n  } catch (e) {\n    return null;\n  }\n\n  const foundVersion = diskVersions\n    .sort((a, b) => -1 * semver.compare(a, b))\n    .find(v => semver.satisfies(v, semversion));\n\n  if (!foundVersion) {\n    return null;\n  }\n\n  const foundPath = path.join(BINS_DIR, foundVersion, BIN_NAME);\n  try {\n    if (await fs.stat(foundPath)) {\n      return {\n        pathToFlow: foundPath,\n        flowVersion: foundVersion,\n      };\n    }\n  } catch (e) {\n    return null;\n  }\n\n  return null;\n}\n"]}