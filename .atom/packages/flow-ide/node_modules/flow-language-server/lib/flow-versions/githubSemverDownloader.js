'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadSemverFromGitHub = undefined;

var _asyncToGenerator = require('async-to-generator');

var _asyncToGenerator2 = _interopRequireDefault(_asyncToGenerator);

let downloadSemverFromGitHub = exports.downloadSemverFromGitHub = (() => {
  var _ref = (0, _asyncToGenerator2.default)(function* (semversion, binsDir, reporter) {
    let versionsResponse;
    try {
      versionsResponse = yield (0, _nodeFetch2.default)(FLOW_RELEASES_ENDPOINT);
    } catch (e) {
      reporter.error('There was a problem reaching GitHub to download Flow.');
      return null;
    }

    if (!versionsResponse.ok) {
      reporter.error('There was a problem downloading the list of flow versions from GitHub.');
      return null;
    }

    const versions = yield versionsResponse.json();
    let bestMatch;
    if (semversion != null) {
      bestMatch = versions.find(function (v) {
        return _semver2.default.satisfies(v.tag_name, semversion);
      });
    } else {
      bestMatch = versions[0];
    }

    if (!bestMatch) {
      reporter.error('The version of flow you requested does not exist on GitHub');
      return null;
    }

    const assetSubstr = getAssetSubstr();
    const bestAsset = bestMatch.assets.find(function (a) {
      return a.name.includes(assetSubstr);
    });
    if (!bestAsset) {
      reporter.error('Unable to find a download for the desired version of flow');
      return null;
    }

    const url = bestAsset.browser_download_url;
    if (!url) {
      reporter.error('unable to find a flow download for this platform');
      return null;
    }
    if (_url2.default.parse(url).protocol !== 'https:') {
      // should "never" happen
      reporter.error(`Flow must be downloaded over a secure connection, but was told to download ${url}`);
      return null;
    }

    reporter.info(`Found a match with version ${bestMatch.tag_name} on GitHub. Downloading...`);

    let archiveResponse;
    try {
      archiveResponse = yield (0, _nodeFetch2.default)(url);
    } catch (e) {
      reporter.error('Unable to download resolved flow package from GitHub');
      return null;
    }

    if (archiveResponse.ok) {
      const zipBuffer = yield archiveResponse.buffer();
      // $FlowFixMe https://github.com/flowtype/flow-typed/pull/1049
      const version = _semver2.default.clean(bestMatch.tag_name);
      const destDir = _path2.default.join(binsDir, version);

      try {
        yield (0, _mkdirp2.default)(destDir);
        new _admZip2.default(zipBuffer).extractEntryTo(`flow/${_constants.BIN_NAME}`, // zip-style path, not os-style, so not path.join
        destDir, false /* don't recreate the entry 'flow' dir */
        , true /* overwrite */
        );
      } catch (e) {
        reporter.error('Failed to write flow binary to disk. Please ensure write access ' + `to ${destDir}.`);
        return null;
      }

      reporter.info(`Successfully downloaded and installed flow version ${bestMatch.tag_name} from GitHub`);

      return {
        pathToFlow: _path2.default.join(destDir, _constants.BIN_NAME),
        flowVersion: version
      };
    }

    reporter.error('There was a problem downloading from GitHub');
  });

  return function downloadSemverFromGitHub(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
})();

// flow release object 'name' field includes one of the following values:


var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _admZip = require('adm-zip');

var _admZip2 = _interopRequireDefault(_admZip);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

const FLOW_RELEASES_ENDPOINT = 'https://api.github.com/repos/facebook/flow/releases';

const PLATFORM_NAME_TO_ASSET_SUBSTR_MAP = {
  darwin: 'osx',
  win32: 'win64',
  linux: 'linux'
};

function getAssetSubstr() {
  if (process.arch !== 'x64') {
    throw new Error('Unsupported operating system: only 64-bit operating systems are supported by flow.');
  }

  const substr = PLATFORM_NAME_TO_ASSET_SUBSTR_MAP[process.platform];
  if (substr == null) {
    throw new Error(`Unsupported operating system platform ${process.platform}.`);
  }

  return substr;
}
//# sourceMappingURL=githubSemverDownloader.js.map