{"version":3,"sources":["../../src/flow-versions/githubSemverDownloader.js"],"names":["semversion","binsDir","reporter","versionsResponse","FLOW_RELEASES_ENDPOINT","e","error","ok","versions","json","bestMatch","find","satisfies","v","tag_name","assetSubstr","getAssetSubstr","bestAsset","assets","a","name","includes","url","browser_download_url","parse","protocol","info","archiveResponse","zipBuffer","buffer","version","clean","destDir","join","extractEntryTo","pathToFlow","flowVersion","downloadSemverFromGitHub","PLATFORM_NAME_TO_ASSET_SUBSTR_MAP","darwin","win32","linux","process","arch","Error","substr","platform"],"mappings":"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","file":"githubSemverDownloader.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {Reporter, VersionInfo} from './types';\n\nimport fetch from 'node-fetch';\nimport path from 'path';\nimport semver from 'semver';\nimport mkdirp from 'mkdirp';\nimport Zip from 'adm-zip';\nimport URL from 'url';\n\nimport {BIN_NAME} from './constants';\n\nconst FLOW_RELEASES_ENDPOINT =\n  'https://api.github.com/repos/facebook/flow/releases';\n\nexport async function downloadSemverFromGitHub(\n  semversion: ?string,\n  binsDir: string,\n  reporter: Reporter,\n): Promise<?VersionInfo> {\n  let versionsResponse;\n  try {\n    versionsResponse = await fetch(FLOW_RELEASES_ENDPOINT);\n  } catch (e) {\n    reporter.error('There was a problem reaching GitHub to download Flow.');\n    return null;\n  }\n\n  if (!versionsResponse.ok) {\n    reporter.error(\n      'There was a problem downloading the list of flow versions from GitHub.',\n    );\n    return null;\n  }\n\n  const versions = await versionsResponse.json();\n  let bestMatch;\n  if (semversion != null) {\n    bestMatch = versions.find(v => semver.satisfies(v.tag_name, semversion));\n  } else {\n    bestMatch = versions[0];\n  }\n\n  if (!bestMatch) {\n    reporter.error(\n      'The version of flow you requested does not exist on GitHub',\n    );\n    return null;\n  }\n\n  const assetSubstr = getAssetSubstr();\n  const bestAsset = bestMatch.assets.find(a => a.name.includes(assetSubstr));\n  if (!bestAsset) {\n    reporter.error('Unable to find a download for the desired version of flow');\n    return null;\n  }\n\n  const url = bestAsset.browser_download_url;\n  if (!url) {\n    reporter.error('unable to find a flow download for this platform');\n    return null;\n  }\n  if (URL.parse(url).protocol !== 'https:') {\n    // should \"never\" happen\n    reporter.error(\n      `Flow must be downloaded over a secure connection, but was told to download ${url}`,\n    );\n    return null;\n  }\n\n  reporter.info(\n    `Found a match with version ${bestMatch.tag_name} on GitHub. Downloading...`,\n  );\n\n  let archiveResponse;\n  try {\n    archiveResponse = await fetch(url);\n  } catch (e) {\n    reporter.error('Unable to download resolved flow package from GitHub');\n    return null;\n  }\n\n  if (archiveResponse.ok) {\n    const zipBuffer = await archiveResponse.buffer();\n    // $FlowFixMe https://github.com/flowtype/flow-typed/pull/1049\n    const version = (semver.clean(bestMatch.tag_name): string);\n    const destDir = path.join(binsDir, version);\n\n    try {\n      await mkdirp(destDir);\n      new Zip(zipBuffer).extractEntryTo(\n        `flow/${BIN_NAME}`, // zip-style path, not os-style, so not path.join\n        destDir,\n        false /* don't recreate the entry 'flow' dir */,\n        true /* overwrite */,\n      );\n    } catch (e) {\n      reporter.error(\n        'Failed to write flow binary to disk. Please ensure write access ' +\n          `to ${destDir}.`,\n      );\n      return null;\n    }\n\n    reporter.info(\n      `Successfully downloaded and installed flow version ${bestMatch.tag_name} from GitHub`,\n    );\n\n    return {\n      pathToFlow: path.join(destDir, BIN_NAME),\n      flowVersion: version,\n    };\n  }\n\n  reporter.error('There was a problem downloading from GitHub');\n}\n\n// flow release object 'name' field includes one of the following values:\nconst PLATFORM_NAME_TO_ASSET_SUBSTR_MAP = {\n  darwin: 'osx',\n  win32: 'win64',\n  linux: 'linux',\n};\n\nfunction getAssetSubstr(): string {\n  if (process.arch !== 'x64') {\n    throw new Error(\n      'Unsupported operating system: only 64-bit operating systems are supported by flow.',\n    );\n  }\n\n  const substr = PLATFORM_NAME_TO_ASSET_SUBSTR_MAP[process.platform];\n  if (substr == null) {\n    throw new Error(\n      `Unsupported operating system platform ${process.platform}.`,\n    );\n  }\n\n  return substr;\n}\n"]}