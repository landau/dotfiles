{"version":3,"sources":["../../src/flow-versions/utils.js"],"names":["rootPath","pathToFlow","output","JSON","parse","cwd","toPromise","e","binary","flowVersion","semver","versionInfoForPath","getFlowDataDir","platform","process","join","getLocalDataDirRoot","fallback","homedir","env","APPDATA","XDG_DATA_HOME"],"mappings":";;;;;;;;;;;;6CAoBO,WACLA,QADK,EAELC,UAFK,EAGkB;AACvB,QAAIC,MAAJ;AACA,QAAI;AACFA,eAASC,KAAKC,KAAL,EACP,MAAM,yBAAWH,UAAX,EAAuB,CAAC,SAAD,EAAY,QAAZ,CAAvB,EAA8C;AAClDI,aAAKL;AAD6C,OAA9C,EAEHM,SAFG,EADC,EAAT;AAKD,KAND,CAME,OAAOC,CAAP,EAAU;AACV,aAAO,IAAP;AACD;;AAED,WAAO;AACLN,kBAAYC,OAAOM,MADd;AAELC,mBAAaP,OAAOQ;AAFf,KAAP;AAID,G;;kBAnBqBC,kB;;;;;QAqBNC,c,GAAAA,c;;AA3BhB;;;;AACA;;;;AACA;;;;AAhBA;;;;;;;;;;;;AAkBA,MAAMC,WAAWC,QAAQD,QAAzB;;AAuBO,SAASD,cAAT,GAA0B;AAC/B,SAAO,eAAKG,IAAL,CACLC,qBADK,EAELH,aAAa,QAAb,IAAyBA,aAAa,OAAtC,GAAgD,MAAhD,GAAyD,MAFpD,CAAP;AAID;;AAED,SAASG,mBAAT,GAAuC;AACrC,QAAMC,WAAW,eAAKF,IAAL,CAAU,aAAGG,OAAH,EAAV,EAAwB,QAAxB,EAAkC,OAAlC,CAAjB;;AAEA,UAAQL,QAAR;AACE,SAAK,QAAL;AACE,aAAO,eAAKE,IAAL,CAAU,aAAGG,OAAH,EAAV,EAAwB,SAAxB,CAAP;AACF,SAAK,OAAL;AACE,aAAOJ,QAAQK,GAAR,CAAYC,OAAZ,IAAuBH,QAA9B;AACF;AACE,aAAOH,QAAQK,GAAR,CAAYE,aAAZ,IAA6BJ,QAApC;AANJ;AAQD","file":"utils.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {VersionInfo} from './types';\n\nimport path from 'path';\nimport os from 'os';\nimport {runCommand} from 'nuclide-commons/process';\n\nconst platform = process.platform;\n\nexport async function versionInfoForPath(\n  rootPath: string,\n  pathToFlow: string,\n): Promise<?VersionInfo> {\n  let output;\n  try {\n    output = JSON.parse(\n      await runCommand(pathToFlow, ['version', '--json'], {\n        cwd: rootPath,\n      }).toPromise(),\n    );\n  } catch (e) {\n    return null;\n  }\n\n  return {\n    pathToFlow: output.binary,\n    flowVersion: output.semver,\n  };\n}\n\nexport function getFlowDataDir() {\n  return path.join(\n    getLocalDataDirRoot(),\n    platform === 'darwin' || platform === 'win32' ? 'Flow' : 'flow',\n  );\n}\n\nfunction getLocalDataDirRoot(): string {\n  const fallback = path.join(os.homedir(), '.local', 'share');\n\n  switch (platform) {\n    case 'darwin':\n      return path.join(os.homedir(), 'Library');\n    case 'win32':\n      return process.env.APPDATA || fallback;\n    default:\n      return process.env.XDG_DATA_HOME || fallback;\n  }\n}\n"]}