{"version":3,"sources":["../src/index.js"],"names":["rootPath","connection","flowOptions","versionLogger","flowPath","window","showInformationMessage","isAbsolute","showErrorMessage","flowVersionInfo","info","downloadManagerLogger","error","bind","warn","versionInfo","autoDownloadFlow","reporter","semverDownloader","tryFlowBin","getFlowVersionInfo","createServer","SUPPORTS_PERSISTENT_CONNECTION","process","platform","initialFlowOptions","logger","disposable","documents","add","onShutdown","debug","dispose","onInitialize","capabilities","root","cwd","flowContainer","flow","getServerStatusUpdates","distinctUntilChanged","subscribe","console","statusType","diagnostics","observe","diagnosticItems","forEach","sendDiagnostics","diagnoseAndSend","document","diagnoseOne","onDidSave","onDidOpen","completion","clientCapabilities","onCompletion","docParams","textDocument","uri","provideCompletionItems","onCompletionResolve","definition","onDefinition","provideDefinition","hover","onHover","provideHover","symbols","onDocumentSymbol","symbolParams","provideDocumentSymbol","textDocumentSync","syncKind","definitionProvider","documentSymbolProvider","completionProvider","resolveProvider","triggerCharacters","hoverProvider","listen"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {FlowOptions} from './types';\nimport type {InitializeParams} from 'vscode-languageserver/lib/protocol';\nimport type {VersionInfo} from './flow-versions/types';\n\nimport nuclideUri from 'nuclide-commons/nuclideUri';\nimport UniversalDisposable from 'nuclide-commons/UniversalDisposable';\nimport {IConnection} from 'vscode-languageserver';\n\nimport Completion from './Completion';\nimport Definition from './Definition';\nimport Diagnostics from './Diagnostics';\nimport Hover from './Hover';\nimport SymbolSupport from './Symbol';\nimport TextDocuments from './TextDocuments';\nimport {FlowExecInfoContainer} from './pkg/nuclide-flow-rpc/lib/FlowExecInfoContainer';\nimport {FlowSingleProjectLanguageService} from './pkg/nuclide-flow-rpc/lib/FlowSingleProjectLanguageService';\nimport {getLogger} from 'log4js';\nimport {flowBinForPath} from './flow-versions/flowBinForRoot';\nimport {downloadSemverFromGitHub} from './flow-versions/githubSemverDownloader';\nimport {versionInfoForPath} from './flow-versions/utils';\n\nconst SUPPORTS_PERSISTENT_CONNECTION = process.platform !== 'win32';\n\nexport function createServer(\n  connection: IConnection,\n  initialFlowOptions: FlowOptions,\n) {\n  const logger = getLogger('index');\n  const disposable = new UniversalDisposable();\n  const documents = new TextDocuments();\n\n  disposable.add(documents);\n\n  connection.onShutdown(() => {\n    logger.debug('LSP server connection shutting down');\n    disposable.dispose();\n  });\n\n  connection.onInitialize(\n    async ({capabilities, rootPath}: InitializeParams) => {\n      const root = rootPath || process.cwd();\n\n      logger.debug('LSP connection initialized. Connecting to flow...');\n\n      const flowVersionInfo = await getFlowVersionInfo(\n        root,\n        connection,\n        initialFlowOptions,\n      );\n      if (!flowVersionInfo) {\n        return {capabilities: {}};\n      }\n      const flowContainer = new FlowExecInfoContainer(flowVersionInfo);\n      const flow = new FlowSingleProjectLanguageService(root, flowContainer);\n\n      disposable.add(\n        flow,\n        flow\n          .getServerStatusUpdates()\n          .distinctUntilChanged()\n          .subscribe(statusType => {\n            connection.console.info(`Flow status: ${statusType}`);\n          }),\n      );\n\n      const diagnostics = new Diagnostics({flow});\n\n      if (SUPPORTS_PERSISTENT_CONNECTION) {\n        disposable.add(\n          diagnostics\n            .observe()\n            .subscribe(diagnosticItems =>\n              diagnosticItems.forEach(connection.sendDiagnostics),\n            ),\n        );\n      } else {\n        // Flow doesn't support its persistent connection well on Windows,\n        // so fall back to monitoring open and save events to offer diagnostics\n        const diagnoseAndSend = async function({document}) {\n          const diagnosticItems = await diagnostics.diagnoseOne(document);\n          diagnosticItems.forEach(connection.sendDiagnostics);\n        };\n\n        documents.onDidSave(diagnoseAndSend);\n        documents.onDidOpen(diagnoseAndSend);\n      }\n\n      const completion = new Completion({\n        clientCapabilities: capabilities,\n        documents,\n        flow,\n      });\n      connection.onCompletion(docParams => {\n        logger.debug(\n          `completion requested for document ${docParams.textDocument.uri}`,\n        );\n        return completion.provideCompletionItems(docParams);\n      });\n\n      connection.onCompletionResolve(() => {\n        // for now, noop as we can't/don't need to provide any additional\n        // information on resolve, but need to respond to implement completion\n      });\n\n      const definition = new Definition({documents, flow});\n      connection.onDefinition(docParams => {\n        logger.debug(\n          `definition requested for document ${docParams.textDocument.uri}`,\n        );\n        return definition.provideDefinition(docParams);\n      });\n\n      const hover = new Hover({documents, flow});\n      connection.onHover(docParams => {\n        return hover.provideHover(docParams);\n      });\n\n      const symbols = new SymbolSupport({documents, flow});\n      connection.onDocumentSymbol(symbolParams => {\n        logger.debug(\n          `symbols requested for document ${symbolParams.textDocument.uri}`,\n        );\n        return symbols.provideDocumentSymbol(symbolParams);\n      });\n\n      logger.info('Flow language server started');\n\n      return {\n        capabilities: {\n          textDocumentSync: documents.syncKind,\n          definitionProvider: true,\n          documentSymbolProvider: true,\n          completionProvider: {\n            resolveProvider: true,\n            triggerCharacters: ['.'],\n          },\n          hoverProvider: true,\n        },\n      };\n    },\n  );\n\n  return {\n    listen() {\n      documents.listen(connection);\n      connection.listen();\n    },\n  };\n}\n\nasync function getFlowVersionInfo(\n  rootPath: string,\n  connection: IConnection,\n  flowOptions: FlowOptions,\n): Promise<?VersionInfo> {\n  const versionLogger = getLogger('flow-versions');\n\n  if (flowOptions.flowPath != null) {\n    connection.window.showInformationMessage(\n      'path to flow ' + flowOptions.flowPath,\n    );\n    if (!nuclideUri.isAbsolute(flowOptions.flowPath)) {\n      connection.window.showErrorMessage(\n        'Supplied path to flow was not absolute. Specify a complete path to ' +\n          'the flow binary or leave the option empty for Flow to be managed ' +\n          'for you.',\n      );\n      return null;\n    }\n\n    const flowVersionInfo = await versionInfoForPath(\n      rootPath,\n      flowOptions.flowPath,\n    );\n    if (!flowVersionInfo) {\n      connection.window.showErrorMessage('Invalid path to flow binary.');\n    }\n    versionLogger.info(\n      `Using the provided path to flow binary at ${flowOptions.flowPath}`,\n    );\n\n    return flowVersionInfo;\n  }\n\n  const downloadManagerLogger = {\n    error: connection.window.showErrorMessage.bind(connection.window),\n    info: versionLogger.info.bind(versionLogger),\n    warn: versionLogger.warn.bind(versionLogger),\n  };\n\n  const versionInfo = await flowBinForPath(rootPath, {\n    autoDownloadFlow: flowOptions.autoDownloadFlow,\n    reporter: downloadManagerLogger,\n    semverDownloader: downloadSemverFromGitHub,\n    tryFlowBin: flowOptions.tryFlowBin,\n  });\n\n  if (!versionInfo) {\n    versionLogger.error(\n      'There was a problem obtaining the appropriate version of flow for ' +\n        'your project. Please check the extension logs.',\n    );\n  }\n\n  return versionInfo;\n}\n"]}