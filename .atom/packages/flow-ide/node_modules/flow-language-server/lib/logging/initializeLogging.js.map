{"version":3,"sources":["../../src/logging/initializeLogging.js"],"names":["initializeLogging","MAX_LOG_SIZE","MAX_LOG_BACKUPS","LOG_FILE_PATH","join","tmpdir","connection","configure","appenders","type","level","process","argv","includes","appender","__dirname","filename","maxLogSize","backups","layout","pattern","pid","logger","getLogger","on","e","error","global","console","log","bind"],"mappings":";;;;;kBA4BwBA,iB;;AAhBxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMC,eAAe,OAAO,IAA5B,C,CAlBA;;;;;;;;;;;;AAmBA,MAAMC,kBAAkB,EAAxB;AACA,MAAMC,gBAAgB,qBAAWC,IAAX,CAAgB,aAAGC,MAAH,EAAhB,EAA6B,0BAA7B,CAAtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,SAASL,iBAAT,CAA2BM,UAA3B,EAAoD;AACjE,mBAAOC,SAAP,CAAiB;AACfC,eAAW,CACT;AACEC,YAAM,gBADR;AAEEC,aAAOC,QAAQC,IAAR,CAAaC,QAAb,CAAsB,SAAtB,IAAmC,OAAnC,GAA6C,MAFtD;AAGEC,gBAAU;AACRL,cAAM,eAAKL,IAAL,CAAUW,SAAV,EAAqB,cAArB,CADE;AAERC,kBAAUb,aAFF;AAGRc,oBAAYhB,YAHJ;AAIRiB,iBAAShB,eAJD;AAKRiB,gBAAQ;AACNV,gBAAM,SADA;AAEN;AACA;AACAW,mBAAU,uBAAsBT,QAAQU,GAAI;AAJtC;AALA;AAHZ,KADS,EAiBT;AACEZ,YAAM,gBADR;AAEEC,aAAOC,QAAQC,IAAR,CAAaC,QAAb,CAAsB,SAAtB,IAAmC,OAAnC,GAA6C,MAFtD;AAGEC,gBAAU;AACRR,kBADQ;AAERG,cAAM,eAAKL,IAAL,CAAUW,SAAV,EAAqB,2BAArB;AAFE;AAHZ,KAjBS;AADI,GAAjB;;AA6BA,QAAMO,SAAS,iBAAOC,SAAP,CAAiB,sBAAjB,CAAf;AACAZ,UAAQa,EAAR,CAAW,mBAAX,EAAgCC,KAAKH,OAAOI,KAAP,CAAa,mBAAb,EAAkCD,CAAlC,CAArC;AACAd,UAAQa,EAAR,CAAW,oBAAX,EAAiCC,KAAKH,OAAOI,KAAP,CAAa,oBAAb,EAAmCD,CAAnC,CAAtC;;AAEA;AACAE,SAAOC,OAAP,CAAeC,GAAf,GAAqBvB,WAAWsB,OAAX,CAAmBC,GAAnB,CAAuBC,IAAvB,CAA4BxB,WAAWsB,OAAvC,CAArB;AACAD,SAAOC,OAAP,CAAeF,KAAf,GAAuBpB,WAAWsB,OAAX,CAAmBF,KAAnB,CAAyBI,IAAzB,CAA8BxB,WAAWsB,OAAzC,CAAvB;AACD","file":"initializeLogging.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport log4js from 'log4js';\nimport nuclideUri from 'nuclide-commons/nuclideUri';\nimport os from 'os';\nimport path from 'path';\nimport {IConnection} from 'vscode-languageserver';\n\nconst MAX_LOG_SIZE = 1024 * 1024;\nconst MAX_LOG_BACKUPS = 10;\nconst LOG_FILE_PATH = nuclideUri.join(os.tmpdir(), 'flow-language-server.log');\n\n// Configure log4js to not log to console, since\n// writing arbitrary data to stdout will break JSON RPC if we're running over\n// stdout.\n//\n// Additionally, add an appender to log over the rpc connection so logging appears\n// in the client environment, independent of stdio, node rpc, socket, etc.\nexport default function initializeLogging(connection: IConnection) {\n  log4js.configure({\n    appenders: [\n      {\n        type: 'logLevelFilter',\n        level: process.argv.includes('--debug') ? 'DEBUG' : 'WARN',\n        appender: {\n          type: path.join(__dirname, 'fileAppender'),\n          filename: LOG_FILE_PATH,\n          maxLogSize: MAX_LOG_SIZE,\n          backups: MAX_LOG_BACKUPS,\n          layout: {\n            type: 'pattern',\n            // Format log in following pattern:\n            // yyyy-MM-dd HH:mm:ss.mil $Level (pid:$pid) $categroy - $message.\n            pattern: `%d{ISO8601} %p (pid:${process.pid}) %c - %m`,\n          },\n        },\n      },\n      {\n        type: 'logLevelFilter',\n        level: process.argv.includes('--debug') ? 'DEBUG' : 'INFO',\n        appender: {\n          connection,\n          type: path.join(__dirname, 'connectionConsoleAppender'),\n        },\n      },\n    ],\n  });\n\n  const logger = log4js.getLogger('flow-language-server');\n  process.on('uncaughtException', e => logger.error('uncaughtException', e));\n  process.on('unhandledRejection', e => logger.error('unhandledRejection', e));\n\n  // don't let anything write to the true stdio as it could break JSON RPC\n  global.console.log = connection.console.log.bind(connection.console);\n  global.console.error = connection.console.error.bind(connection.console);\n}\n"]}