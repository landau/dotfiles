'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initialize = undefined;

var _asyncToGenerator = require('async-to-generator');

var _asyncToGenerator2 = _interopRequireDefault(_asyncToGenerator);

let initialize = exports.initialize = (() => {
  var _ref = (0, _asyncToGenerator2.default)(function* (fileNotifier, host, config) {
    (0, _assert2.default)(fileNotifier instanceof _nuclideOpenFilesRpc.FileCache);
    const fileCache = fileNotifier;
    return new FlowLanguageService(fileCache, host, config);
  });

  return function initialize(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
})();

exports.dispose = dispose;
exports.flowGetAst = flowGetAst;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _config = require('./config');

var _nuclideLanguageServiceRpc = require('../../nuclide-language-service-rpc');

var _nuclideOpenFilesRpc = require('../../nuclide-open-files-rpc');

var _log4js = require('log4js');

var _FlowSingleProjectLanguageService = require('./FlowSingleProjectLanguageService');

var _FlowServiceState = require('./FlowServiceState');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// If types are added here, make sure to also add them to FlowConstants.js. This needs to be the
// canonical type definition so that we can use these in the service framework.
let state = null; /**
                   * Copyright (c) 2017-present, Facebook, Inc.
                   * All rights reserved.
                   *
                   * This source code is licensed under the BSD-style license found in the
                   * LICENSE file in the root directory of this source tree. An additional grant
                   * of patent rights can be found in the PATENTS file in the same directory.
                   *
                   * 
                   * @format
                   */

function getState() {
  if (state == null) {
    state = new _FlowServiceState.FlowServiceState();
  }
  return state;
}

function dispose() {
  if (state != null) {
    state.dispose();
    state = null;
  }
}

class FlowLanguageService extends _nuclideLanguageServiceRpc.MultiProjectLanguageService {
  constructor(fileCache, host, config) {
    const logger = (0, _log4js.getLogger)('Flow');
    super();
    this.initialize(logger, fileCache, host, '.flowconfig', ['.js', '.jsx'], projectDir => {
      const execInfoContainer = getState().getExecInfoContainer();
      const singleProjectLS = new _FlowSingleProjectLanguageService.FlowSingleProjectLanguageService(projectDir, execInfoContainer);
      const languageService = new _nuclideLanguageServiceRpc.ServerLanguageService(fileCache, singleProjectLS);
      return Promise.resolve(languageService);
    });
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Object.keys(config)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const key = _step.value;

        (0, _config.setConfig)(key, config[key]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  getOutline(fileVersion) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const ls = yield _this.getLanguageServiceForFile(fileVersion.filePath);
      if (ls != null) {
        return ls.getOutline(fileVersion);
      } else {
        const buffer = yield (0, _nuclideOpenFilesRpc.getBufferAtVersion)(fileVersion);
        if (buffer == null) {
          return null;
        }
        return _FlowSingleProjectLanguageService.FlowSingleProjectLanguageService.getOutline(fileVersion.filePath, buffer, null, getState().getExecInfoContainer());
      }
    })();
  }

  getServerStatusUpdates() {
    return this.observeLanguageServices().mergeMap(languageService => {
      const singleProjectLS = languageService.getSingleFileLanguageService();
      const pathToRoot = singleProjectLS.getPathToRoot();
      return singleProjectLS.getServerStatusUpdates().map(status => ({ pathToRoot, status }));
    }).publish();
  }

  allowServerRestart() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const languageServices = yield _this2.getAllLanguageServices();
      const flowLanguageServices = languageServices.map(function (ls) {
        return ls.getSingleFileLanguageService();
      });
      flowLanguageServices.forEach(function (ls) {
        return ls.allowServerRestart();
      });
    })();
  }
}

// Unfortunately we have to duplicate a lot of things here to make FlowLanguageService remotable.
function flowGetAst(file, currentContents) {
  return _FlowSingleProjectLanguageService.FlowSingleProjectLanguageService.flowGetAst(null, currentContents, getState().getExecInfoContainer());
}
//# sourceMappingURL=FlowService.js.map