{"version":3,"sources":["../../../../src/pkg/nuclide-flow-rpc/lib/FlowVersion.js"],"names":["FlowVersion","constructor","versionFn","_versionFn","_lastVersion","invalidateVersion","satisfies","range","version","getVersion","lastVersion","_queryAndSetVersion","msSinceReceived","Date","now","receivedTime"],"mappings":";;;;;;;;;;;AAYA;;;;AACA;;;;AAOA;;;;AApBA;;;;;;;;;;;;AAwBO,MAAMA,WAAN,CAAkB;;AAKvBC,cAAYC,SAAZ,EAA+C;AAC7C,SAAKC,UAAL,GAAkBD,SAAlB;AACA,SAAKE,YAAL,GAAoB,IAApB;AACD;;AAEDC,sBAA0B;AACxB,SAAKD,YAAL,GAAoB,IAApB;AACD;;AAEKE,WAAN,CAAgBC,KAAhB,EAAiD;AAAA;;AAAA;AAC/C,YAAMC,UAAU,MAAM,MAAKC,UAAL,EAAtB;AACA,UAAID,WAAW,IAAf,EAAqB;AACnB,eAAO,KAAP;AACD;AACD,aAAO,iBAAOF,SAAP,CAAiBE,OAAjB,EAA0BD,KAA1B,CAAP;AAL+C;AAMhD;;AAEKE,YAAN,GAAqC;AAAA;;AAAA;AACnC,YAAMC,cAAc,OAAKN,YAAzB;AACA,UAAIM,eAAe,IAAnB,EAAyB;AACvB,eAAO,OAAKC,mBAAL,EAAP;AACD;AACD,YAAMC,kBAAkBC,KAAKC,GAAL,KAAaJ,YAAYK,YAAjD;AACA,UAAIH,oDAAJ,EAA2C;AACzC,eAAO,OAAKD,mBAAL,EAAP;AACD;AACD,aAAOD,YAAYF,OAAnB;AATmC;AAUpC;;AAEKG,qBAAN,GAA8C;AAAA;;AAAA;AAC5C,YAAMH,UAAU,MAAM,OAAKL,UAAL,EAAtB;AACA,aAAKC,YAAL,GAAoB;AAClBI,eADkB;AAElBO,sBAAcF,KAAKC,GAAL;AAFI,OAApB;AAIA,aAAON,OAAP;AAN4C;AAO7C;AAzCsB;QAAZR,W,GAAAA,W","file":"FlowVersion.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport semver from 'semver';\nimport {VERSION_TIMEOUT_MS} from './FlowConstants';\n\ntype VersionWithTimestamp = {\n  version: ?string,\n  receivedTime: number,\n};\n\n/*\n * Queries Flow for its version and caches the results. The version is a best guess: it is not 100%\n * guaranteed to be reliable due to caching, but will nearly always be correct.\n */\nexport class FlowVersion {\n  _lastVersion: ?VersionWithTimestamp;\n\n  _versionFn: () => Promise<?string>;\n\n  constructor(versionFn: () => Promise<?string>) {\n    this._versionFn = versionFn;\n    this._lastVersion = null;\n  }\n\n  invalidateVersion(): void {\n    this._lastVersion = null;\n  }\n\n  async satisfies(range: string): Promise<boolean> {\n    const version = await this.getVersion();\n    if (version == null) {\n      return false;\n    }\n    return semver.satisfies(version, range);\n  }\n\n  async getVersion(): Promise<?string> {\n    const lastVersion = this._lastVersion;\n    if (lastVersion == null) {\n      return this._queryAndSetVersion();\n    }\n    const msSinceReceived = Date.now() - lastVersion.receivedTime;\n    if (msSinceReceived >= VERSION_TIMEOUT_MS) {\n      return this._queryAndSetVersion();\n    }\n    return lastVersion.version;\n  }\n\n  async _queryAndSetVersion(): Promise<?string> {\n    const version = await this._versionFn();\n    this._lastVersion = {\n      version,\n      receivedTime: Date.now(),\n    };\n    return version;\n  }\n}\n"]}