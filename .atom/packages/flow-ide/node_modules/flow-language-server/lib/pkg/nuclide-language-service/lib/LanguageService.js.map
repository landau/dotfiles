{"version":3,"sources":["../../../../src/pkg/nuclide-language-service/lib/LanguageService.js"],"names":[],"mappings":";;AA6CA;AACA;AACA,CAAG,EAAH;;AApBA;AA3BA","file":"LanguageService.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {NuclideUri} from 'nuclide-commons/nuclideUri';\nimport type {FileVersion} from '../../nuclide-open-files-rpc/lib/rpc-types';\nimport type {TextEdit} from 'nuclide-commons-atom/text-edit';\nimport type {TypeHint} from '../../nuclide-type-hint/lib/rpc-types';\nimport type {CoverageResult} from '../../nuclide-type-coverage/lib/rpc-types';\nimport type {\n  DefinitionQueryResult,\n  DiagnosticProviderUpdate,\n  FileDiagnosticMessages,\n  FindReferencesReturn,\n  Outline,\n} from 'atom-ide-ui';\nimport type {ConnectableObservable} from 'rxjs';\nimport type {NuclideEvaluationExpression} from '../../nuclide-debugger-interfaces/rpc-types';\n\n// Subtype of atom$AutocompleteSuggestion.\nexport type Completion = {\n  text?: string,\n  snippet?: string,\n  displayText?: string,\n  replacementPrefix?: string,\n  type?: ?string,\n  leftLabel?: ?string,\n  leftLabelHTML?: ?string,\n  rightLabel?: ?string,\n  rightLabelHTML?: ?string,\n  className?: ?string,\n  iconHTML?: ?string,\n  description?: ?string,\n  descriptionMoreURL?: ?string,\n  extraData?: mixed,\n};\n\n// This assertion ensures that Completion is a subtype of atom$AutocompleteSuggestion. If you are\n// getting errors here, you have probably just updated one without updating the other.\n((({}: any): Completion): atom$AutocompleteSuggestion);\n\nexport type AutocompleteResult = {\n  isIncomplete: boolean,\n  items: Array<Completion>,\n};\n\nexport type SymbolResult = {\n  path: NuclideUri,\n  line: number,\n  column: number,\n  name: string,\n  containerName: ?string,\n  icon: ?string, // from https://github.com/atom/atom/blob/master/static/octicons.less\n  hoverText: ?string, // sometimes used to explain the icon in words\n};\n\nexport interface LanguageService {\n  getDiagnostics(fileVersion: FileVersion): Promise<?DiagnosticProviderUpdate>,\n\n  observeDiagnostics(): ConnectableObservable<Array<FileDiagnosticMessages>>,\n\n  getAutocompleteSuggestions(\n    fileVersion: FileVersion,\n    position: atom$Point,\n    activatedManually: boolean,\n    prefix: string,\n  ): Promise<?AutocompleteResult>,\n\n  getDefinition(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?DefinitionQueryResult>,\n\n  findReferences(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?FindReferencesReturn>,\n\n  getCoverage(filePath: NuclideUri): Promise<?CoverageResult>,\n\n  getOutline(fileVersion: FileVersion): Promise<?Outline>,\n\n  typeHint(fileVersion: FileVersion, position: atom$Point): Promise<?TypeHint>,\n\n  highlight(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?Array<atom$Range>>,\n\n  formatSource(\n    fileVersion: FileVersion,\n    range: atom$Range,\n  ): Promise<?Array<TextEdit>>,\n\n  formatEntireFile(\n    fileVersion: FileVersion,\n    range: atom$Range,\n  ): Promise<?{\n    newCursor?: number,\n    formatted: string,\n  }>,\n\n  formatAtPosition(\n    fileVersion: FileVersion,\n    position: atom$Point,\n    triggerCharacter: string,\n  ): Promise<?Array<TextEdit>>,\n\n  getEvaluationExpression(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?NuclideEvaluationExpression>,\n\n  supportsSymbolSearch(directories: Array<NuclideUri>): Promise<boolean>,\n\n  symbolSearch(\n    query: string,\n    directories: Array<NuclideUri>,\n  ): Promise<?Array<SymbolResult>>,\n\n  getProjectRoot(fileUri: NuclideUri): Promise<?NuclideUri>,\n\n  isFileInProject(fileUri: NuclideUri): Promise<boolean>,\n\n  dispose(): void,\n}\n"]}