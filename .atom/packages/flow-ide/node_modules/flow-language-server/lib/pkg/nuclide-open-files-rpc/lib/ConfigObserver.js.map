{"version":3,"sources":["../../../../src/pkg/nuclide-open-files-rpc/lib/ConfigObserver.js"],"names":["ConfigObserver","constructor","cache","fileExtensions","findConfigDir","_fileCache","_fileExtensions","_findConfigDir","_currentConfigs","Set","_subscription","observeFileEvents","filter","fileEvent","kind","EDIT","mapTo","undefined","merge","observeDirectoryEvents","switchMap","fromPromise","_computeOpenConfigs","distinctUntilChanged","skipWhile","dirs","size","subscribe","paths","Array","from","getOpenDirectories","concat","getOpenFiles","indexOf","extname","filePath","result","Promise","all","map","path","observeConfigs","asObservable","getOpenConfigs","getValue","dispose","unsubscribe","complete"],"mappings":";;;;;;;;;;;AAcA;;AACA;;;;AACA;;AACA;;AACA;;;;AAlBA;;;;;;;;;;;;AAoBO,MAAMA,cAAN,CAAqB;;AAO1BC,cACEC,KADF,EAEEC,cAFF,EAGEC,aAHF,EAIE;AACA,SAAKC,UAAL,GAAkBH,KAAlB;AACA,SAAKI,eAAL,GAAuBH,cAAvB;AACA,SAAKI,cAAL,GAAsBH,aAAtB;AACA,SAAKI,eAAL,GAAuB,0BAAoB,IAAIC,GAAJ,EAApB,CAAvB;AACA;AACA,SAAKC,aAAL,GAAqBR,MAClBS,iBADkB,GAElBC,MAFkB,CAEXC,aAAaA,UAAUC,IAAV,KAAmB,yBAAcC,IAFnC,EAGlBC,KAHkB,CAGZC,SAHY,EAIlBC,KAJkB,CAIZhB,MAAMiB,sBAAN,GAA+BH,KAA/B,CAAqCC,SAArC,CAJY,EAKlBG,SALkB,CAKR,MAAM,iBAAWC,WAAX,CAAuB,KAAKC,mBAAL,EAAvB,CALE,EAMlBC,oBANkB;AAOnB;AAPmB,KAQlBC,SARkB,CAQRC,QAAQA,KAAKC,IAAL,KAAc,CARd,EASlBC,SATkB,CASR,KAAKnB,eATG,CAArB;AAUD;;AAEKc,qBAAN,GAAsD;AAAA;;AAAA;AACpD,YAAMM,QAAQC,MAAMC,IAAN,CAAW,MAAKzB,UAAL,CAAgB0B,kBAAhB,EAAX,EAAiDC,MAAjD,CACZH,MAAMC,IAAN,CAAW,MAAKzB,UAAL,CAAgB4B,YAAhB,EAAX,EAA2CrB,MAA3C,CACE;AAAA,eACE,MAAKN,eAAL,CAAqB4B,OAArB,CAA6B,qBAAWC,OAAX,CAAmBC,QAAnB,CAA7B,MAA+D,CAAC,CADlE;AAAA,OADF,CADY,CAAd;;AAOA,YAAMC,SAAS,IAAI5B,GAAJ,CACb,CAAC,MAAM6B,QAAQC,GAAR,CAAYX,MAAMY,GAAN,CAAU;AAAA,eAAQ,MAAKjC,cAAL,CAAoBkC,IAApB,CAAR;AAAA,OAAV,CAAZ,CAAP,EAAkE7B,MAAlE,CACE;AAAA,eAAQ6B,QAAQ,IAAhB;AAAA,OADF,CADa,CAAf;AAKA;AACA,aAAQJ,MAAR;AAdoD;AAerD;;AAEDK,mBAA8C;AAC5C,WAAO,KAAKlC,eAAL,CAAqBmC,YAArB,EAAP;AACD;;AAEDC,mBAAkC;AAChC,WAAO,KAAKpC,eAAL,CAAqBqC,QAArB,EAAP;AACD;;AAEDC,YAAgB;AACd,SAAKpC,aAAL,CAAmBqC,WAAnB;AACA,SAAKvC,eAAL,CAAqBwC,QAArB;AACA,SAAKxC,eAAL,CAAqBuC,WAArB;AACD;AA1DyB;QAAf/C,c,GAAAA,c","file":"ConfigObserver.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {NuclideUri} from 'nuclide-commons/nuclideUri';\n\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport nuclideUri from 'nuclide-commons/nuclideUri';\nimport {areSetsEqual} from 'nuclide-commons/collection';\nimport {FileEventKind} from './constants';\nimport {FileCache} from './FileCache';\n\nexport class ConfigObserver {\n  _fileExtensions: Array<string>;\n  _fileCache: FileCache;\n  _currentConfigs: BehaviorSubject<Set<NuclideUri>>;\n  _subscription: rxjs$ISubscription;\n  _findConfigDir: (path: NuclideUri) => Promise<?NuclideUri>;\n\n  constructor(\n    cache: FileCache,\n    fileExtensions: Array<string>,\n    findConfigDir: (path: NuclideUri) => Promise<?NuclideUri>,\n  ) {\n    this._fileCache = cache;\n    this._fileExtensions = fileExtensions;\n    this._findConfigDir = findConfigDir;\n    this._currentConfigs = new BehaviorSubject(new Set());\n    // TODO: Consider incrementally updating, rather than recomputing on each event.\n    this._subscription = cache\n      .observeFileEvents()\n      .filter(fileEvent => fileEvent.kind !== FileEventKind.EDIT)\n      .mapTo(undefined)\n      .merge(cache.observeDirectoryEvents().mapTo(undefined))\n      .switchMap(() => Observable.fromPromise(this._computeOpenConfigs()))\n      .distinctUntilChanged(areSetsEqual)\n      // Filter out initial empty set, which duplicates the initial value of the BehaviorSubject\n      .skipWhile(dirs => dirs.size === 0)\n      .subscribe(this._currentConfigs);\n  }\n\n  async _computeOpenConfigs(): Promise<Set<NuclideUri>> {\n    const paths = Array.from(this._fileCache.getOpenDirectories()).concat(\n      Array.from(this._fileCache.getOpenFiles()).filter(\n        filePath =>\n          this._fileExtensions.indexOf(nuclideUri.extname(filePath)) !== -1,\n      ),\n    );\n\n    const result = new Set(\n      (await Promise.all(paths.map(path => this._findConfigDir(path)))).filter(\n        path => path != null,\n      ),\n    );\n    // $FlowIssue Flow doesn't understand filter\n    return (result: Set<NuclideUri>);\n  }\n\n  observeConfigs(): Observable<Set<NuclideUri>> {\n    return this._currentConfigs.asObservable();\n  }\n\n  getOpenConfigs(): Set<NuclideUri> {\n    return this._currentConfigs.getValue();\n  }\n\n  dispose(): void {\n    this._subscription.unsubscribe();\n    this._currentConfigs.complete();\n    this._currentConfigs.unsubscribe();\n  }\n}\n"]}