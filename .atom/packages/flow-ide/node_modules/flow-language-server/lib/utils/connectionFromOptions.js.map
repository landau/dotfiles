{"version":3,"sources":["../../src/utils/connectionFromOptions.js"],"names":["connectionFromOptions","options","reader","writer","server","method","PassThrough","createServer","socket","close","pipe","listen","port","process","stdin","stdout"],"mappings":";;;;;kBAgCwBA,qB;;AAlBxB;;AACA;;AAEA;;;;AACA;;;;;;AAce,SAASA,qBAAT,CAA+BC,OAA/B,EAA+D;AAC5E,MAAIC,MAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,MAAJ;;AAEA,UAAQH,QAAQI,MAAhB;AACE,SAAK,QAAL;AACE;AACA;AACA;AACAF,eAAS,IAAI,iBAAOG,WAAX,EAAT;AACAJ,eAAS,IAAI,iBAAOI,WAAX,EAAT;AACAF,eAAS,cACNG,YADM,CACOC,UAAU;AACtBJ,eAAOK,KAAP;AACAD,eAAOE,IAAP,CAAYP,MAAZ;AACAD,eAAOQ,IAAP,CAAYF,MAAZ;AACD,OALM,EAMNG,MANM,CAMCV,QAAQW,IANT,CAAT;AAOA;AACF,SAAK,OAAL;AACEV,eAASW,QAAQC,KAAjB;AACAX,eAASU,QAAQE,MAAjB;AACA;AACF,SAAK,UAAL;AACA;AACEb,eAAS,oCAAqBW,OAArB,CAAT;AACAV,eAAS,oCAAqBU,OAArB,CAAT;AACA;AAvBJ;;AA0BA,SAAO,4CAAiBX,MAAjB,EAAyBC,MAAzB,CAAP;AACD,C,CAhED","file":"connectionFromOptions.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {IConnection} from 'vscode-languageserver';\n\nimport {IPCMessageReader, IPCMessageWriter} from 'vscode-jsonrpc';\nimport {createConnection} from 'vscode-languageserver';\n\nimport net from 'net';\nimport stream from 'stream';\n\ntype Options =\n  | {\n      method: 'socket',\n      port: number,\n    }\n  | {\n      method: 'stdio',\n    }\n  | {\n      method: 'node-ipc',\n    };\n\nexport default function connectionFromOptions(options: Options): ?IConnection {\n  let reader: stream$Readable;\n  let writer: stream$Writable;\n  let server;\n\n  switch (options.method) {\n    case 'socket':\n      // For socket connection, the message connection needs to be\n      // established before the server socket starts listening.\n      // Do that, and return at the end of this block.\n      writer = new stream.PassThrough();\n      reader = new stream.PassThrough();\n      server = net\n        .createServer(socket => {\n          server.close();\n          socket.pipe(writer);\n          reader.pipe(socket);\n        })\n        .listen(options.port);\n      break;\n    case 'stdio':\n      reader = process.stdin;\n      writer = process.stdout;\n      break;\n    case 'node-ipc':\n    default:\n      reader = new IPCMessageReader(process);\n      writer = new IPCMessageWriter(process);\n      break;\n  }\n\n  return createConnection(reader, writer);\n}\n"]}