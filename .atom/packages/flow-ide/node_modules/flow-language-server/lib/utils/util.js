'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toURI = toURI;
exports.hasFlowPragma = hasFlowPragma;
exports.flowSeverityToLSPSeverity = flowSeverityToLSPSeverity;
exports.lspPositionToAtomPoint = lspPositionToAtomPoint;
exports.atomPointToLSPPosition = atomPointToLSPPosition;
exports.atomRangeToLSPRange = atomRangeToLSPRange;
exports.lspRangeToAtomRange = lspRangeToAtomRange;
exports.compareLspPosition = compareLspPosition;
exports.compareLspRange = compareLspRange;

var _simpleTextBuffer = require('simple-text-buffer');

var _vscodeLanguageserverTypes = require('vscode-languageserver-types');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _nullthrows = require('nullthrows');

var _nullthrows2 = _interopRequireDefault(_nullthrows);

var _vscodeUri = require('vscode-uri');

var _vscodeUri2 = _interopRequireDefault(_vscodeUri);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

const FlowSeverity = {
  Error: 'Error',
  Warning: 'Warning'
};

const flowSeverityToLSPSeverityMap = {
  [FlowSeverity.Error]: _vscodeLanguageserverTypes.DiagnosticSeverity.Error,
  [FlowSeverity.Warning]: _vscodeLanguageserverTypes.DiagnosticSeverity.Warning
};

function toURI(filePath) {
  return _vscodeUri2.default.file(filePath);
}

function hasFlowPragma(content) {
  const hasPragma = content.startsWith('/* @flow */') || content.startsWith('// @flow\n') || /^\s*\/\*+\s*@flow\s*\*+\//m.test(content) || /^\s*\/\/\s*@flow\s*$/m.test(content);
  return hasPragma;
}

function flowSeverityToLSPSeverity(flowSeverity) {
  (0, _assert2.default)(flowSeverity === FlowSeverity.Warning || flowSeverity === FlowSeverity.Error, 'must be a valid flow severity');

  return (0, _nullthrows2.default)(flowSeverityToLSPSeverityMap[flowSeverity]);
}

function lspPositionToAtomPoint(lspPosition) {
  return new _simpleTextBuffer.Point(lspPosition.line, lspPosition.character);
}

function atomPointToLSPPosition(atomPoint) {
  return {
    line: atomPoint.row,
    character: atomPoint.column
  };
}

function atomRangeToLSPRange(atomRange) {
  return {
    start: atomPointToLSPPosition(atomRange.start),
    end: atomPointToLSPPosition(atomRange.end)
  };
}

function lspRangeToAtomRange(lspRange) {
  return {
    start: lspPositionToAtomPoint(lspRange.start),
    end: lspPositionToAtomPoint(lspRange.end)
  };
}

function compareLspPosition(a, b) {
  return a.line - b.line || a.character - b.character;
}

function compareLspRange(a, b) {
  return compareLspPosition(a.start, b.start) || compareLspPosition(a.end, b.end);
}
//# sourceMappingURL=util.js.map