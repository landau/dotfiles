[alias]
    # View the SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph
    # pretty log
    tree = log --graph --decorate --pretty=short --abbrev-commit  --shortstat --relative-date
    # View the current working tree status using the short format
    st = status -s

    # Diff
    d = diff --patch-with-stat

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Commit shorthand
    ci = commit

    # Switch to a branch, creating it if necessary
    co = checkout

    track = "!f() { git co --track origin/$1; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l -n1
    branches = branch -a
    remotes = remote -v

    # Show current branch
    br = !"git rev-parse --abbrev-ref HEAD"

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # Undo a `git push`
    undopush = push -f origin HEAD^:master
    # Push to origin
    pm = push origin master
    # Push somewhere
    po = push origin
    # Push to origin for current branch
    pb = !git po `git br`
    # pull from fork
    fpull = pull fork master
    # rebase
    promain = pull --rebase origin main
    prom = pull --rebase origin master
    fprom = pull --rebase fork master
    prod = pull --rebase origin develop
    # rebase from elswhere
    pro = pull --rebase origin
    # rebase from cur branch
    prob = !git pro `git br`
    fpro = pull --rebase fork 
    # http://haacked.com/archive/2014/07/28/github-flow-aliases/
    save = !git add -A && git commit -m 'SAVEPOINT'
    wip = !git add -u && git commit -m 'WIP'
    undo = reset HEAD~1 --mixed
    amend = commit -a --amend
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
    changelog = "!f() { git commit -m 'Update CHANGELOG [skip ci]' -- CHANGELOG.md; }; f"

[apply]
    # Detect whitespace errors when applying a patch
    #whitespace = fix

[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    # Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
    #whitespace = space-before-tab,indent-with-non-tab,trailing-space

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
    remote = origin
    merge = refs/heads/master

# URL shorthands
[url "ssh://git@github.com/"]
	insteadOf = https://github.com/
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"
[push]
	#default = matching
	default = simple
[credential]
  # This is because signed commits at Etsy
	helper = osxkeychain
[user]
	name = Trevor Landau
	email = landau@users.noreply.github.com
	signingkey = F3A4DE9E85DD5E6C
[commit]
	gpgsign = true
